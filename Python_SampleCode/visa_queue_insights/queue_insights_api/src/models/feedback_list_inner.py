# coding: utf-8

"""
    Queue Insights API

    Visa Queue Insights - Deliver Predicted Waiting Time for select merchants to our clients through the Visa Developer Platform

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FeedbackListInner(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, actual_start_time=None, feedback_correlation_id=None, queue_length=None, actual_wait_time_in_secs=None):
        """
        FeedbackListInner - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'actual_start_time': 'str',
            'feedback_correlation_id': 'str',
            'queue_length': 'str',
            'actual_wait_time_in_secs': 'str'
        }

        self.attribute_map = {
            'actual_start_time': 'actualStartTime',
            'feedback_correlation_id': 'feedbackCorrelationID',
            'queue_length': 'queueLength',
            'actual_wait_time_in_secs': 'actualWaitTimeInSecs'
        }

        self._actual_start_time = actual_start_time
        self._feedback_correlation_id = feedback_correlation_id
        self._queue_length = queue_length
        self._actual_wait_time_in_secs = actual_wait_time_in_secs

    @property
    def actual_start_time(self):
        """
        Gets the actual_start_time of this FeedbackListInner.
        Start Time in GMT from client

        :return: The actual_start_time of this FeedbackListInner.
        :rtype: str
        """
        return self._actual_start_time

    @actual_start_time.setter
    def actual_start_time(self, actual_start_time):
        """
        Sets the actual_start_time of this FeedbackListInner.
        Start Time in GMT from client

        :param actual_start_time: The actual_start_time of this FeedbackListInner.
        :type: str
        """
        if actual_start_time is None:
            raise ValueError("Invalid value for `actual_start_time`, must not be `None`")

        self._actual_start_time = actual_start_time

    @property
    def feedback_correlation_id(self):
        """
        Gets the feedback_correlation_id of this FeedbackListInner.
        The uniquely generated feedbackCorrelationID that was given in predict response- UUID JAVA format

        :return: The feedback_correlation_id of this FeedbackListInner.
        :rtype: str
        """
        return self._feedback_correlation_id

    @feedback_correlation_id.setter
    def feedback_correlation_id(self, feedback_correlation_id):
        """
        Sets the feedback_correlation_id of this FeedbackListInner.
        The uniquely generated feedbackCorrelationID that was given in predict response- UUID JAVA format

        :param feedback_correlation_id: The feedback_correlation_id of this FeedbackListInner.
        :type: str
        """
        if feedback_correlation_id is None:
            raise ValueError("Invalid value for `feedback_correlation_id`, must not be `None`")

        self._feedback_correlation_id = feedback_correlation_id

    @property
    def queue_length(self):
        """
        Gets the queue_length of this FeedbackListInner.
        Queue Length in integer whole number

        :return: The queue_length of this FeedbackListInner.
        :rtype: str
        """
        return self._queue_length

    @queue_length.setter
    def queue_length(self, queue_length):
        """
        Sets the queue_length of this FeedbackListInner.
        Queue Length in integer whole number

        :param queue_length: The queue_length of this FeedbackListInner.
        :type: str
        """
        if queue_length is None:
            raise ValueError("Invalid value for `queue_length`, must not be `None`")

        self._queue_length = queue_length

    @property
    def actual_wait_time_in_secs(self):
        """
        Gets the actual_wait_time_in_secs of this FeedbackListInner.
        Wait Time in integer whole seconds

        :return: The actual_wait_time_in_secs of this FeedbackListInner.
        :rtype: str
        """
        return self._actual_wait_time_in_secs

    @actual_wait_time_in_secs.setter
    def actual_wait_time_in_secs(self, actual_wait_time_in_secs):
        """
        Sets the actual_wait_time_in_secs of this FeedbackListInner.
        Wait Time in integer whole seconds

        :param actual_wait_time_in_secs: The actual_wait_time_in_secs of this FeedbackListInner.
        :type: str
        """
        if actual_wait_time_in_secs is None:
            raise ValueError("Invalid value for `actual_wait_time_in_secs`, must not be `None`")

        self._actual_wait_time_in_secs = actual_wait_time_in_secs

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FeedbackListInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------