# coding: utf-8

"""
    mVisa API

    mVisa is a simple, secure and fast way to pay and be paid using mobile phones. mVisa enables a range of payment use cases and is technology agnostic-leveraging evolving POS environment such as QR codes and works on both smart or feature phones.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CardAcceptor(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id_code=None, name=None, address=None):
        """
        CardAcceptor - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id_code': 'str',
            'name': 'str',
            'address': 'Address'
        }

        self.attribute_map = {
            'id_code': 'idCode',
            'name': 'name',
            'address': 'address'
        }

        self._id_code = id_code
        self._name = name
        self._address = address

    @property
    def id_code(self):
        """
        Gets the id_code of this CardAcceptor.
        Originator can populate the field with any system generated reference number internal to originating client.

        :return: The id_code of this CardAcceptor.
        :rtype: str
        """
        return self._id_code

    @id_code.setter
    def id_code(self, id_code):
        """
        Sets the id_code of this CardAcceptor.
        Originator can populate the field with any system generated reference number internal to originating client.

        :param id_code: The id_code of this CardAcceptor.
        :type: str
        """
        if id_code is None:
            raise ValueError("Invalid value for `id_code`, must not be `None`")

        self._id_code = id_code

    @property
    def name(self):
        """
        Gets the name of this CardAcceptor.
        Populate the field with Merchant's Doing Business As name (25 characters only).  If the name is greater than 25 characters, use the first 25 characters.  The name must be populated using the Roman i.e. English character set.

        :return: The name of this CardAcceptor.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CardAcceptor.
        Populate the field with Merchant's Doing Business As name (25 characters only).  If the name is greater than 25 characters, use the first 25 characters.  The name must be populated using the Roman i.e. English character set.

        :param name: The name of this CardAcceptor.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def address(self):
        """
        Gets the address of this CardAcceptor.

        :return: The address of this CardAcceptor.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this CardAcceptor.

        :param address: The address of this CardAcceptor.
        :type: Address
        """

        self._address = address

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CardAcceptor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------