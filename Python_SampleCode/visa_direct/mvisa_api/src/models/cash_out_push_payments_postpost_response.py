# coding: utf-8

"""
    mVisa API

    mVisa is a simple, secure and fast way to pay and be paid using mobile phones. mVisa enables a range of payment use cases and is technology agnostic-leveraging evolving POS environment such as QR codes and works on both smart or feature phones.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CashOutPushPaymentsPostpostResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, approval_code=None, transaction_identifier=None, status_identifier=None, retrieval_reference_number=None, card_acceptor=None, response_code=None, action_code=None, transaction_date_time=None):
        """
        CashOutPushPaymentsPostpostResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'approval_code': 'str',
            'transaction_identifier': 'str',
            'status_identifier': 'str',
            'retrieval_reference_number': 'str',
            'card_acceptor': 'CardAcceptor',
            'response_code': 'str',
            'action_code': 'str',
            'transaction_date_time': 'str'
        }

        self.attribute_map = {
            'approval_code': 'approvalCode',
            'transaction_identifier': 'transactionIdentifier',
            'status_identifier': 'statusIdentifier',
            'retrieval_reference_number': 'retrievalReferenceNumber',
            'card_acceptor': 'cardAcceptor',
            'response_code': 'responseCode',
            'action_code': 'actionCode',
            'transaction_date_time': 'transactionDateTime'
        }

        self._approval_code = approval_code
        self._transaction_identifier = transaction_identifier
        self._status_identifier = status_identifier
        self._retrieval_reference_number = retrieval_reference_number
        self._card_acceptor = card_acceptor
        self._response_code = response_code
        self._action_code = action_code
        self._transaction_date_time = transaction_date_time

    @property
    def approval_code(self):
        """
        Gets the approval_code of this CashOutPushPaymentsPostpostResponse.
        <b>Conditional.</b> Contains the authorization code provided by the participant when a transaction is approved.

        :return: The approval_code of this CashOutPushPaymentsPostpostResponse.
        :rtype: str
        """
        return self._approval_code

    @approval_code.setter
    def approval_code(self, approval_code):
        """
        Sets the approval_code of this CashOutPushPaymentsPostpostResponse.
        <b>Conditional.</b> Contains the authorization code provided by the participant when a transaction is approved.

        :param approval_code: The approval_code of this CashOutPushPaymentsPostpostResponse.
        :type: str
        """

        self._approval_code = approval_code

    @property
    def transaction_identifier(self):
        """
        Gets the transaction_identifier of this CashOutPushPaymentsPostpostResponse.
        It is added by VisaNet. It contains a right-justified, VisaNet generated Transaction Identifier (TID) that is unique for each request. The identifier links original messages to subsequent messages, such as those for exception item processing and clearing record.

        :return: The transaction_identifier of this CashOutPushPaymentsPostpostResponse.
        :rtype: str
        """
        return self._transaction_identifier

    @transaction_identifier.setter
    def transaction_identifier(self, transaction_identifier):
        """
        Sets the transaction_identifier of this CashOutPushPaymentsPostpostResponse.
        It is added by VisaNet. It contains a right-justified, VisaNet generated Transaction Identifier (TID) that is unique for each request. The identifier links original messages to subsequent messages, such as those for exception item processing and clearing record.

        :param transaction_identifier: The transaction_identifier of this CashOutPushPaymentsPostpostResponse.
        :type: str
        """
        if transaction_identifier is None:
            raise ValueError("Invalid value for `transaction_identifier`, must not be `None`")

        self._transaction_identifier = transaction_identifier

    @property
    def status_identifier(self):
        """
        Gets the status_identifier of this CashOutPushPaymentsPostpostResponse.
        Required when API response times out.

        :return: The status_identifier of this CashOutPushPaymentsPostpostResponse.
        :rtype: str
        """
        return self._status_identifier

    @status_identifier.setter
    def status_identifier(self, status_identifier):
        """
        Sets the status_identifier of this CashOutPushPaymentsPostpostResponse.
        Required when API response times out.

        :param status_identifier: The status_identifier of this CashOutPushPaymentsPostpostResponse.
        :type: str
        """

        self._status_identifier = status_identifier

    @property
    def retrieval_reference_number(self):
        """
        Gets the retrieval_reference_number of this CashOutPushPaymentsPostpostResponse.
        Numeric only. Key data element for matching a message to others within a given transaction set. Value will be the same as what has been provided in the request.

        :return: The retrieval_reference_number of this CashOutPushPaymentsPostpostResponse.
        :rtype: str
        """
        return self._retrieval_reference_number

    @retrieval_reference_number.setter
    def retrieval_reference_number(self, retrieval_reference_number):
        """
        Sets the retrieval_reference_number of this CashOutPushPaymentsPostpostResponse.
        Numeric only. Key data element for matching a message to others within a given transaction set. Value will be the same as what has been provided in the request.

        :param retrieval_reference_number: The retrieval_reference_number of this CashOutPushPaymentsPostpostResponse.
        :type: str
        """
        if retrieval_reference_number is None:
            raise ValueError("Invalid value for `retrieval_reference_number`, must not be `None`")

        self._retrieval_reference_number = retrieval_reference_number

    @property
    def card_acceptor(self):
        """
        Gets the card_acceptor of this CashOutPushPaymentsPostpostResponse.

        :return: The card_acceptor of this CashOutPushPaymentsPostpostResponse.
        :rtype: CardAcceptor
        """
        return self._card_acceptor

    @card_acceptor.setter
    def card_acceptor(self, card_acceptor):
        """
        Sets the card_acceptor of this CashOutPushPaymentsPostpostResponse.

        :param card_acceptor: The card_acceptor of this CashOutPushPaymentsPostpostResponse.
        :type: CardAcceptor
        """

        self._card_acceptor = card_acceptor

    @property
    def response_code(self):
        """
        Gets the response_code of this CashOutPushPaymentsPostpostResponse.
        It is added by VisaNet and contains the response source/reason code that identifies the source of the field actionCode response decision.

        :return: The response_code of this CashOutPushPaymentsPostpostResponse.
        :rtype: str
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """
        Sets the response_code of this CashOutPushPaymentsPostpostResponse.
        It is added by VisaNet and contains the response source/reason code that identifies the source of the field actionCode response decision.

        :param response_code: The response_code of this CashOutPushPaymentsPostpostResponse.
        :type: str
        """
        if response_code is None:
            raise ValueError("Invalid value for `response_code`, must not be `None`")

        self._response_code = response_code

    @property
    def action_code(self):
        """
        Gets the action_code of this CashOutPushPaymentsPostpostResponse.
        Contains a code that defines the response to a request. Refer to <a href=\"/request_response_codes#action_code\">ActionCode</a>

        :return: The action_code of this CashOutPushPaymentsPostpostResponse.
        :rtype: str
        """
        return self._action_code

    @action_code.setter
    def action_code(self, action_code):
        """
        Sets the action_code of this CashOutPushPaymentsPostpostResponse.
        Contains a code that defines the response to a request. Refer to <a href=\"/request_response_codes#action_code\">ActionCode</a>

        :param action_code: The action_code of this CashOutPushPaymentsPostpostResponse.
        :type: str
        """
        if action_code is None:
            raise ValueError("Invalid value for `action_code`, must not be `None`")

        self._action_code = action_code

    @property
    def transaction_date_time(self):
        """
        Gets the transaction_date_time of this CashOutPushPaymentsPostpostResponse.
        The value in response must match the value in the request.

        :return: The transaction_date_time of this CashOutPushPaymentsPostpostResponse.
        :rtype: str
        """
        return self._transaction_date_time

    @transaction_date_time.setter
    def transaction_date_time(self, transaction_date_time):
        """
        Sets the transaction_date_time of this CashOutPushPaymentsPostpostResponse.
        The value in response must match the value in the request.

        :param transaction_date_time: The transaction_date_time of this CashOutPushPaymentsPostpostResponse.
        :type: str
        """
        if transaction_date_time is None:
            raise ValueError("Invalid value for `transaction_date_time`, must not be `None`")

        self._transaction_date_time = transaction_date_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CashOutPushPaymentsPostpostResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------