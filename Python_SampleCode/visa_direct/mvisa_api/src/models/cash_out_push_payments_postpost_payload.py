# coding: utf-8

"""
    mVisa API

    mVisa is a simple, secure and fast way to pay and be paid using mobile phones. mVisa enables a range of payment use cases and is technology agnostic-leveraging evolving POS environment such as QR codes and works on both smart or feature phones.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CashOutPushPaymentsPostpostPayload(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, local_transaction_date_time=None, acquiring_bin=None, business_application_id=None, merchant_category_code=None, card_acceptor=None, acquirer_country_code=None, retrieval_reference_number=None, amount=None, sender_reference=None, recipient_primary_account_number=None, systems_trace_audit_number=None, sender_account_number=None, transaction_currency_code=None, sender_name=None):
        """
        CashOutPushPaymentsPostpostPayload - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'local_transaction_date_time': 'str',
            'acquiring_bin': 'str',
            'business_application_id': 'str',
            'merchant_category_code': 'str',
            'card_acceptor': 'CardAcceptor',
            'acquirer_country_code': 'str',
            'retrieval_reference_number': 'str',
            'amount': 'str',
            'sender_reference': 'str',
            'recipient_primary_account_number': 'str',
            'systems_trace_audit_number': 'str',
            'sender_account_number': 'str',
            'transaction_currency_code': 'str',
            'sender_name': 'str'
        }

        self.attribute_map = {
            'local_transaction_date_time': 'localTransactionDateTime',
            'acquiring_bin': 'acquiringBin',
            'business_application_id': 'businessApplicationId',
            'merchant_category_code': 'merchantCategoryCode',
            'card_acceptor': 'cardAcceptor',
            'acquirer_country_code': 'acquirerCountryCode',
            'retrieval_reference_number': 'retrievalReferenceNumber',
            'amount': 'amount',
            'sender_reference': 'senderReference',
            'recipient_primary_account_number': 'recipientPrimaryAccountNumber',
            'systems_trace_audit_number': 'systemsTraceAuditNumber',
            'sender_account_number': 'senderAccountNumber',
            'transaction_currency_code': 'transactionCurrencyCode',
            'sender_name': 'senderName'
        }

        self._local_transaction_date_time = local_transaction_date_time
        self._acquiring_bin = acquiring_bin
        self._business_application_id = business_application_id
        self._merchant_category_code = merchant_category_code
        self._card_acceptor = card_acceptor
        self._acquirer_country_code = acquirer_country_code
        self._retrieval_reference_number = retrieval_reference_number
        self._amount = amount
        self._sender_reference = sender_reference
        self._recipient_primary_account_number = recipient_primary_account_number
        self._systems_trace_audit_number = systems_trace_audit_number
        self._sender_account_number = sender_account_number
        self._transaction_currency_code = transaction_currency_code
        self._sender_name = sender_name

    @property
    def local_transaction_date_time(self):
        """
        Gets the local_transaction_date_time of this CashOutPushPaymentsPostpostPayload.
        The date and time the transaction takes place, expressed in the local date and time of the originator.

        :return: The local_transaction_date_time of this CashOutPushPaymentsPostpostPayload.
        :rtype: str
        """
        return self._local_transaction_date_time

    @local_transaction_date_time.setter
    def local_transaction_date_time(self, local_transaction_date_time):
        """
        Sets the local_transaction_date_time of this CashOutPushPaymentsPostpostPayload.
        The date and time the transaction takes place, expressed in the local date and time of the originator.

        :param local_transaction_date_time: The local_transaction_date_time of this CashOutPushPaymentsPostpostPayload.
        :type: str
        """
        if local_transaction_date_time is None:
            raise ValueError("Invalid value for `local_transaction_date_time`, must not be `None`")

        self._local_transaction_date_time = local_transaction_date_time

    @property
    def acquiring_bin(self):
        """
        Gets the acquiring_bin of this CashOutPushPaymentsPostpostPayload.
        BIN number identifies the originator of cash-out transaction.

        :return: The acquiring_bin of this CashOutPushPaymentsPostpostPayload.
        :rtype: str
        """
        return self._acquiring_bin

    @acquiring_bin.setter
    def acquiring_bin(self, acquiring_bin):
        """
        Sets the acquiring_bin of this CashOutPushPaymentsPostpostPayload.
        BIN number identifies the originator of cash-out transaction.

        :param acquiring_bin: The acquiring_bin of this CashOutPushPaymentsPostpostPayload.
        :type: str
        """
        if acquiring_bin is None:
            raise ValueError("Invalid value for `acquiring_bin`, must not be `None`")

        self._acquiring_bin = acquiring_bin

    @property
    def business_application_id(self):
        """
        Gets the business_application_id of this CashOutPushPaymentsPostpostPayload.
        Use CO (cash-out). This field is populated with business application identifier for the transaction. Refer to <a href=\"/request_response_codes#business_application_identifier\">businessApplicationID</a> codes

        :return: The business_application_id of this CashOutPushPaymentsPostpostPayload.
        :rtype: str
        """
        return self._business_application_id

    @business_application_id.setter
    def business_application_id(self, business_application_id):
        """
        Sets the business_application_id of this CashOutPushPaymentsPostpostPayload.
        Use CO (cash-out). This field is populated with business application identifier for the transaction. Refer to <a href=\"/request_response_codes#business_application_identifier\">businessApplicationID</a> codes

        :param business_application_id: The business_application_id of this CashOutPushPaymentsPostpostPayload.
        :type: str
        """
        if business_application_id is None:
            raise ValueError("Invalid value for `business_application_id`, must not be `None`")

        self._business_application_id = business_application_id

    @property
    def merchant_category_code(self):
        """
        Gets the merchant_category_code of this CashOutPushPaymentsPostpostPayload.
        Numeric only. Originators should populate 6012. If this field is not populated by the originator, it will automatically be set to the MCC value indicated during the API onboarding process. Recipient should populate the MCC of the merchant in the response message.

        :return: The merchant_category_code of this CashOutPushPaymentsPostpostPayload.
        :rtype: str
        """
        return self._merchant_category_code

    @merchant_category_code.setter
    def merchant_category_code(self, merchant_category_code):
        """
        Sets the merchant_category_code of this CashOutPushPaymentsPostpostPayload.
        Numeric only. Originators should populate 6012. If this field is not populated by the originator, it will automatically be set to the MCC value indicated during the API onboarding process. Recipient should populate the MCC of the merchant in the response message.

        :param merchant_category_code: The merchant_category_code of this CashOutPushPaymentsPostpostPayload.
        :type: str
        """
        if merchant_category_code is None:
            raise ValueError("Invalid value for `merchant_category_code`, must not be `None`")

        self._merchant_category_code = merchant_category_code

    @property
    def card_acceptor(self):
        """
        Gets the card_acceptor of this CashOutPushPaymentsPostpostPayload.

        :return: The card_acceptor of this CashOutPushPaymentsPostpostPayload.
        :rtype: CardAcceptor
        """
        return self._card_acceptor

    @card_acceptor.setter
    def card_acceptor(self, card_acceptor):
        """
        Sets the card_acceptor of this CashOutPushPaymentsPostpostPayload.

        :param card_acceptor: The card_acceptor of this CashOutPushPaymentsPostpostPayload.
        :type: CardAcceptor
        """
        if card_acceptor is None:
            raise ValueError("Invalid value for `card_acceptor`, must not be `None`")

        self._card_acceptor = card_acceptor

    @property
    def acquirer_country_code(self):
        """
        Gets the acquirer_country_code of this CashOutPushPaymentsPostpostPayload.
        Use a 3-digit numeric country code for the country where the Visa Direct solution is registered. This must match the information provided during program enrollment. Refer to <a href=\"/request_response_codes#iso_country_codes\">ISO Codes</a>.

        :return: The acquirer_country_code of this CashOutPushPaymentsPostpostPayload.
        :rtype: str
        """
        return self._acquirer_country_code

    @acquirer_country_code.setter
    def acquirer_country_code(self, acquirer_country_code):
        """
        Sets the acquirer_country_code of this CashOutPushPaymentsPostpostPayload.
        Use a 3-digit numeric country code for the country where the Visa Direct solution is registered. This must match the information provided during program enrollment. Refer to <a href=\"/request_response_codes#iso_country_codes\">ISO Codes</a>.

        :param acquirer_country_code: The acquirer_country_code of this CashOutPushPaymentsPostpostPayload.
        :type: str
        """
        if acquirer_country_code is None:
            raise ValueError("Invalid value for `acquirer_country_code`, must not be `None`")

        self._acquirer_country_code = acquirer_country_code

    @property
    def retrieval_reference_number(self):
        """
        Gets the retrieval_reference_number of this CashOutPushPaymentsPostpostPayload.
        Numeric only. Key data element for matching a message to others within a given transaction set. The same number appears in all related messages: response, advice, reversal, chargeback, chargeback reversal, or representment. It is recommended that the client populate ydddhhnnnnnn value in this field.

        :return: The retrieval_reference_number of this CashOutPushPaymentsPostpostPayload.
        :rtype: str
        """
        return self._retrieval_reference_number

    @retrieval_reference_number.setter
    def retrieval_reference_number(self, retrieval_reference_number):
        """
        Sets the retrieval_reference_number of this CashOutPushPaymentsPostpostPayload.
        Numeric only. Key data element for matching a message to others within a given transaction set. The same number appears in all related messages: response, advice, reversal, chargeback, chargeback reversal, or representment. It is recommended that the client populate ydddhhnnnnnn value in this field.

        :param retrieval_reference_number: The retrieval_reference_number of this CashOutPushPaymentsPostpostPayload.
        :type: str
        """
        if retrieval_reference_number is None:
            raise ValueError("Invalid value for `retrieval_reference_number`, must not be `None`")

        self._retrieval_reference_number = retrieval_reference_number

    @property
    def amount(self):
        """
        Gets the amount of this CashOutPushPaymentsPostpostPayload.
        Transaction amount in merchant currency. 

        :return: The amount of this CashOutPushPaymentsPostpostPayload.
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this CashOutPushPaymentsPostpostPayload.
        Transaction amount in merchant currency. 

        :param amount: The amount of this CashOutPushPaymentsPostpostPayload.
        :type: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def sender_reference(self):
        """
        Gets the sender_reference of this CashOutPushPaymentsPostpostPayload.
        A reference number unique to the merchant. Field can be left blank.

        :return: The sender_reference of this CashOutPushPaymentsPostpostPayload.
        :rtype: str
        """
        return self._sender_reference

    @sender_reference.setter
    def sender_reference(self, sender_reference):
        """
        Sets the sender_reference of this CashOutPushPaymentsPostpostPayload.
        A reference number unique to the merchant. Field can be left blank.

        :param sender_reference: The sender_reference of this CashOutPushPaymentsPostpostPayload.
        :type: str
        """

        self._sender_reference = sender_reference

    @property
    def recipient_primary_account_number(self):
        """
        Gets the recipient_primary_account_number of this CashOutPushPaymentsPostpostPayload.
        Consumer PAN. 16-digit PAN as provided by the consumer to merchant.

        :return: The recipient_primary_account_number of this CashOutPushPaymentsPostpostPayload.
        :rtype: str
        """
        return self._recipient_primary_account_number

    @recipient_primary_account_number.setter
    def recipient_primary_account_number(self, recipient_primary_account_number):
        """
        Sets the recipient_primary_account_number of this CashOutPushPaymentsPostpostPayload.
        Consumer PAN. 16-digit PAN as provided by the consumer to merchant.

        :param recipient_primary_account_number: The recipient_primary_account_number of this CashOutPushPaymentsPostpostPayload.
        :type: str
        """
        if recipient_primary_account_number is None:
            raise ValueError("Invalid value for `recipient_primary_account_number`, must not be `None`")

        self._recipient_primary_account_number = recipient_primary_account_number

    @property
    def systems_trace_audit_number(self):
        """
        Gets the systems_trace_audit_number of this CashOutPushPaymentsPostpostPayload.
        Numeric only. It is a key data element used to match a response to its request or to match a message to others for a given transaction. The value assigned to the original request should appear in all subsequent messages for that transaction

        :return: The systems_trace_audit_number of this CashOutPushPaymentsPostpostPayload.
        :rtype: str
        """
        return self._systems_trace_audit_number

    @systems_trace_audit_number.setter
    def systems_trace_audit_number(self, systems_trace_audit_number):
        """
        Sets the systems_trace_audit_number of this CashOutPushPaymentsPostpostPayload.
        Numeric only. It is a key data element used to match a response to its request or to match a message to others for a given transaction. The value assigned to the original request should appear in all subsequent messages for that transaction

        :param systems_trace_audit_number: The systems_trace_audit_number of this CashOutPushPaymentsPostpostPayload.
        :type: str
        """
        if systems_trace_audit_number is None:
            raise ValueError("Invalid value for `systems_trace_audit_number`, must not be `None`")

        self._systems_trace_audit_number = systems_trace_audit_number

    @property
    def sender_account_number(self):
        """
        Gets the sender_account_number of this CashOutPushPaymentsPostpostPayload.
        Populate with consumer PAN.   If the consumer PAN is not populated or is not valid or contains extra spaces, VisaNet will reject the transaction with reject code 494 (Field or data missing or invalid)

        :return: The sender_account_number of this CashOutPushPaymentsPostpostPayload.
        :rtype: str
        """
        return self._sender_account_number

    @sender_account_number.setter
    def sender_account_number(self, sender_account_number):
        """
        Sets the sender_account_number of this CashOutPushPaymentsPostpostPayload.
        Populate with consumer PAN.   If the consumer PAN is not populated or is not valid or contains extra spaces, VisaNet will reject the transaction with reject code 494 (Field or data missing or invalid)

        :param sender_account_number: The sender_account_number of this CashOutPushPaymentsPostpostPayload.
        :type: str
        """
        if sender_account_number is None:
            raise ValueError("Invalid value for `sender_account_number`, must not be `None`")

        self._sender_account_number = sender_account_number

    @property
    def transaction_currency_code(self):
        """
        Gets the transaction_currency_code of this CashOutPushPaymentsPostpostPayload.
        The code in this field must always reflect the currency associated to the amount in field Amount. Use a 3-digit numeric currency code for currency. Refer to <a href=\"/request_response_codes#currency_codes\">ISO Codes</a>.

        :return: The transaction_currency_code of this CashOutPushPaymentsPostpostPayload.
        :rtype: str
        """
        return self._transaction_currency_code

    @transaction_currency_code.setter
    def transaction_currency_code(self, transaction_currency_code):
        """
        Sets the transaction_currency_code of this CashOutPushPaymentsPostpostPayload.
        The code in this field must always reflect the currency associated to the amount in field Amount. Use a 3-digit numeric currency code for currency. Refer to <a href=\"/request_response_codes#currency_codes\">ISO Codes</a>.

        :param transaction_currency_code: The transaction_currency_code of this CashOutPushPaymentsPostpostPayload.
        :type: str
        """
        if transaction_currency_code is None:
            raise ValueError("Invalid value for `transaction_currency_code`, must not be `None`")

        self._transaction_currency_code = transaction_currency_code

    @property
    def sender_name(self):
        """
        Gets the sender_name of this CashOutPushPaymentsPostpostPayload.
        Please use consumer name to populate this field.  If consumer name is greater than 30 characters, use first 30 characteres.  The name must be populated using the Roman, i.e. English character set.

        :return: The sender_name of this CashOutPushPaymentsPostpostPayload.
        :rtype: str
        """
        return self._sender_name

    @sender_name.setter
    def sender_name(self, sender_name):
        """
        Sets the sender_name of this CashOutPushPaymentsPostpostPayload.
        Please use consumer name to populate this field.  If consumer name is greater than 30 characters, use first 30 characteres.  The name must be populated using the Roman, i.e. English character set.

        :param sender_name: The sender_name of this CashOutPushPaymentsPostpostPayload.
        :type: str
        """
        if sender_name is None:
            raise ValueError("Invalid value for `sender_name`, must not be `None`")

        self._sender_name = sender_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CashOutPushPaymentsPostpostPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------