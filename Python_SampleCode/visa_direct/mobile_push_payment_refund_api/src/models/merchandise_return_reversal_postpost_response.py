# coding: utf-8

"""
    Mobile Push Payment Refund API

    Mobile Push Payment is a simple, secure and fast way to pay and be paid using mobile phones. Mobile Push Payment enables a range of payment use cases and is technology agnostic-leveraging evolving POS environment such as QR codes and works on both smart or feature phones.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MerchandiseReturnReversalPostpostResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, approval_code=None, fee_program_indicator=None, merchant_verification_value=None, status_identifier=None, transaction_identifier=None, response_code=None, action_code=None, transmission_date_time=None):
        """
        MerchandiseReturnReversalPostpostResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'approval_code': 'str',
            'fee_program_indicator': 'str',
            'merchant_verification_value': 'str',
            'status_identifier': 'str',
            'transaction_identifier': 'str',
            'response_code': 'str',
            'action_code': 'str',
            'transmission_date_time': 'str'
        }

        self.attribute_map = {
            'approval_code': 'approvalCode',
            'fee_program_indicator': 'feeProgramIndicator',
            'merchant_verification_value': 'merchantVerificationValue',
            'status_identifier': 'statusIdentifier',
            'transaction_identifier': 'transactionIdentifier',
            'response_code': 'responseCode',
            'action_code': 'actionCode',
            'transmission_date_time': 'transmissionDateTime'
        }

        self._approval_code = approval_code
        self._fee_program_indicator = fee_program_indicator
        self._merchant_verification_value = merchant_verification_value
        self._status_identifier = status_identifier
        self._transaction_identifier = transaction_identifier
        self._response_code = response_code
        self._action_code = action_code
        self._transmission_date_time = transmission_date_time

    @property
    def approval_code(self):
        """
        Gets the approval_code of this MerchandiseReturnReversalPostpostResponse.
        The authorization code from the issuer.

        :return: The approval_code of this MerchandiseReturnReversalPostpostResponse.
        :rtype: str
        """
        return self._approval_code

    @approval_code.setter
    def approval_code(self, approval_code):
        """
        Sets the approval_code of this MerchandiseReturnReversalPostpostResponse.
        The authorization code from the issuer.

        :param approval_code: The approval_code of this MerchandiseReturnReversalPostpostResponse.
        :type: str
        """

        self._approval_code = approval_code

    @property
    def fee_program_indicator(self):
        """
        Gets the fee_program_indicator of this MerchandiseReturnReversalPostpostResponse.
        Optional field which may be populated by recipient where applicable.

        :return: The fee_program_indicator of this MerchandiseReturnReversalPostpostResponse.
        :rtype: str
        """
        return self._fee_program_indicator

    @fee_program_indicator.setter
    def fee_program_indicator(self, fee_program_indicator):
        """
        Sets the fee_program_indicator of this MerchandiseReturnReversalPostpostResponse.
        Optional field which may be populated by recipient where applicable.

        :param fee_program_indicator: The fee_program_indicator of this MerchandiseReturnReversalPostpostResponse.
        :type: str
        """

        self._fee_program_indicator = fee_program_indicator

    @property
    def merchant_verification_value(self):
        """
        Gets the merchant_verification_value of this MerchandiseReturnReversalPostpostResponse.
        The concatenated Merchant Verification Value of Visa assigned and Acquirer assigned value is returned.

        :return: The merchant_verification_value of this MerchandiseReturnReversalPostpostResponse.
        :rtype: str
        """
        return self._merchant_verification_value

    @merchant_verification_value.setter
    def merchant_verification_value(self, merchant_verification_value):
        """
        Sets the merchant_verification_value of this MerchandiseReturnReversalPostpostResponse.
        The concatenated Merchant Verification Value of Visa assigned and Acquirer assigned value is returned.

        :param merchant_verification_value: The merchant_verification_value of this MerchandiseReturnReversalPostpostResponse.
        :type: str
        """

        self._merchant_verification_value = merchant_verification_value

    @property
    def status_identifier(self):
        """
        Gets the status_identifier of this MerchandiseReturnReversalPostpostResponse.
        required when call times out

        :return: The status_identifier of this MerchandiseReturnReversalPostpostResponse.
        :rtype: str
        """
        return self._status_identifier

    @status_identifier.setter
    def status_identifier(self, status_identifier):
        """
        Sets the status_identifier of this MerchandiseReturnReversalPostpostResponse.
        required when call times out

        :param status_identifier: The status_identifier of this MerchandiseReturnReversalPostpostResponse.
        :type: str
        """
        if status_identifier is None:
            raise ValueError("Invalid value for `status_identifier`, must not be `None`")

        self._status_identifier = status_identifier

    @property
    def transaction_identifier(self):
        """
        Gets the transaction_identifier of this MerchandiseReturnReversalPostpostResponse.
        It contains a right-justified, VisaNet generated Transaction Identifier (TID).

        :return: The transaction_identifier of this MerchandiseReturnReversalPostpostResponse.
        :rtype: str
        """
        return self._transaction_identifier

    @transaction_identifier.setter
    def transaction_identifier(self, transaction_identifier):
        """
        Sets the transaction_identifier of this MerchandiseReturnReversalPostpostResponse.
        It contains a right-justified, VisaNet generated Transaction Identifier (TID).

        :param transaction_identifier: The transaction_identifier of this MerchandiseReturnReversalPostpostResponse.
        :type: str
        """
        if transaction_identifier is None:
            raise ValueError("Invalid value for `transaction_identifier`, must not be `None`")

        self._transaction_identifier = transaction_identifier

    @property
    def response_code(self):
        """
        Gets the response_code of this MerchandiseReturnReversalPostpostResponse.
        The source for the response; typically, either the recipient issuer or a Visa system.Refer to  The VisaNet Response Source for the transaction

        :return: The response_code of this MerchandiseReturnReversalPostpostResponse.
        :rtype: str
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """
        Sets the response_code of this MerchandiseReturnReversalPostpostResponse.
        The source for the response; typically, either the recipient issuer or a Visa system.Refer to  The VisaNet Response Source for the transaction

        :param response_code: The response_code of this MerchandiseReturnReversalPostpostResponse.
        :type: str
        """
        if response_code is None:
            raise ValueError("Invalid value for `response_code`, must not be `None`")

        self._response_code = response_code

    @property
    def action_code(self):
        """
        Gets the action_code of this MerchandiseReturnReversalPostpostResponse.
        It contains a code that defines the response to a request

        :return: The action_code of this MerchandiseReturnReversalPostpostResponse.
        :rtype: str
        """
        return self._action_code

    @action_code.setter
    def action_code(self, action_code):
        """
        Sets the action_code of this MerchandiseReturnReversalPostpostResponse.
        It contains a code that defines the response to a request

        :param action_code: The action_code of this MerchandiseReturnReversalPostpostResponse.
        :type: str
        """
        if action_code is None:
            raise ValueError("Invalid value for `action_code`, must not be `None`")

        self._action_code = action_code

    @property
    def transmission_date_time(self):
        """
        Gets the transmission_date_time of this MerchandiseReturnReversalPostpostResponse.
        Transmission date and time

        :return: The transmission_date_time of this MerchandiseReturnReversalPostpostResponse.
        :rtype: str
        """
        return self._transmission_date_time

    @transmission_date_time.setter
    def transmission_date_time(self, transmission_date_time):
        """
        Sets the transmission_date_time of this MerchandiseReturnReversalPostpostResponse.
        Transmission date and time

        :param transmission_date_time: The transmission_date_time of this MerchandiseReturnReversalPostpostResponse.
        :type: str
        """
        if transmission_date_time is None:
            raise ValueError("Invalid value for `transmission_date_time`, must not be `None`")

        self._transmission_date_time = transmission_date_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MerchandiseReturnReversalPostpostResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------