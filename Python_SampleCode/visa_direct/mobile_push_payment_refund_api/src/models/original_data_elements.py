# coding: utf-8

"""
    Mobile Push Payment Refund API

    Mobile Push Payment is a simple, secure and fast way to pay and be paid using mobile phones. Mobile Push Payment enables a range of payment use cases and is technology agnostic-leveraging evolving POS environment such as QR codes and works on both smart or feature phones.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OriginalDataElements(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, acquiring_bin=None, approval_code=None, systems_trace_audit_number=None, transmission_date_time=None):
        """
        OriginalDataElements - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'acquiring_bin': 'int',
            'approval_code': 'str',
            'systems_trace_audit_number': 'int',
            'transmission_date_time': 'str'
        }

        self.attribute_map = {
            'acquiring_bin': 'acquiringBin',
            'approval_code': 'approvalCode',
            'systems_trace_audit_number': 'systemsTraceAuditNumber',
            'transmission_date_time': 'transmissionDateTime'
        }

        self._acquiring_bin = acquiring_bin
        self._approval_code = approval_code
        self._systems_trace_audit_number = systems_trace_audit_number
        self._transmission_date_time = transmission_date_time

    @property
    def acquiring_bin(self):
        """
        Gets the acquiring_bin of this OriginalDataElements.
        This field must match with the BIN previously sent in the original refund transaction.

        :return: The acquiring_bin of this OriginalDataElements.
        :rtype: int
        """
        return self._acquiring_bin

    @acquiring_bin.setter
    def acquiring_bin(self, acquiring_bin):
        """
        Sets the acquiring_bin of this OriginalDataElements.
        This field must match with the BIN previously sent in the original refund transaction.

        :param acquiring_bin: The acquiring_bin of this OriginalDataElements.
        :type: int
        """
        if acquiring_bin is None:
            raise ValueError("Invalid value for `acquiring_bin`, must not be `None`")

        self._acquiring_bin = acquiring_bin

    @property
    def approval_code(self):
        """
        Gets the approval_code of this OriginalDataElements.
        This field, if present, must contain the approvalCode from the original refund transaction.

        :return: The approval_code of this OriginalDataElements.
        :rtype: str
        """
        return self._approval_code

    @approval_code.setter
    def approval_code(self, approval_code):
        """
        Sets the approval_code of this OriginalDataElements.
        This field, if present, must contain the approvalCode from the original refund transaction.

        :param approval_code: The approval_code of this OriginalDataElements.
        :type: str
        """

        self._approval_code = approval_code

    @property
    def systems_trace_audit_number(self):
        """
        Gets the systems_trace_audit_number of this OriginalDataElements.
        This field must contain with the systemsTraceAuditNumber previously sent in  the original refund transaction.

        :return: The systems_trace_audit_number of this OriginalDataElements.
        :rtype: int
        """
        return self._systems_trace_audit_number

    @systems_trace_audit_number.setter
    def systems_trace_audit_number(self, systems_trace_audit_number):
        """
        Sets the systems_trace_audit_number of this OriginalDataElements.
        This field must contain with the systemsTraceAuditNumber previously sent in  the original refund transaction.

        :param systems_trace_audit_number: The systems_trace_audit_number of this OriginalDataElements.
        :type: int
        """
        if systems_trace_audit_number is None:
            raise ValueError("Invalid value for `systems_trace_audit_number`, must not be `None`")

        self._systems_trace_audit_number = systems_trace_audit_number

    @property
    def transmission_date_time(self):
        """
        Gets the transmission_date_time of this OriginalDataElements.
        This field must contain the transmissionDateTime from the original refund transaction.

        :return: The transmission_date_time of this OriginalDataElements.
        :rtype: str
        """
        return self._transmission_date_time

    @transmission_date_time.setter
    def transmission_date_time(self, transmission_date_time):
        """
        Sets the transmission_date_time of this OriginalDataElements.
        This field must contain the transmissionDateTime from the original refund transaction.

        :param transmission_date_time: The transmission_date_time of this OriginalDataElements.
        :type: str
        """
        if transmission_date_time is None:
            raise ValueError("Invalid value for `transmission_date_time`, must not be `None`")

        self._transmission_date_time = transmission_date_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OriginalDataElements):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------