# coding: utf-8

"""
    Mobile Push Payment Refund API

    Mobile Push Payment is a simple, secure and fast way to pay and be paid using mobile phones. Mobile Push Payment enables a range of payment use cases and is technology agnostic-leveraging evolving POS environment such as QR codes and works on both smart or feature phones.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MerchandiseReturnReversalPostpostPayload(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, local_transaction_date_time=None, recipient_primary_account_number=None, fee_program_indicator=None, transaction_fee_amt=None, acquirer_country_code=None, transaction_identifier=None, amount=None, original_data_elements=None, card_acceptor=None, acquiring_bin=None, retrieval_reference_number=None, systems_trace_audit_number=None, sender_currency_code=None, merchant_verification_value=None):
        """
        MerchandiseReturnReversalPostpostPayload - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'local_transaction_date_time': 'str',
            'recipient_primary_account_number': 'str',
            'fee_program_indicator': 'str',
            'transaction_fee_amt': 'str',
            'acquirer_country_code': 'str',
            'transaction_identifier': 'str',
            'amount': 'str',
            'original_data_elements': 'OriginalDataElements',
            'card_acceptor': 'CardAcceptor',
            'acquiring_bin': 'str',
            'retrieval_reference_number': 'str',
            'systems_trace_audit_number': 'str',
            'sender_currency_code': 'str',
            'merchant_verification_value': 'MerchantVerificationValue'
        }

        self.attribute_map = {
            'local_transaction_date_time': 'localTransactionDateTime',
            'recipient_primary_account_number': 'recipientPrimaryAccountNumber',
            'fee_program_indicator': 'feeProgramIndicator',
            'transaction_fee_amt': 'transactionFeeAmt',
            'acquirer_country_code': 'acquirerCountryCode',
            'transaction_identifier': 'transactionIdentifier',
            'amount': 'amount',
            'original_data_elements': 'originalDataElements',
            'card_acceptor': 'cardAcceptor',
            'acquiring_bin': 'acquiringBin',
            'retrieval_reference_number': 'retrievalReferenceNumber',
            'systems_trace_audit_number': 'systemsTraceAuditNumber',
            'sender_currency_code': 'senderCurrencyCode',
            'merchant_verification_value': 'merchantVerificationValue'
        }

        self._local_transaction_date_time = local_transaction_date_time
        self._recipient_primary_account_number = recipient_primary_account_number
        self._fee_program_indicator = fee_program_indicator
        self._transaction_fee_amt = transaction_fee_amt
        self._acquirer_country_code = acquirer_country_code
        self._transaction_identifier = transaction_identifier
        self._amount = amount
        self._original_data_elements = original_data_elements
        self._card_acceptor = card_acceptor
        self._acquiring_bin = acquiring_bin
        self._retrieval_reference_number = retrieval_reference_number
        self._systems_trace_audit_number = systems_trace_audit_number
        self._sender_currency_code = sender_currency_code
        self._merchant_verification_value = merchant_verification_value

    @property
    def local_transaction_date_time(self):
        """
        Gets the local_transaction_date_time of this MerchandiseReturnReversalPostpostPayload.
        This should be +/- 3 days from the current date.<br><br>The date is in yyyy-mm-ddThh:mm:ss format

        :return: The local_transaction_date_time of this MerchandiseReturnReversalPostpostPayload.
        :rtype: str
        """
        return self._local_transaction_date_time

    @local_transaction_date_time.setter
    def local_transaction_date_time(self, local_transaction_date_time):
        """
        Sets the local_transaction_date_time of this MerchandiseReturnReversalPostpostPayload.
        This should be +/- 3 days from the current date.<br><br>The date is in yyyy-mm-ddThh:mm:ss format

        :param local_transaction_date_time: The local_transaction_date_time of this MerchandiseReturnReversalPostpostPayload.
        :type: str
        """
        if local_transaction_date_time is None:
            raise ValueError("Invalid value for `local_transaction_date_time`, must not be `None`")

        self._local_transaction_date_time = local_transaction_date_time

    @property
    def recipient_primary_account_number(self):
        """
        Gets the recipient_primary_account_number of this MerchandiseReturnReversalPostpostPayload.
        Populate with Consumer PAN used in the refund transaction.

        :return: The recipient_primary_account_number of this MerchandiseReturnReversalPostpostPayload.
        :rtype: str
        """
        return self._recipient_primary_account_number

    @recipient_primary_account_number.setter
    def recipient_primary_account_number(self, recipient_primary_account_number):
        """
        Sets the recipient_primary_account_number of this MerchandiseReturnReversalPostpostPayload.
        Populate with Consumer PAN used in the refund transaction.

        :param recipient_primary_account_number: The recipient_primary_account_number of this MerchandiseReturnReversalPostpostPayload.
        :type: str
        """
        if recipient_primary_account_number is None:
            raise ValueError("Invalid value for `recipient_primary_account_number`, must not be `None`")

        self._recipient_primary_account_number = recipient_primary_account_number

    @property
    def fee_program_indicator(self):
        """
        Gets the fee_program_indicator of this MerchandiseReturnReversalPostpostPayload.
        Originators can leave this field blank.

        :return: The fee_program_indicator of this MerchandiseReturnReversalPostpostPayload.
        :rtype: str
        """
        return self._fee_program_indicator

    @fee_program_indicator.setter
    def fee_program_indicator(self, fee_program_indicator):
        """
        Sets the fee_program_indicator of this MerchandiseReturnReversalPostpostPayload.
        Originators can leave this field blank.

        :param fee_program_indicator: The fee_program_indicator of this MerchandiseReturnReversalPostpostPayload.
        :type: str
        """

        self._fee_program_indicator = fee_program_indicator

    @property
    def transaction_fee_amt(self):
        """
        Gets the transaction_fee_amt of this MerchandiseReturnReversalPostpostPayload.
        Prefix ‘D’Originators are required to populate convenience fee amount in this field to be returned, if presented in the original refund message.

        :return: The transaction_fee_amt of this MerchandiseReturnReversalPostpostPayload.
        :rtype: str
        """
        return self._transaction_fee_amt

    @transaction_fee_amt.setter
    def transaction_fee_amt(self, transaction_fee_amt):
        """
        Sets the transaction_fee_amt of this MerchandiseReturnReversalPostpostPayload.
        Prefix ‘D’Originators are required to populate convenience fee amount in this field to be returned, if presented in the original refund message.

        :param transaction_fee_amt: The transaction_fee_amt of this MerchandiseReturnReversalPostpostPayload.
        :type: str
        """

        self._transaction_fee_amt = transaction_fee_amt

    @property
    def acquirer_country_code(self):
        """
        Gets the acquirer_country_code of this MerchandiseReturnReversalPostpostPayload.
        Use a 3-digit numeric country code for the country. This must match the information provided during program enrollment.

        :return: The acquirer_country_code of this MerchandiseReturnReversalPostpostPayload.
        :rtype: str
        """
        return self._acquirer_country_code

    @acquirer_country_code.setter
    def acquirer_country_code(self, acquirer_country_code):
        """
        Sets the acquirer_country_code of this MerchandiseReturnReversalPostpostPayload.
        Use a 3-digit numeric country code for the country. This must match the information provided during program enrollment.

        :param acquirer_country_code: The acquirer_country_code of this MerchandiseReturnReversalPostpostPayload.
        :type: str
        """
        if acquirer_country_code is None:
            raise ValueError("Invalid value for `acquirer_country_code`, must not be `None`")

        self._acquirer_country_code = acquirer_country_code

    @property
    def transaction_identifier(self):
        """
        Gets the transaction_identifier of this MerchandiseReturnReversalPostpostPayload.
        <b>Conditional.</b> If originator submits merchant payment transaction using MerchantPushPayments API, they should submit the same value of transactionIdentifier in API request.  Otherwise, do not use this field in the API request.

        :return: The transaction_identifier of this MerchandiseReturnReversalPostpostPayload.
        :rtype: str
        """
        return self._transaction_identifier

    @transaction_identifier.setter
    def transaction_identifier(self, transaction_identifier):
        """
        Sets the transaction_identifier of this MerchandiseReturnReversalPostpostPayload.
        <b>Conditional.</b> If originator submits merchant payment transaction using MerchantPushPayments API, they should submit the same value of transactionIdentifier in API request.  Otherwise, do not use this field in the API request.

        :param transaction_identifier: The transaction_identifier of this MerchandiseReturnReversalPostpostPayload.
        :type: str
        """
        if transaction_identifier is None:
            raise ValueError("Invalid value for `transaction_identifier`, must not be `None`")

        self._transaction_identifier = transaction_identifier

    @property
    def amount(self):
        """
        Gets the amount of this MerchandiseReturnReversalPostpostPayload.
        The amount must match the original refund transaction.

        :return: The amount of this MerchandiseReturnReversalPostpostPayload.
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this MerchandiseReturnReversalPostpostPayload.
        The amount must match the original refund transaction.

        :param amount: The amount of this MerchandiseReturnReversalPostpostPayload.
        :type: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def original_data_elements(self):
        """
        Gets the original_data_elements of this MerchandiseReturnReversalPostpostPayload.

        :return: The original_data_elements of this MerchandiseReturnReversalPostpostPayload.
        :rtype: OriginalDataElements
        """
        return self._original_data_elements

    @original_data_elements.setter
    def original_data_elements(self, original_data_elements):
        """
        Sets the original_data_elements of this MerchandiseReturnReversalPostpostPayload.

        :param original_data_elements: The original_data_elements of this MerchandiseReturnReversalPostpostPayload.
        :type: OriginalDataElements
        """
        if original_data_elements is None:
            raise ValueError("Invalid value for `original_data_elements`, must not be `None`")

        self._original_data_elements = original_data_elements

    @property
    def card_acceptor(self):
        """
        Gets the card_acceptor of this MerchandiseReturnReversalPostpostPayload.

        :return: The card_acceptor of this MerchandiseReturnReversalPostpostPayload.
        :rtype: CardAcceptor
        """
        return self._card_acceptor

    @card_acceptor.setter
    def card_acceptor(self, card_acceptor):
        """
        Sets the card_acceptor of this MerchandiseReturnReversalPostpostPayload.

        :param card_acceptor: The card_acceptor of this MerchandiseReturnReversalPostpostPayload.
        :type: CardAcceptor
        """
        if card_acceptor is None:
            raise ValueError("Invalid value for `card_acceptor`, must not be `None`")

        self._card_acceptor = card_acceptor

    @property
    def acquiring_bin(self):
        """
        Gets the acquiring_bin of this MerchandiseReturnReversalPostpostPayload.
        This BIN number identifies the originator of refund transaction. This information must match the BIN provided during enrollment.

        :return: The acquiring_bin of this MerchandiseReturnReversalPostpostPayload.
        :rtype: str
        """
        return self._acquiring_bin

    @acquiring_bin.setter
    def acquiring_bin(self, acquiring_bin):
        """
        Sets the acquiring_bin of this MerchandiseReturnReversalPostpostPayload.
        This BIN number identifies the originator of refund transaction. This information must match the BIN provided during enrollment.

        :param acquiring_bin: The acquiring_bin of this MerchandiseReturnReversalPostpostPayload.
        :type: str
        """
        if acquiring_bin is None:
            raise ValueError("Invalid value for `acquiring_bin`, must not be `None`")

        self._acquiring_bin = acquiring_bin

    @property
    def retrieval_reference_number(self):
        """
        Gets the retrieval_reference_number of this MerchandiseReturnReversalPostpostPayload.
        Numeric only. This value must match the retrievalReferenceNumber previously sent in the original refund transaction.

        :return: The retrieval_reference_number of this MerchandiseReturnReversalPostpostPayload.
        :rtype: str
        """
        return self._retrieval_reference_number

    @retrieval_reference_number.setter
    def retrieval_reference_number(self, retrieval_reference_number):
        """
        Sets the retrieval_reference_number of this MerchandiseReturnReversalPostpostPayload.
        Numeric only. This value must match the retrievalReferenceNumber previously sent in the original refund transaction.

        :param retrieval_reference_number: The retrieval_reference_number of this MerchandiseReturnReversalPostpostPayload.
        :type: str
        """
        if retrieval_reference_number is None:
            raise ValueError("Invalid value for `retrieval_reference_number`, must not be `None`")

        self._retrieval_reference_number = retrieval_reference_number

    @property
    def systems_trace_audit_number(self):
        """
        Gets the systems_trace_audit_number of this MerchandiseReturnReversalPostpostPayload.
        Numeric only. This value must match with the systemsTraceAuditNumber previously sent in the original refund transaction.

        :return: The systems_trace_audit_number of this MerchandiseReturnReversalPostpostPayload.
        :rtype: str
        """
        return self._systems_trace_audit_number

    @systems_trace_audit_number.setter
    def systems_trace_audit_number(self, systems_trace_audit_number):
        """
        Sets the systems_trace_audit_number of this MerchandiseReturnReversalPostpostPayload.
        Numeric only. This value must match with the systemsTraceAuditNumber previously sent in the original refund transaction.

        :param systems_trace_audit_number: The systems_trace_audit_number of this MerchandiseReturnReversalPostpostPayload.
        :type: str
        """
        if systems_trace_audit_number is None:
            raise ValueError("Invalid value for `systems_trace_audit_number`, must not be `None`")

        self._systems_trace_audit_number = systems_trace_audit_number

    @property
    def sender_currency_code(self):
        """
        Gets the sender_currency_code of this MerchandiseReturnReversalPostpostPayload.
        The code in this field must always reflect the currency previously sent in the original refund transaction.

        :return: The sender_currency_code of this MerchandiseReturnReversalPostpostPayload.
        :rtype: str
        """
        return self._sender_currency_code

    @sender_currency_code.setter
    def sender_currency_code(self, sender_currency_code):
        """
        Sets the sender_currency_code of this MerchandiseReturnReversalPostpostPayload.
        The code in this field must always reflect the currency previously sent in the original refund transaction.

        :param sender_currency_code: The sender_currency_code of this MerchandiseReturnReversalPostpostPayload.
        :type: str
        """
        if sender_currency_code is None:
            raise ValueError("Invalid value for `sender_currency_code`, must not be `None`")

        self._sender_currency_code = sender_currency_code

    @property
    def merchant_verification_value(self):
        """
        Gets the merchant_verification_value of this MerchandiseReturnReversalPostpostPayload.

        :return: The merchant_verification_value of this MerchandiseReturnReversalPostpostPayload.
        :rtype: MerchantVerificationValue
        """
        return self._merchant_verification_value

    @merchant_verification_value.setter
    def merchant_verification_value(self, merchant_verification_value):
        """
        Sets the merchant_verification_value of this MerchandiseReturnReversalPostpostPayload.

        :param merchant_verification_value: The merchant_verification_value of this MerchandiseReturnReversalPostpostPayload.
        :type: MerchantVerificationValue
        """

        self._merchant_verification_value = merchant_verification_value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MerchandiseReturnReversalPostpostPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------