# coding: utf-8

"""
    Adjustment API

    The AdjustReverseFundsTransactions resource credits (pushes back) funds to the sender&apos;s Visa account by initiating a financial message called an Account Funding Transaction Reversal (AFTR) without the 24 hours limitation in the AFTR.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CardAcceptor(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id_code=None, address=None, name=None, terminal_id=None):
        """
        CardAcceptor - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id_code': 'str',
            'address': 'Address',
            'name': 'str',
            'terminal_id': 'str'
        }

        self.attribute_map = {
            'id_code': 'idCode',
            'address': 'address',
            'name': 'name',
            'terminal_id': 'terminalId'
        }

        self._id_code = id_code
        self._address = address
        self._name = name
        self._terminal_id = terminal_id

    @property
    def id_code(self):
        """
        Gets the id_code of this CardAcceptor.
        A unique identifier for the card acceptor (Visa Direct merchant).

        :return: The id_code of this CardAcceptor.
        :rtype: str
        """
        return self._id_code

    @id_code.setter
    def id_code(self, id_code):
        """
        Sets the id_code of this CardAcceptor.
        A unique identifier for the card acceptor (Visa Direct merchant).

        :param id_code: The id_code of this CardAcceptor.
        :type: str
        """
        if id_code is None:
            raise ValueError("Invalid value for `id_code`, must not be `None`")

        self._id_code = id_code

    @property
    def address(self):
        """
        Gets the address of this CardAcceptor.

        :return: The address of this CardAcceptor.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this CardAcceptor.

        :param address: The address of this CardAcceptor.
        :type: Address
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def name(self):
        """
        Gets the name of this CardAcceptor.
        card acceptor name as it is sent in the original PullFundsTransactions.

        :return: The name of this CardAcceptor.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CardAcceptor.
        card acceptor name as it is sent in the original PullFundsTransactions.

        :param name: The name of this CardAcceptor.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def terminal_id(self):
        """
        Gets the terminal_id of this CardAcceptor.
        The identifier for the terminal at a card acceptor location. If sending transactions from a card not present environment, use the same value for all transactions.

        :return: The terminal_id of this CardAcceptor.
        :rtype: str
        """
        return self._terminal_id

    @terminal_id.setter
    def terminal_id(self, terminal_id):
        """
        Sets the terminal_id of this CardAcceptor.
        The identifier for the terminal at a card acceptor location. If sending transactions from a card not present environment, use the same value for all transactions.

        :param terminal_id: The terminal_id of this CardAcceptor.
        :type: str
        """
        if terminal_id is None:
            raise ValueError("Invalid value for `terminal_id`, must not be `None`")

        self._terminal_id = terminal_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CardAcceptor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------