# coding: utf-8

"""
    Adjustment API

    The AdjustReverseFundsTransactions resource credits (pushes back) funds to the sender&apos;s Visa account by initiating a financial message called an Account Funding Transaction Reversal (AFTR) without the 24 hours limitation in the AFTR.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AdjustreversefundspostPayload(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, local_transaction_date_time=None, business_application_id=None, merchant_category_code=None, sender_card_expiry_date=None, acquirer_country_code=None, transaction_identifier=None, amount=None, card_acceptor=None, acquiring_bin=None, retrieval_reference_number=None, systems_trace_audit_number=None, sender_currency_code=None, sender_primary_account_number=None):
        """
        AdjustreversefundspostPayload - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'local_transaction_date_time': 'str',
            'business_application_id': 'str',
            'merchant_category_code': 'int',
            'sender_card_expiry_date': 'str',
            'acquirer_country_code': 'int',
            'transaction_identifier': 'int',
            'amount': 'float',
            'card_acceptor': 'CardAcceptor',
            'acquiring_bin': 'int',
            'retrieval_reference_number': 'str',
            'systems_trace_audit_number': 'int',
            'sender_currency_code': 'str',
            'sender_primary_account_number': 'str'
        }

        self.attribute_map = {
            'local_transaction_date_time': 'localTransactionDateTime',
            'business_application_id': 'businessApplicationId',
            'merchant_category_code': 'merchantCategoryCode',
            'sender_card_expiry_date': 'senderCardExpiryDate',
            'acquirer_country_code': 'acquirerCountryCode',
            'transaction_identifier': 'transactionIdentifier',
            'amount': 'amount',
            'card_acceptor': 'cardAcceptor',
            'acquiring_bin': 'acquiringBin',
            'retrieval_reference_number': 'retrievalReferenceNumber',
            'systems_trace_audit_number': 'systemsTraceAuditNumber',
            'sender_currency_code': 'senderCurrencyCode',
            'sender_primary_account_number': 'senderPrimaryAccountNumber'
        }

        self._local_transaction_date_time = local_transaction_date_time
        self._business_application_id = business_application_id
        self._merchant_category_code = merchant_category_code
        self._sender_card_expiry_date = sender_card_expiry_date
        self._acquirer_country_code = acquirer_country_code
        self._transaction_identifier = transaction_identifier
        self._amount = amount
        self._card_acceptor = card_acceptor
        self._acquiring_bin = acquiring_bin
        self._retrieval_reference_number = retrieval_reference_number
        self._systems_trace_audit_number = systems_trace_audit_number
        self._sender_currency_code = sender_currency_code
        self._sender_primary_account_number = sender_primary_account_number

    @property
    def local_transaction_date_time(self):
        """
        Gets the local_transaction_date_time of this AdjustreversefundspostPayload.
        

        :return: The local_transaction_date_time of this AdjustreversefundspostPayload.
        :rtype: str
        """
        return self._local_transaction_date_time

    @local_transaction_date_time.setter
    def local_transaction_date_time(self, local_transaction_date_time):
        """
        Sets the local_transaction_date_time of this AdjustreversefundspostPayload.
        

        :param local_transaction_date_time: The local_transaction_date_time of this AdjustreversefundspostPayload.
        :type: str
        """
        if local_transaction_date_time is None:
            raise ValueError("Invalid value for `local_transaction_date_time`, must not be `None`")

        self._local_transaction_date_time = local_transaction_date_time

    @property
    def business_application_id(self):
        """
        Gets the business_application_id of this AdjustreversefundspostPayload.
        Identifies the Visa Direct use case required for processing. This must match the value provided in the request of PullFundsTransactions.

        :return: The business_application_id of this AdjustreversefundspostPayload.
        :rtype: str
        """
        return self._business_application_id

    @business_application_id.setter
    def business_application_id(self, business_application_id):
        """
        Sets the business_application_id of this AdjustreversefundspostPayload.
        Identifies the Visa Direct use case required for processing. This must match the value provided in the request of PullFundsTransactions.

        :param business_application_id: The business_application_id of this AdjustreversefundspostPayload.
        :type: str
        """
        if business_application_id is None:
            raise ValueError("Invalid value for `business_application_id`, must not be `None`")

        self._business_application_id = business_application_id

    @property
    def merchant_category_code(self):
        """
        Gets the merchant_category_code of this AdjustreversefundspostPayload.
        Contains a code describing the merchant's type of business product or service, also known as the merchant category code (MCC). These codes are based on the Merchant Classification Code Guideline available from the Bank Card Division of the ABA. Clients should send the same merchantCategoryCode that was submitted in the PullFundsTransactions

        :return: The merchant_category_code of this AdjustreversefundspostPayload.
        :rtype: int
        """
        return self._merchant_category_code

    @merchant_category_code.setter
    def merchant_category_code(self, merchant_category_code):
        """
        Sets the merchant_category_code of this AdjustreversefundspostPayload.
        Contains a code describing the merchant's type of business product or service, also known as the merchant category code (MCC). These codes are based on the Merchant Classification Code Guideline available from the Bank Card Division of the ABA. Clients should send the same merchantCategoryCode that was submitted in the PullFundsTransactions

        :param merchant_category_code: The merchant_category_code of this AdjustreversefundspostPayload.
        :type: int
        """
        if merchant_category_code is None:
            raise ValueError("Invalid value for `merchant_category_code`, must not be `None`")

        self._merchant_category_code = merchant_category_code

    @property
    def sender_card_expiry_date(self):
        """
        Gets the sender_card_expiry_date of this AdjustreversefundspostPayload.
        The expiration date for the sender's Visa account number in senderPrimaryAccountNumber.

        :return: The sender_card_expiry_date of this AdjustreversefundspostPayload.
        :rtype: str
        """
        return self._sender_card_expiry_date

    @sender_card_expiry_date.setter
    def sender_card_expiry_date(self, sender_card_expiry_date):
        """
        Sets the sender_card_expiry_date of this AdjustreversefundspostPayload.
        The expiration date for the sender's Visa account number in senderPrimaryAccountNumber.

        :param sender_card_expiry_date: The sender_card_expiry_date of this AdjustreversefundspostPayload.
        :type: str
        """

        self._sender_card_expiry_date = sender_card_expiry_date

    @property
    def acquirer_country_code(self):
        """
        Gets the acquirer_country_code of this AdjustreversefundspostPayload.
        Use a 3-digit numeric country code for the country of the BIN under which your Visa Direct program is registered.

        :return: The acquirer_country_code of this AdjustreversefundspostPayload.
        :rtype: int
        """
        return self._acquirer_country_code

    @acquirer_country_code.setter
    def acquirer_country_code(self, acquirer_country_code):
        """
        Sets the acquirer_country_code of this AdjustreversefundspostPayload.
        Use a 3-digit numeric country code for the country of the BIN under which your Visa Direct program is registered.

        :param acquirer_country_code: The acquirer_country_code of this AdjustreversefundspostPayload.
        :type: int
        """
        if acquirer_country_code is None:
            raise ValueError("Invalid value for `acquirer_country_code`, must not be `None`")

        self._acquirer_country_code = acquirer_country_code

    @property
    def transaction_identifier(self):
        """
        Gets the transaction_identifier of this AdjustreversefundspostPayload.
        Clients should send the Visa transaction identifier returned in the response of PullFundsTransactions.

        :return: The transaction_identifier of this AdjustreversefundspostPayload.
        :rtype: int
        """
        return self._transaction_identifier

    @transaction_identifier.setter
    def transaction_identifier(self, transaction_identifier):
        """
        Sets the transaction_identifier of this AdjustreversefundspostPayload.
        Clients should send the Visa transaction identifier returned in the response of PullFundsTransactions.

        :param transaction_identifier: The transaction_identifier of this AdjustreversefundspostPayload.
        :type: int
        """
        if transaction_identifier is None:
            raise ValueError("Invalid value for `transaction_identifier`, must not be `None`")

        self._transaction_identifier = transaction_identifier

    @property
    def amount(self):
        """
        Gets the amount of this AdjustreversefundspostPayload.
        The amount of the transaction, inclusive of all fees assessed for the transaction, including currency conversion fees.

        :return: The amount of this AdjustreversefundspostPayload.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this AdjustreversefundspostPayload.
        The amount of the transaction, inclusive of all fees assessed for the transaction, including currency conversion fees.

        :param amount: The amount of this AdjustreversefundspostPayload.
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def card_acceptor(self):
        """
        Gets the card_acceptor of this AdjustreversefundspostPayload.

        :return: The card_acceptor of this AdjustreversefundspostPayload.
        :rtype: CardAcceptor
        """
        return self._card_acceptor

    @card_acceptor.setter
    def card_acceptor(self, card_acceptor):
        """
        Sets the card_acceptor of this AdjustreversefundspostPayload.

        :param card_acceptor: The card_acceptor of this AdjustreversefundspostPayload.
        :type: CardAcceptor
        """
        if card_acceptor is None:
            raise ValueError("Invalid value for `card_acceptor`, must not be `None`")

        self._card_acceptor = card_acceptor

    @property
    def acquiring_bin(self):
        """
        Gets the acquiring_bin of this AdjustreversefundspostPayload.
        The Bank Identification Number (BIN) under which your Visa Direct is registered. This must match the information provided during enrollment.

        :return: The acquiring_bin of this AdjustreversefundspostPayload.
        :rtype: int
        """
        return self._acquiring_bin

    @acquiring_bin.setter
    def acquiring_bin(self, acquiring_bin):
        """
        Sets the acquiring_bin of this AdjustreversefundspostPayload.
        The Bank Identification Number (BIN) under which your Visa Direct is registered. This must match the information provided during enrollment.

        :param acquiring_bin: The acquiring_bin of this AdjustreversefundspostPayload.
        :type: int
        """
        if acquiring_bin is None:
            raise ValueError("Invalid value for `acquiring_bin`, must not be `None`")

        self._acquiring_bin = acquiring_bin

    @property
    def retrieval_reference_number(self):
        """
        Gets the retrieval_reference_number of this AdjustreversefundspostPayload.
        This field contains a number that is used with other data elements as a key to identify and track all messages related to a given cardholder transaction; that is, to a given transaction set. Recommended format: ydddhhnnnnnn. The first four digits must be a valid yddd date in the Julian date format, where the first digit = 0-9 (last digit of current year) and the next three digits = 001-366 (number of the day in the year), hh can be the two digit hour in a 24 hour clock (00-23) during which the transaction is performed, nnnnnn can be the systemsTraceAuditNumber or any 6 digit number. A unique value should be used for each API invocation.

        :return: The retrieval_reference_number of this AdjustreversefundspostPayload.
        :rtype: str
        """
        return self._retrieval_reference_number

    @retrieval_reference_number.setter
    def retrieval_reference_number(self, retrieval_reference_number):
        """
        Sets the retrieval_reference_number of this AdjustreversefundspostPayload.
        This field contains a number that is used with other data elements as a key to identify and track all messages related to a given cardholder transaction; that is, to a given transaction set. Recommended format: ydddhhnnnnnn. The first four digits must be a valid yddd date in the Julian date format, where the first digit = 0-9 (last digit of current year) and the next three digits = 001-366 (number of the day in the year), hh can be the two digit hour in a 24 hour clock (00-23) during which the transaction is performed, nnnnnn can be the systemsTraceAuditNumber or any 6 digit number. A unique value should be used for each API invocation.

        :param retrieval_reference_number: The retrieval_reference_number of this AdjustreversefundspostPayload.
        :type: str
        """
        if retrieval_reference_number is None:
            raise ValueError("Invalid value for `retrieval_reference_number`, must not be `None`")

        self._retrieval_reference_number = retrieval_reference_number

    @property
    def systems_trace_audit_number(self):
        """
        Gets the systems_trace_audit_number of this AdjustreversefundspostPayload.
        This field contains a number assigned by the merchant, service provider or acquirer that uniquely identifies a cardholder transaction and all message types (also known as system transactions) that comprise it per individual program rules. A unique value should be used for each API invocation.

        :return: The systems_trace_audit_number of this AdjustreversefundspostPayload.
        :rtype: int
        """
        return self._systems_trace_audit_number

    @systems_trace_audit_number.setter
    def systems_trace_audit_number(self, systems_trace_audit_number):
        """
        Sets the systems_trace_audit_number of this AdjustreversefundspostPayload.
        This field contains a number assigned by the merchant, service provider or acquirer that uniquely identifies a cardholder transaction and all message types (also known as system transactions) that comprise it per individual program rules. A unique value should be used for each API invocation.

        :param systems_trace_audit_number: The systems_trace_audit_number of this AdjustreversefundspostPayload.
        :type: int
        """
        if systems_trace_audit_number is None:
            raise ValueError("Invalid value for `systems_trace_audit_number`, must not be `None`")

        self._systems_trace_audit_number = systems_trace_audit_number

    @property
    def sender_currency_code(self):
        """
        Gets the sender_currency_code of this AdjustreversefundspostPayload.
        Use a 3-character alpha or numeric currency code for currency of the sender. This code identifies the currency of the transaction amount sent in the amount field.

        :return: The sender_currency_code of this AdjustreversefundspostPayload.
        :rtype: str
        """
        return self._sender_currency_code

    @sender_currency_code.setter
    def sender_currency_code(self, sender_currency_code):
        """
        Sets the sender_currency_code of this AdjustreversefundspostPayload.
        Use a 3-character alpha or numeric currency code for currency of the sender. This code identifies the currency of the transaction amount sent in the amount field.

        :param sender_currency_code: The sender_currency_code of this AdjustreversefundspostPayload.
        :type: str
        """
        if sender_currency_code is None:
            raise ValueError("Invalid value for `sender_currency_code`, must not be `None`")

        self._sender_currency_code = sender_currency_code

    @property
    def sender_primary_account_number(self):
        """
        Gets the sender_primary_account_number of this AdjustreversefundspostPayload.
        This field contains a number identifying the customer account which could be a PAN or a token.

        :return: The sender_primary_account_number of this AdjustreversefundspostPayload.
        :rtype: str
        """
        return self._sender_primary_account_number

    @sender_primary_account_number.setter
    def sender_primary_account_number(self, sender_primary_account_number):
        """
        Sets the sender_primary_account_number of this AdjustreversefundspostPayload.
        This field contains a number identifying the customer account which could be a PAN or a token.

        :param sender_primary_account_number: The sender_primary_account_number of this AdjustreversefundspostPayload.
        :type: str
        """
        if sender_primary_account_number is None:
            raise ValueError("Invalid value for `sender_primary_account_number`, must not be `None`")

        self._sender_primary_account_number = sender_primary_account_number

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AdjustreversefundspostPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------