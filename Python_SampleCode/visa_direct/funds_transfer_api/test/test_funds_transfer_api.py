# coding: utf-8

"""
    Funds Transfer API

    The Funds Transfer API can pull funds from the sender&apos;s Visa account (in preparation for pushing funds to a recipient&apos;s account) in an Account Funding Transaction (AFT).  Additionally, the Funds Transfer API also provides functionality to push funds to the recipient&apos;s Visa account in an Original Credit Transaction (OCT).  If a transaction is declined, the Funds Transfer API can also return the funds to the sender&apos;s funding source in an Account Funding Transaction Reversal (AFTR). The API has been enhanced to allow originators to send their PushFundsTransactions(OCTs) and PullFundsTransactions(AFTs) to Visa for routing to multiple U.S. debit networks.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import os
import sys
import unittest
import datetime
import pytz
import random
import string
import re
import json

from src.apis.funds_transfer_api import FundsTransferApi
from src.configuration import Configuration
from globalConfig import GlobalConfig


class TestFundsTransferApi(unittest.TestCase):
    """ FundsTransferApi unit test stubs """

    @classmethod
    def setUpClass(self):
        print("---------------------------------------Tests---------------------------------------\nProduct Name: Visa Direct\nApi Name: Funds Transfer API")
        globalConfig = GlobalConfig()
        config = Configuration()
        config.username = globalConfig.userName
        config.password = globalConfig.password
        config.cert_file = globalConfig.certificatePath
        config.key_file = globalConfig.privateKeyPath
        config.shared_secret = globalConfig.sharedSecret
        config.api_key['apikey'] = globalConfig.apiKey
        config.ssl_ca_cert = globalConfig.caCertPath
        config.proxy_url = globalConfig.proxyUrl
        self.api = FundsTransferApi(None)

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def transformPayload(self, payload):
        payload = self.editLocalTime(payload)
        payload = self.addRandom(payload)
        payload = json.loads(payload)
        return payload

    def editLocalTime(self, payload):
        timezone = pytz.timezone("America/Los_Angeles")
        timestamp = timezone.localize(datetime.datetime.now()).strftime('%Y-%m-%dT%H:%M:%S')
        pattern = re.compile('"localTransactionDateTime":".{19}"', re.IGNORECASE)
        replacement = '"localTransactionDateTime": "'+timestamp+'"'
        payload = re.sub(pattern, replacement, payload)

        timestamp = timezone.localize(datetime.datetime.now()).strftime('%m%d%H%M%S')
        pattern = re.compile('"dateTimeLocal":".{10}"', re.IGNORECASE)
        replacement = '"dateTimeLocal": "'+timestamp+'"'
        payload = re.sub(pattern, replacement, payload)
        return payload

    def addRandom(self, payload):
        if payload == 'mle_keyId':
            return self.mleKeyId
        payload = re.sub(r'random_string', ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(8)), payload)
        payload = re.sub(r'random_integer', ''.join(random.choice(string.digits) for _ in range(8)), payload)
        payload= re.sub(r'random', ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(8)), payload)
        return payload

    """
    Test case for getmultipullfundstransactions

    .
    """
    def testgetmultipullfundstransactions(self):
        print("\ngetmultipullfundstransactions")
        result = self.api.getmultipullfundstransactions(self.addRandom('random'))
        pass

    """
    Test case for getmultipushfundstransactions

    .
    """
    def testgetmultipushfundstransactions(self):
        print("\ngetmultipushfundstransactions")
        result = self.api.getmultipushfundstransactions(self.addRandom('random'))
        pass

    """
    Test case for getmultireversefundstransactions

    .
    """
    def testgetmultireversefundstransactions(self):
        print("\ngetmultireversefundstransactions")
        result = self.api.getmultireversefundstransactions(self.addRandom('random'))
        pass

    """
    Test case for getpullfundstransactions

    .
    """
    def testgetpullfundstransactions(self):
        print("\ngetpullfundstransactions")
        result = self.api.getpullfundstransactions(self.addRandom('random'))
        pass

    """
    Test case for getpushfundstransactions

    .
    """
    def testgetpushfundstransactions(self):
        print("\ngetpushfundstransactions")
        result = self.api.getpushfundstransactions(self.addRandom('random'))
        pass

    """
    Test case for getreversefundstransactions

    .
    """
    def testgetreversefundstransactions(self):
        print("\ngetreversefundstransactions")
        result = self.api.getreversefundstransactions(self.addRandom('random'))
        pass

    """
    Test case for postmultipullfunds

    .
    """
    def testpostmultipullfunds(self):
        print("\npostmultipullfunds")
        result = self.api.postmultipullfunds(self.addRandom('random'), self.transformPayload('{"localTransactionDateTime":"2016-11-17T00:24:00","businessApplicationId":"AA","merchantCategoryCode":"6012","acquirerCountryCode":"608","request":[{"localTransactionDateTime":"2016-11-17T00:24:00","senderCardExpiryDate":"2020-12","amount":"100.00","retrievalReferenceNumber":"401010101011","cardAcceptor":{"idCode":"5678","address":{"county":"00","country":"USA","state":"CA","zipCode":"94454"},"terminalId":"1234","name":"Mr Smith"},"systemsTraceAuditNumber":"101011","senderCurrencyCode":"USD","cavv":"0700020718799100000002980179911000000000","senderPrimaryAccountNumber":"4895140000066666"},{"localTransactionDateTime":"2016-11-17T00:24:00","senderCardExpiryDate":"2020-12","amount":"100.00","retrievalReferenceNumber":"401010101011","cardAcceptor":{"idCode":"5678","address":{"county":"00","country":"USA","state":"CA","zipCode":"94454"},"terminalId":"1234","name":"Mr Smith"},"systemsTraceAuditNumber":"101011","senderCurrencyCode":"USD","cavv":"0700020718799100000002980179911000000000","senderPrimaryAccountNumber":"4895140000066666"}],"acquiringBin":"408999"}'))
        pass

    """
    Test case for postmultipushfunds

    .
    """
    def testpostmultipushfunds(self):
        print("\npostmultipushfunds")
        result = self.api.postmultipushfunds(self.addRandom('random'), self.transformPayload('{"localTransactionDateTime":"2016-11-17T18:24:24","businessApplicationId":"AA","merchantCategoryCode":"6012","acquirerCountryCode":"840","request":[{"senderCity":"My City","senderAccountNumber":"4005520000011126","senderStateCode":"CA","feeProgramIndicator":"123","localTransactionDateTime":"2016-11-17T18:24:24","recipientPrimaryAccountNumber":"4957030420210454","transactionCurrencyCode":"USD","transactionIdentifier":"234234234234234","sourceOfFundsCode":"01","senderReference":"","senderAddress":"My Address","retrievalReferenceNumber":"401010101011","systemsTraceAuditNumber":"101011","senderCountryCode":"USA","cardAcceptor":{"idCode":"5678","address":{"county":"00","country":"USA","state":"CA","zipCode":"94454"},"terminalId":"1234","name":"Mr Smith"},"recipientName":"Akhila","amount":"100.00","senderName":"Mr Name"},{"senderCity":"My City","senderAccountNumber":"4840920103511221","senderStateCode":"CA","feeProgramIndicator":"123","localTransactionDateTime":"2016-11-17T18:24:24","recipientPrimaryAccountNumber":"4957030420210454","transactionCurrencyCode":"USD","transactionIdentifier":"234234234234234","sourceOfFundsCode":"01","senderReference":"","senderAddress":"My Address","retrievalReferenceNumber":"401010101012","systemsTraceAuditNumber":"101012","senderCountryCode":"USA","cardAcceptor":{"idCode":"5678","address":{"county":"00","country":"USA","state":"CA","zipCode":"94454"},"terminalId":"1234","name":"Mr Smith"},"recipientName":"Akhila","amount":"100.00","senderName":"Mr Name"}],"acquiringBin":"408999"}'))
        pass

    """
    Test case for postmultireversefunds

    .
    """
    def testpostmultireversefunds(self):
        print("\npostmultireversefunds")
        result = self.api.postmultireversefunds(self.transformPayload('{"localTransactionDateTime":"2016-11-17T19:24:44","acquiringBin":"408999","businessApplicationId":"AA","acquirerCountryCode":"840","request":[{"localTransactionDateTime":"2016-11-17T19:24:44","senderCardExpiryDate":"2020-12","transactionIdentifier":"101010101010","retrievalReferenceNumber":"401010101011","cardAcceptor":{"idCode":"5678","address":{"county":"00","country":"USA","state":"CA","zipCode":"94454"},"terminalId":"1234","name":"Mr Smith"},"originalDataElements":{"acquiringBin":"408999","systemsTraceAuditNumber":"228112","approvalCode":"1ABCDE","transmissionDateTime":"2016-11-17T19:24:44"},"systemsTraceAuditNumber":"101011","senderCurrencyCode":"USD","amount":"100.00","senderPrimaryAccountNumber":"4485810000000131"},{"localTransactionDateTime":"2016-11-17T19:24:44","senderCardExpiryDate":"2020-12","transactionIdentifier":"101010101010","retrievalReferenceNumber":"401010101011","cardAcceptor":{"idCode":"5678","address":{"county":"00","country":"USA","state":"CA","zipCode":"94454"},"terminalId":"1234","name":"Mr Smith"},"originalDataElements":{"acquiringBin":"408999","systemsTraceAuditNumber":"228112","approvalCode":"1ABCDE","transmissionDateTime":"2016-11-17T19:24:44"},"systemsTraceAuditNumber":"101011","senderCurrencyCode":"USD","amount":"100.00","senderPrimaryAccountNumber":"4485810000000131"}]}'))
        pass

    """
    Test case for postpullfunds

    .
    """
    def testpostpullfunds(self):
        print("\npostpullfunds")
        result = self.api.postpullfunds(self.transformPayload('{"localTransactionDateTime":"2016-11-16T23:33:06","businessApplicationId":"AA","cpsAuthorizationCharacteristicsIndicator":"Y","senderCardExpiryDate":"2015-10","amount":"124.02","acquirerCountryCode":"840","retrievalReferenceNumber":"330000550000","cardAcceptor":{"idCode":"ABCD1234ABCD123","address":{"county":"081","country":"USA","state":"CA","zipCode":"94404"},"terminalId":"ABCD1234","name":"Visa Inc. USA-Foster City"},"acquiringBin":"408999","systemsTraceAuditNumber":"451001","nationalReimbursementFee":"11.22","senderCurrencyCode":"USD","cavv":"0700100038238906000013405823891061668252","foreignExchangeFeeTransaction":"11.99","addressVerificationData":{"postalCode":"12345","street":"XYZ St"},"senderPrimaryAccountNumber":"4895142232120006","surcharge":"11.99"}'))
        pass

    """
    Test case for postpushfunds

    .
    """
    def testpostpushfunds(self):
        print("\npostpushfunds")
        result = self.api.postpushfunds(self.transformPayload('{"businessApplicationId":"AA","transactionIdentifier":"381228649430015","cardAcceptor":{"idCode":"CA-IDCode-77765","address":{"county":"San Mateo","country":"USA","state":"CA","zipCode":"94404"},"terminalId":"TID-9999","name":"Visa Inc. USA-Foster City"},"senderAddress":"901 Metro Center Blvd","sourceOfFundsCode":"05","recipientName":"rohan","senderName":"Mohammed Qasim","senderStateCode":"CA","merchantCategoryCode":"6012","acquirerCountryCode":"840","senderReference":"","recipientPrimaryAccountNumber":"4957030420210496","retrievalReferenceNumber":"412770451018","senderAccountNumber":"4653459515756154","transactionCurrencyCode":"USD","acquiringBin":"408999","pointOfServiceData":{"posConditionCode":"00","panEntryMode":"90","motoECIIndicator":"0"},"senderCity":"Foster City","localTransactionDateTime":"2016-11-17T00:39:13","amount":"124.05","systemsTraceAuditNumber":"451018","senderCountryCode":"124"}'))
        pass

    """
    Test case for postreversefunds

    .
    """
    def testpostreversefunds(self):
        print("\npostreversefunds")
        result = self.api.postreversefunds(self.transformPayload('{"localTransactionDateTime":"2016-11-17T19:04:06","businessApplicationId":"AA","senderCardExpiryDate":"2015-10","transactionIdentifier":"381228649430011","acquirerCountryCode":"608","retrievalReferenceNumber":"330000550000","cardAcceptor":{"idCode":"VMT200911026070","address":{"county":"San Mateo","country":"USA","state":"CA","zipCode":"94404"},"terminalId":"365539","name":"Visa Inc. USA-Foster City"},"originalDataElements":{"acquiringBin":"408999","systemsTraceAuditNumber":"897825","approvalCode":"20304B","transmissionDateTime":"2016-11-17T19:04:06"},"acquiringBin":"408999","systemsTraceAuditNumber":"451050","senderCurrencyCode":"USD","pointOfServiceCapability":{"posTerminalType":"4","posTerminalEntryCapability":"2"},"amount":"24.01","pointOfServiceData":{"posConditionCode":"00","panEntryMode":"90","motoECIIndicator":"0"},"senderPrimaryAccountNumber":"4895100000055127"}'))
        pass


if __name__ == '__main__':
    unittest.main()


# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------