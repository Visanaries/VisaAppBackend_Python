# coding: utf-8

"""
    Funds Transfer API

    The Funds Transfer API can pull funds from the sender&apos;s Visa account (in preparation for pushing funds to a recipient&apos;s account) in an Account Funding Transaction (AFT).  Additionally, the Funds Transfer API also provides functionality to push funds to the recipient&apos;s Visa account in an Original Credit Transaction (OCT).  If a transaction is declined, the Funds Transfer API can also return the funds to the sender&apos;s funding source in an Account Funding Transaction Reversal (AFTR). The API has been enhanced to allow originators to send their PushFundsTransactions(OCTs) and PullFundsTransactions(AFTs) to Visa for routing to multiple U.S. debit networks.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re
import json

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class FundsTransferApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()

        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def getmultipullfundstransactions(self, status_identifier, **kwargs):
        """
        Read Multi Pull Funds Transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getmultipullfundstransactions(status_identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str status_identifier: Status Identifier (required)
        :return: MultipullfundstransactionsgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.getmultipullfundstransactions_with_http_info(status_identifier, **kwargs)
        else:
            (data) = self.getmultipullfundstransactions_with_http_info(status_identifier, **kwargs)
            return data

    def getmultipullfundstransactions_with_http_info(self, status_identifier, **kwargs):
        """
        Read Multi Pull Funds Transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getmultipullfundstransactions_with_http_info(status_identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str status_identifier: Status Identifier (required)
        :return: MultipullfundstransactionsgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status_identifier']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getmultipullfundstransactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'status_identifier' is set
        if ('status_identifier' not in params) or (params['status_identifier'] is None):
            raise ValueError("Missing the required parameter `status_identifier` when calling `getmultipullfundstransactions`")


        collection_formats = {}

        path = '/visadirect/fundstransfer/v1/multipullfundstransactions/{statusIdentifier}'.replace('{format}', 'json')
        resource_path = 'multipullfundstransactions/{statusIdentifier}'
        path_params = {}
        if 'status_identifier' in params:
            path_params['statusIdentifier'] = params['status_identifier']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MultipullfundstransactionsgetResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def getmultipushfundstransactions(self, status_identifier, **kwargs):
        """
        Read Multi Push Funds Transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getmultipushfundstransactions(status_identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str status_identifier: Status Identifier (required)
        :return: MultipushfundstransactionsgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.getmultipushfundstransactions_with_http_info(status_identifier, **kwargs)
        else:
            (data) = self.getmultipushfundstransactions_with_http_info(status_identifier, **kwargs)
            return data

    def getmultipushfundstransactions_with_http_info(self, status_identifier, **kwargs):
        """
        Read Multi Push Funds Transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getmultipushfundstransactions_with_http_info(status_identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str status_identifier: Status Identifier (required)
        :return: MultipushfundstransactionsgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status_identifier']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getmultipushfundstransactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'status_identifier' is set
        if ('status_identifier' not in params) or (params['status_identifier'] is None):
            raise ValueError("Missing the required parameter `status_identifier` when calling `getmultipushfundstransactions`")


        collection_formats = {}

        path = '/visadirect/fundstransfer/v1/multipushfundstransactions/{statusIdentifier}'.replace('{format}', 'json')
        resource_path = 'multipushfundstransactions/{statusIdentifier}'
        path_params = {}
        if 'status_identifier' in params:
            path_params['statusIdentifier'] = params['status_identifier']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MultipushfundstransactionsgetResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def getmultireversefundstransactions(self, status_identifier, **kwargs):
        """
        Read Multi Reverse Funds Transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getmultireversefundstransactions(status_identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str status_identifier: Status Identifier (required)
        :return: MultireversefundstransactionsgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.getmultireversefundstransactions_with_http_info(status_identifier, **kwargs)
        else:
            (data) = self.getmultireversefundstransactions_with_http_info(status_identifier, **kwargs)
            return data

    def getmultireversefundstransactions_with_http_info(self, status_identifier, **kwargs):
        """
        Read Multi Reverse Funds Transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getmultireversefundstransactions_with_http_info(status_identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str status_identifier: Status Identifier (required)
        :return: MultireversefundstransactionsgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status_identifier']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getmultireversefundstransactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'status_identifier' is set
        if ('status_identifier' not in params) or (params['status_identifier'] is None):
            raise ValueError("Missing the required parameter `status_identifier` when calling `getmultireversefundstransactions`")


        collection_formats = {}

        path = '/visadirect/fundstransfer/v1/multireversefundstransactions/{statusIdentifier}'.replace('{format}', 'json')
        resource_path = 'multireversefundstransactions/{statusIdentifier}'
        path_params = {}
        if 'status_identifier' in params:
            path_params['statusIdentifier'] = params['status_identifier']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MultireversefundstransactionsgetResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def getpullfundstransactions(self, status_identifier, **kwargs):
        """
        Read Pull Funds Transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getpullfundstransactions(status_identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str status_identifier: Status Identifier (required)
        :return: PullfundstransactionsgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.getpullfundstransactions_with_http_info(status_identifier, **kwargs)
        else:
            (data) = self.getpullfundstransactions_with_http_info(status_identifier, **kwargs)
            return data

    def getpullfundstransactions_with_http_info(self, status_identifier, **kwargs):
        """
        Read Pull Funds Transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getpullfundstransactions_with_http_info(status_identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str status_identifier: Status Identifier (required)
        :return: PullfundstransactionsgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status_identifier']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getpullfundstransactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'status_identifier' is set
        if ('status_identifier' not in params) or (params['status_identifier'] is None):
            raise ValueError("Missing the required parameter `status_identifier` when calling `getpullfundstransactions`")


        collection_formats = {}

        path = '/visadirect/fundstransfer/v1/pullfundstransactions/{statusIdentifier}'.replace('{format}', 'json')
        resource_path = 'pullfundstransactions/{statusIdentifier}'
        path_params = {}
        if 'status_identifier' in params:
            path_params['statusIdentifier'] = params['status_identifier']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PullfundstransactionsgetResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def getpushfundstransactions(self, status_identifier, **kwargs):
        """
        Read Push Funds Transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getpushfundstransactions(status_identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str status_identifier: Status Identifier (required)
        :return: PushfundstransactionsgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.getpushfundstransactions_with_http_info(status_identifier, **kwargs)
        else:
            (data) = self.getpushfundstransactions_with_http_info(status_identifier, **kwargs)
            return data

    def getpushfundstransactions_with_http_info(self, status_identifier, **kwargs):
        """
        Read Push Funds Transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getpushfundstransactions_with_http_info(status_identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str status_identifier: Status Identifier (required)
        :return: PushfundstransactionsgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status_identifier']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getpushfundstransactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'status_identifier' is set
        if ('status_identifier' not in params) or (params['status_identifier'] is None):
            raise ValueError("Missing the required parameter `status_identifier` when calling `getpushfundstransactions`")


        collection_formats = {}

        path = '/visadirect/fundstransfer/v1/pushfundstransactions/{statusIdentifier}'.replace('{format}', 'json')
        resource_path = 'pushfundstransactions/{statusIdentifier}'
        path_params = {}
        if 'status_identifier' in params:
            path_params['statusIdentifier'] = params['status_identifier']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PushfundstransactionsgetResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def getreversefundstransactions(self, status_identifier, **kwargs):
        """
        Read Reverse Funds Transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getreversefundstransactions(status_identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str status_identifier: Status Identifier (required)
        :return: ReversefundstransactionsgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.getreversefundstransactions_with_http_info(status_identifier, **kwargs)
        else:
            (data) = self.getreversefundstransactions_with_http_info(status_identifier, **kwargs)
            return data

    def getreversefundstransactions_with_http_info(self, status_identifier, **kwargs):
        """
        Read Reverse Funds Transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getreversefundstransactions_with_http_info(status_identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str status_identifier: Status Identifier (required)
        :return: ReversefundstransactionsgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status_identifier']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getreversefundstransactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'status_identifier' is set
        if ('status_identifier' not in params) or (params['status_identifier'] is None):
            raise ValueError("Missing the required parameter `status_identifier` when calling `getreversefundstransactions`")


        collection_formats = {}

        path = '/visadirect/fundstransfer/v1/reversefundstransactions/{statusIdentifier}'.replace('{format}', 'json')
        resource_path = 'reversefundstransactions/{statusIdentifier}'
        path_params = {}
        if 'status_identifier' in params:
            path_params['statusIdentifier'] = params['status_identifier']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ReversefundstransactionsgetResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def postmultipullfunds(self, x_client_transaction_id, multipullfundspost_payload, **kwargs):
        """
        Create Multi Pull Funds Transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postmultipullfunds(x_client_transaction_id, multipullfundspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_client_transaction_id: A unique value for a transaction (unique at the level of the individual service invoker and can be recycled every 24 hours). This identifies the transaction uniquely and can help reference the results of the original transaction. (required)
        :param MultipullfundspostPayload multipullfundspost_payload: Request body for creating in multi pull funds transfer (required)
        :return: MultipullfundspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.postmultipullfunds_with_http_info(x_client_transaction_id, multipullfundspost_payload, **kwargs)
        else:
            (data) = self.postmultipullfunds_with_http_info(x_client_transaction_id, multipullfundspost_payload, **kwargs)
            return data

    def postmultipullfunds_with_http_info(self, x_client_transaction_id, multipullfundspost_payload, **kwargs):
        """
        Create Multi Pull Funds Transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postmultipullfunds_with_http_info(x_client_transaction_id, multipullfundspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_client_transaction_id: A unique value for a transaction (unique at the level of the individual service invoker and can be recycled every 24 hours). This identifies the transaction uniquely and can help reference the results of the original transaction. (required)
        :param MultipullfundspostPayload multipullfundspost_payload: Request body for creating in multi pull funds transfer (required)
        :return: MultipullfundspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_client_transaction_id', 'multipullfundspost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postmultipullfunds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_client_transaction_id' is set
        if ('x_client_transaction_id' not in params) or (params['x_client_transaction_id'] is None):
            raise ValueError("Missing the required parameter `x_client_transaction_id` when calling `postmultipullfunds`")
        # verify the required parameter 'multipullfundspost_payload' is set
        if ('multipullfundspost_payload' not in params) or (params['multipullfundspost_payload'] is None):
            raise ValueError("Missing the required parameter `multipullfundspost_payload` when calling `postmultipullfunds`")


        collection_formats = {}

        path = '/visadirect/fundstransfer/v1/multipullfundstransactions'.replace('{format}', 'json')
        resource_path = 'multipullfundstransactions'
        path_params = {}

        query_params = {}

        header_params = {}
        if 'x_client_transaction_id' in params:
            header_params['X-Client-Transaction-Id'] = params['x_client_transaction_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'multipullfundspost_payload' in params:
            body_params = params['multipullfundspost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MultipullfundspostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def postmultipushfunds(self, x_client_transaction_id, multipushfundspost_payload, **kwargs):
        """
        Create Multi Push Funds Transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postmultipushfunds(x_client_transaction_id, multipushfundspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_client_transaction_id: A unique value for a transaction (unique at the level of the individual service invoker and can be recycled every 24 hours). This identifies the transaction uniquely and can help reference the results of the original transaction. (required)
        :param MultipushfundspostPayload multipushfundspost_payload: Request body for creating in multi push funds transfer (required)
        :return: MultipushfundspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.postmultipushfunds_with_http_info(x_client_transaction_id, multipushfundspost_payload, **kwargs)
        else:
            (data) = self.postmultipushfunds_with_http_info(x_client_transaction_id, multipushfundspost_payload, **kwargs)
            return data

    def postmultipushfunds_with_http_info(self, x_client_transaction_id, multipushfundspost_payload, **kwargs):
        """
        Create Multi Push Funds Transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postmultipushfunds_with_http_info(x_client_transaction_id, multipushfundspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str x_client_transaction_id: A unique value for a transaction (unique at the level of the individual service invoker and can be recycled every 24 hours). This identifies the transaction uniquely and can help reference the results of the original transaction. (required)
        :param MultipushfundspostPayload multipushfundspost_payload: Request body for creating in multi push funds transfer (required)
        :return: MultipushfundspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_client_transaction_id', 'multipushfundspost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postmultipushfunds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_client_transaction_id' is set
        if ('x_client_transaction_id' not in params) or (params['x_client_transaction_id'] is None):
            raise ValueError("Missing the required parameter `x_client_transaction_id` when calling `postmultipushfunds`")
        # verify the required parameter 'multipushfundspost_payload' is set
        if ('multipushfundspost_payload' not in params) or (params['multipushfundspost_payload'] is None):
            raise ValueError("Missing the required parameter `multipushfundspost_payload` when calling `postmultipushfunds`")


        collection_formats = {}

        path = '/visadirect/fundstransfer/v1/multipushfundstransactions'.replace('{format}', 'json')
        resource_path = 'multipushfundstransactions'
        path_params = {}

        query_params = {}

        header_params = {}
        if 'x_client_transaction_id' in params:
            header_params['X-Client-Transaction-Id'] = params['x_client_transaction_id']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'multipushfundspost_payload' in params:
            body_params = params['multipushfundspost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MultipushfundspostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def postmultireversefunds(self, multireversefundspost_payload, **kwargs):
        """
        Create Multi Reverse Funds Transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postmultireversefunds(multireversefundspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MultireversefundspostPayload multireversefundspost_payload: Request body for creating in multi reverse funds transfer (required)
        :return: MultireversefundspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.postmultireversefunds_with_http_info(multireversefundspost_payload, **kwargs)
        else:
            (data) = self.postmultireversefunds_with_http_info(multireversefundspost_payload, **kwargs)
            return data

    def postmultireversefunds_with_http_info(self, multireversefundspost_payload, **kwargs):
        """
        Create Multi Reverse Funds Transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postmultireversefunds_with_http_info(multireversefundspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MultireversefundspostPayload multireversefundspost_payload: Request body for creating in multi reverse funds transfer (required)
        :return: MultireversefundspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['multireversefundspost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postmultireversefunds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'multireversefundspost_payload' is set
        if ('multireversefundspost_payload' not in params) or (params['multireversefundspost_payload'] is None):
            raise ValueError("Missing the required parameter `multireversefundspost_payload` when calling `postmultireversefunds`")


        collection_formats = {}

        path = '/visadirect/fundstransfer/v1/multireversefundstransactions'.replace('{format}', 'json')
        resource_path = 'multireversefundstransactions'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'multireversefundspost_payload' in params:
            body_params = params['multireversefundspost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MultireversefundspostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def postpullfunds(self, pullfundspost_payload, **kwargs):
        """
        Create Pull Funds Transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postpullfunds(pullfundspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PullfundspostPayload pullfundspost_payload: Request body for creating in pull funds transfer (required)
        :return: PullfundspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.postpullfunds_with_http_info(pullfundspost_payload, **kwargs)
        else:
            (data) = self.postpullfunds_with_http_info(pullfundspost_payload, **kwargs)
            return data

    def postpullfunds_with_http_info(self, pullfundspost_payload, **kwargs):
        """
        Create Pull Funds Transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postpullfunds_with_http_info(pullfundspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PullfundspostPayload pullfundspost_payload: Request body for creating in pull funds transfer (required)
        :return: PullfundspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pullfundspost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postpullfunds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pullfundspost_payload' is set
        if ('pullfundspost_payload' not in params) or (params['pullfundspost_payload'] is None):
            raise ValueError("Missing the required parameter `pullfundspost_payload` when calling `postpullfunds`")


        collection_formats = {}

        path = '/visadirect/fundstransfer/v1/pullfundstransactions'.replace('{format}', 'json')
        resource_path = 'pullfundstransactions'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pullfundspost_payload' in params:
            body_params = params['pullfundspost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PullfundspostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def postpushfunds(self, pushfundspost_payload, **kwargs):
        """
        Create Push Funds Transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postpushfunds(pushfundspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PushfundspostPayload pushfundspost_payload: Request body for creating in push funds transfer (required)
        :return: PushfundspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.postpushfunds_with_http_info(pushfundspost_payload, **kwargs)
        else:
            (data) = self.postpushfunds_with_http_info(pushfundspost_payload, **kwargs)
            return data

    def postpushfunds_with_http_info(self, pushfundspost_payload, **kwargs):
        """
        Create Push Funds Transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postpushfunds_with_http_info(pushfundspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PushfundspostPayload pushfundspost_payload: Request body for creating in push funds transfer (required)
        :return: PushfundspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pushfundspost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postpushfunds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pushfundspost_payload' is set
        if ('pushfundspost_payload' not in params) or (params['pushfundspost_payload'] is None):
            raise ValueError("Missing the required parameter `pushfundspost_payload` when calling `postpushfunds`")


        collection_formats = {}

        path = '/visadirect/fundstransfer/v1/pushfundstransactions'.replace('{format}', 'json')
        resource_path = 'pushfundstransactions'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pushfundspost_payload' in params:
            body_params = params['pushfundspost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PushfundspostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def postreversefunds(self, reversefundspost_payload, **kwargs):
        """
        Create Reverse Funds Transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postreversefunds(reversefundspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ReversefundspostPayload reversefundspost_payload: Request body for creating in reverse funds transfer (required)
        :return: ReversefundspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.postreversefunds_with_http_info(reversefundspost_payload, **kwargs)
        else:
            (data) = self.postreversefunds_with_http_info(reversefundspost_payload, **kwargs)
            return data

    def postreversefunds_with_http_info(self, reversefundspost_payload, **kwargs):
        """
        Create Reverse Funds Transaction
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.postreversefunds_with_http_info(reversefundspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ReversefundspostPayload reversefundspost_payload: Request body for creating in reverse funds transfer (required)
        :return: ReversefundspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reversefundspost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postreversefunds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reversefundspost_payload' is set
        if ('reversefundspost_payload' not in params) or (params['reversefundspost_payload'] is None):
            raise ValueError("Missing the required parameter `reversefundspost_payload` when calling `postreversefunds`")


        collection_formats = {}

        path = '/visadirect/fundstransfer/v1/reversefundstransactions'.replace('{format}', 'json')
        resource_path = 'reversefundstransactions'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'reversefundspost_payload' in params:
            body_params = params['reversefundspost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ReversefundspostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------