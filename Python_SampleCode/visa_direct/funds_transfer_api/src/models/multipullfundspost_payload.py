# coding: utf-8

"""
    Funds Transfer API

    The Funds Transfer API can pull funds from the sender&apos;s Visa account (in preparation for pushing funds to a recipient&apos;s account) in an Account Funding Transaction (AFT).  Additionally, the Funds Transfer API also provides functionality to push funds to the recipient&apos;s Visa account in an Original Credit Transaction (OCT).  If a transaction is declined, the Funds Transfer API can also return the funds to the sender&apos;s funding source in an Account Funding Transaction Reversal (AFTR). The API has been enhanced to allow originators to send their PushFundsTransactions(OCTs) and PullFundsTransactions(AFTs) to Visa for routing to multiple U.S. debit networks.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MultipullfundspostPayload(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, business_application_id=None, source_of_funds=None, retrieval_reference_number=None, card_acceptor=None, sender_address=None, sender_middle_initial=None, recipient_state=None, surcharge=None, sender_state_code=None, merchant_category_code=None, sender_last_name=None, merchant_verification_value=None, sharing_group_code=None, acquirer_country_code=None, amount=None, member_comments=None, recipient_last_name=None, national_reimbursement_fee=None, card_cvv2_value=None, cavv=None, sender_postal_code=None, pin_data=None, sender_first_name=None, sender_city=None, fee_program_indicator=None, address_verification_data=None, sender_account_number=None, magnetic_stripe_data=None, acquiring_bin=None, cps_authorization_characteristics_indicator=None, merchant_pseudo_aba_number=None, foreign_exchange_fee_transaction=None, point_of_service_data=None, sender_primary_account_number=None, local_transaction_date_time=None, recipient_first_name=None, sender_card_expiry_date=None, recipient_middle_initial=None, recipient_country_code=None, systems_trace_audit_number=None, sender_country_code=None, sender_currency_code=None, point_of_service_capability=None):
        """
        MultipullfundspostPayload - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'business_application_id': 'str',
            'source_of_funds': 'str',
            'retrieval_reference_number': 'str',
            'card_acceptor': 'CardAcceptor',
            'sender_address': 'str',
            'sender_middle_initial': 'str',
            'recipient_state': 'str',
            'surcharge': 'str',
            'sender_state_code': 'str',
            'merchant_category_code': 'int',
            'sender_last_name': 'str',
            'merchant_verification_value': 'MerchantVerificationValue',
            'sharing_group_code': 'str',
            'acquirer_country_code': 'int',
            'amount': 'float',
            'member_comments': 'str',
            'recipient_last_name': 'str',
            'national_reimbursement_fee': 'float',
            'card_cvv2_value': 'str',
            'cavv': 'str',
            'sender_postal_code': 'str',
            'pin_data': 'PinData',
            'sender_first_name': 'str',
            'sender_city': 'str',
            'fee_program_indicator': 'str',
            'address_verification_data': 'AddressVerificationData',
            'sender_account_number': 'str',
            'magnetic_stripe_data': 'MagneticStripeData',
            'acquiring_bin': 'int',
            'cps_authorization_characteristics_indicator': 'str',
            'merchant_pseudo_aba_number': 'str',
            'foreign_exchange_fee_transaction': 'float',
            'point_of_service_data': 'PointOfServiceData',
            'sender_primary_account_number': 'str',
            'local_transaction_date_time': 'str',
            'recipient_first_name': 'str',
            'sender_card_expiry_date': 'str',
            'recipient_middle_initial': 'str',
            'recipient_country_code': 'str',
            'systems_trace_audit_number': 'int',
            'sender_country_code': 'str',
            'sender_currency_code': 'str',
            'point_of_service_capability': 'PointOfServiceCapability'
        }

        self.attribute_map = {
            'business_application_id': 'businessApplicationId',
            'source_of_funds': 'sourceOfFunds',
            'retrieval_reference_number': 'retrievalReferenceNumber',
            'card_acceptor': 'cardAcceptor',
            'sender_address': 'senderAddress',
            'sender_middle_initial': 'senderMiddleInitial',
            'recipient_state': 'recipientState',
            'surcharge': 'surcharge',
            'sender_state_code': 'senderStateCode',
            'merchant_category_code': 'merchantCategoryCode',
            'sender_last_name': 'senderLastName',
            'merchant_verification_value': 'merchantVerificationValue',
            'sharing_group_code': 'sharingGroupCode',
            'acquirer_country_code': 'acquirerCountryCode',
            'amount': 'amount',
            'member_comments': 'memberComments',
            'recipient_last_name': 'recipientLastName',
            'national_reimbursement_fee': 'nationalReimbursementFee',
            'card_cvv2_value': 'cardCvv2Value',
            'cavv': 'cavv',
            'sender_postal_code': 'senderPostalCode',
            'pin_data': 'pinData',
            'sender_first_name': 'senderFirstName',
            'sender_city': 'senderCity',
            'fee_program_indicator': 'feeProgramIndicator',
            'address_verification_data': 'addressVerificationData',
            'sender_account_number': 'senderAccountNumber',
            'magnetic_stripe_data': 'magneticStripeData',
            'acquiring_bin': 'acquiringBin',
            'cps_authorization_characteristics_indicator': 'cpsAuthorizationCharacteristicsIndicator',
            'merchant_pseudo_aba_number': 'merchantPseudoAbaNumber',
            'foreign_exchange_fee_transaction': 'foreignExchangeFeeTransaction',
            'point_of_service_data': 'pointOfServiceData',
            'sender_primary_account_number': 'senderPrimaryAccountNumber',
            'local_transaction_date_time': 'localTransactionDateTime',
            'recipient_first_name': 'recipientFirstName',
            'sender_card_expiry_date': 'senderCardExpiryDate',
            'recipient_middle_initial': 'recipientMiddleInitial',
            'recipient_country_code': 'recipientCountryCode',
            'systems_trace_audit_number': 'systemsTraceAuditNumber',
            'sender_country_code': 'senderCountryCode',
            'sender_currency_code': 'senderCurrencyCode',
            'point_of_service_capability': 'pointOfServiceCapability'
        }

        self._business_application_id = business_application_id
        self._source_of_funds = source_of_funds
        self._retrieval_reference_number = retrieval_reference_number
        self._card_acceptor = card_acceptor
        self._sender_address = sender_address
        self._sender_middle_initial = sender_middle_initial
        self._recipient_state = recipient_state
        self._surcharge = surcharge
        self._sender_state_code = sender_state_code
        self._merchant_category_code = merchant_category_code
        self._sender_last_name = sender_last_name
        self._merchant_verification_value = merchant_verification_value
        self._sharing_group_code = sharing_group_code
        self._acquirer_country_code = acquirer_country_code
        self._amount = amount
        self._member_comments = member_comments
        self._recipient_last_name = recipient_last_name
        self._national_reimbursement_fee = national_reimbursement_fee
        self._card_cvv2_value = card_cvv2_value
        self._cavv = cavv
        self._sender_postal_code = sender_postal_code
        self._pin_data = pin_data
        self._sender_first_name = sender_first_name
        self._sender_city = sender_city
        self._fee_program_indicator = fee_program_indicator
        self._address_verification_data = address_verification_data
        self._sender_account_number = sender_account_number
        self._magnetic_stripe_data = magnetic_stripe_data
        self._acquiring_bin = acquiring_bin
        self._cps_authorization_characteristics_indicator = cps_authorization_characteristics_indicator
        self._merchant_pseudo_aba_number = merchant_pseudo_aba_number
        self._foreign_exchange_fee_transaction = foreign_exchange_fee_transaction
        self._point_of_service_data = point_of_service_data
        self._sender_primary_account_number = sender_primary_account_number
        self._local_transaction_date_time = local_transaction_date_time
        self._recipient_first_name = recipient_first_name
        self._sender_card_expiry_date = sender_card_expiry_date
        self._recipient_middle_initial = recipient_middle_initial
        self._recipient_country_code = recipient_country_code
        self._systems_trace_audit_number = systems_trace_audit_number
        self._sender_country_code = sender_country_code
        self._sender_currency_code = sender_currency_code
        self._point_of_service_capability = point_of_service_capability

    @property
    def business_application_id(self):
        """
        Gets the business_application_id of this MultipullfundspostPayload.
        Identifies the programs' business application type for VisaNet transaction processing<br><br>For Money Transfer, AA applies to transactions where the sender and recipient are the same person and PP applies to transactions where the sender and recipient are not the same person.<br><br>Refer to <a href=\"/request_response_codes#business_application_identifier\">businessApplicationId</a> codes

        :return: The business_application_id of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._business_application_id

    @business_application_id.setter
    def business_application_id(self, business_application_id):
        """
        Sets the business_application_id of this MultipullfundspostPayload.
        Identifies the programs' business application type for VisaNet transaction processing<br><br>For Money Transfer, AA applies to transactions where the sender and recipient are the same person and PP applies to transactions where the sender and recipient are not the same person.<br><br>Refer to <a href=\"/request_response_codes#business_application_identifier\">businessApplicationId</a> codes

        :param business_application_id: The business_application_id of this MultipullfundspostPayload.
        :type: str
        """
        if business_application_id is None:
            raise ValueError("Invalid value for `business_application_id`, must not be `None`")

        self._business_application_id = business_application_id

    @property
    def source_of_funds(self):
        """
        Gets the source_of_funds of this MultipullfundspostPayload.
        when present, this field contain a valid <a href=\"/request_response_codes#sourceOfFundsCode\">sourceOfFundsCode</a> code that matches the funding instrument. <br><br>Refer to <a href=\"/request_response_codes#sourceOfFundsCode\">sourceOfFundsCode</a> codes

        :return: The source_of_funds of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._source_of_funds

    @source_of_funds.setter
    def source_of_funds(self, source_of_funds):
        """
        Sets the source_of_funds of this MultipullfundspostPayload.
        when present, this field contain a valid <a href=\"/request_response_codes#sourceOfFundsCode\">sourceOfFundsCode</a> code that matches the funding instrument. <br><br>Refer to <a href=\"/request_response_codes#sourceOfFundsCode\">sourceOfFundsCode</a> codes

        :param source_of_funds: The source_of_funds of this MultipullfundspostPayload.
        :type: str
        """

        self._source_of_funds = source_of_funds

    @property
    def retrieval_reference_number(self):
        """
        Gets the retrieval_reference_number of this MultipullfundspostPayload.
        A value used to tie together service calls related to a single financial transaction. When passing Account Funding Transaction (AFT) and Original Credit Transaction (OCT) methods, this value must differ between the two methods. When passing the Account Funding Transaction Reversal (AFTR) method, this value must match the  retrievalReferenceNumber previously passed with the AFT method for this transaction.<br><br>Recommended Format: ydddhhnnnnnn<br><br>The first fours digits must be a valid yddd date in the Julian date format, where the first digit = 0-9 (last digit of current year) and the next three digits = 001-366 (number of the day in the year).<br><br>hh can be the two digit hour in a 24 hour clock (00-23) during which the transaction is performed.<br><br>nnnnnn can be the systemsTraceAuditNumber or any 6 digit number.

        :return: The retrieval_reference_number of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._retrieval_reference_number

    @retrieval_reference_number.setter
    def retrieval_reference_number(self, retrieval_reference_number):
        """
        Sets the retrieval_reference_number of this MultipullfundspostPayload.
        A value used to tie together service calls related to a single financial transaction. When passing Account Funding Transaction (AFT) and Original Credit Transaction (OCT) methods, this value must differ between the two methods. When passing the Account Funding Transaction Reversal (AFTR) method, this value must match the  retrievalReferenceNumber previously passed with the AFT method for this transaction.<br><br>Recommended Format: ydddhhnnnnnn<br><br>The first fours digits must be a valid yddd date in the Julian date format, where the first digit = 0-9 (last digit of current year) and the next three digits = 001-366 (number of the day in the year).<br><br>hh can be the two digit hour in a 24 hour clock (00-23) during which the transaction is performed.<br><br>nnnnnn can be the systemsTraceAuditNumber or any 6 digit number.

        :param retrieval_reference_number: The retrieval_reference_number of this MultipullfundspostPayload.
        :type: str
        """
        if retrieval_reference_number is None:
            raise ValueError("Invalid value for `retrieval_reference_number`, must not be `None`")

        self._retrieval_reference_number = retrieval_reference_number

    @property
    def card_acceptor(self):
        """
        Gets the card_acceptor of this MultipullfundspostPayload.

        :return: The card_acceptor of this MultipullfundspostPayload.
        :rtype: CardAcceptor
        """
        return self._card_acceptor

    @card_acceptor.setter
    def card_acceptor(self, card_acceptor):
        """
        Sets the card_acceptor of this MultipullfundspostPayload.

        :param card_acceptor: The card_acceptor of this MultipullfundspostPayload.
        :type: CardAcceptor
        """
        if card_acceptor is None:
            raise ValueError("Invalid value for `card_acceptor`, must not be `None`")

        self._card_acceptor = card_acceptor

    @property
    def sender_address(self):
        """
        Gets the sender_address of this MultipullfundspostPayload.
        When present, this field contains sender's Address

        :return: The sender_address of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._sender_address

    @sender_address.setter
    def sender_address(self, sender_address):
        """
        Sets the sender_address of this MultipullfundspostPayload.
        When present, this field contains sender's Address

        :param sender_address: The sender_address of this MultipullfundspostPayload.
        :type: str
        """

        self._sender_address = sender_address

    @property
    def sender_middle_initial(self):
        """
        Gets the sender_middle_initial of this MultipullfundspostPayload.
        This field contains sender's middle initial

        :return: The sender_middle_initial of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._sender_middle_initial

    @sender_middle_initial.setter
    def sender_middle_initial(self, sender_middle_initial):
        """
        Sets the sender_middle_initial of this MultipullfundspostPayload.
        This field contains sender's middle initial

        :param sender_middle_initial: The sender_middle_initial of this MultipullfundspostPayload.
        :type: str
        """

        self._sender_middle_initial = sender_middle_initial

    @property
    def recipient_state(self):
        """
        Gets the recipient_state of this MultipullfundspostPayload.
        Required if RecipientCountryCode is either 124(CAN) or 840(USA)

        :return: The recipient_state of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._recipient_state

    @recipient_state.setter
    def recipient_state(self, recipient_state):
        """
        Sets the recipient_state of this MultipullfundspostPayload.
        Required if RecipientCountryCode is either 124(CAN) or 840(USA)

        :param recipient_state: The recipient_state of this MultipullfundspostPayload.
        :type: str
        """

        self._recipient_state = recipient_state

    @property
    def surcharge(self):
        """
        Gets the surcharge of this MultipullfundspostPayload.
        When present, this field contains the sender's surcharge as assessed by the originator. Values in this field must be in the same currency and format as defined in the amount field.

        :return: The surcharge of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._surcharge

    @surcharge.setter
    def surcharge(self, surcharge):
        """
        Sets the surcharge of this MultipullfundspostPayload.
        When present, this field contains the sender's surcharge as assessed by the originator. Values in this field must be in the same currency and format as defined in the amount field.

        :param surcharge: The surcharge of this MultipullfundspostPayload.
        :type: str
        """

        self._surcharge = surcharge

    @property
    def sender_state_code(self):
        """
        Gets the sender_state_code of this MultipullfundspostPayload.
        When present, this field contains sender's state code

        :return: The sender_state_code of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._sender_state_code

    @sender_state_code.setter
    def sender_state_code(self, sender_state_code):
        """
        Sets the sender_state_code of this MultipullfundspostPayload.
        When present, this field contains sender's state code

        :param sender_state_code: The sender_state_code of this MultipullfundspostPayload.
        :type: str
        """

        self._sender_state_code = sender_state_code

    @property
    def merchant_category_code(self):
        """
        Gets the merchant_category_code of this MultipullfundspostPayload.
        <b>Note:</b> If provided, then the value overrides the one present in onboarding data. If the merchantCategoryCode value is not populated in onboarding data then this field is mandatory.<br><br>If not provided, then the value will default to the values provided during onboarding (when the services are provisioned).

        :return: The merchant_category_code of this MultipullfundspostPayload.
        :rtype: int
        """
        return self._merchant_category_code

    @merchant_category_code.setter
    def merchant_category_code(self, merchant_category_code):
        """
        Sets the merchant_category_code of this MultipullfundspostPayload.
        <b>Note:</b> If provided, then the value overrides the one present in onboarding data. If the merchantCategoryCode value is not populated in onboarding data then this field is mandatory.<br><br>If not provided, then the value will default to the values provided during onboarding (when the services are provisioned).

        :param merchant_category_code: The merchant_category_code of this MultipullfundspostPayload.
        :type: int
        """

        self._merchant_category_code = merchant_category_code

    @property
    def sender_last_name(self):
        """
        Gets the sender_last_name of this MultipullfundspostPayload.
        This field contains sender's last name

        :return: The sender_last_name of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._sender_last_name

    @sender_last_name.setter
    def sender_last_name(self, sender_last_name):
        """
        Sets the sender_last_name of this MultipullfundspostPayload.
        This field contains sender's last name

        :param sender_last_name: The sender_last_name of this MultipullfundspostPayload.
        :type: str
        """

        self._sender_last_name = sender_last_name

    @property
    def merchant_verification_value(self):
        """
        Gets the merchant_verification_value of this MultipullfundspostPayload.

        :return: The merchant_verification_value of this MultipullfundspostPayload.
        :rtype: MerchantVerificationValue
        """
        return self._merchant_verification_value

    @merchant_verification_value.setter
    def merchant_verification_value(self, merchant_verification_value):
        """
        Sets the merchant_verification_value of this MultipullfundspostPayload.

        :param merchant_verification_value: The merchant_verification_value of this MultipullfundspostPayload.
        :type: MerchantVerificationValue
        """

        self._merchant_verification_value = merchant_verification_value

    @property
    def sharing_group_code(self):
        """
        Gets the sharing_group_code of this MultipullfundspostPayload.
        This field is optionally used by Push Payments Gateway participants (merchants and acquirers) to specify the network access priority.<br><br>Refer to <a href=\"/request_response_codes#network_id_and_sharing_group_code\">Sharing Group Code</a><br><br><b>Note:</b><br>Supported only in US for domestic transactions involving Push Payments Gateway Service.

        :return: The sharing_group_code of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._sharing_group_code

    @sharing_group_code.setter
    def sharing_group_code(self, sharing_group_code):
        """
        Sets the sharing_group_code of this MultipullfundspostPayload.
        This field is optionally used by Push Payments Gateway participants (merchants and acquirers) to specify the network access priority.<br><br>Refer to <a href=\"/request_response_codes#network_id_and_sharing_group_code\">Sharing Group Code</a><br><br><b>Note:</b><br>Supported only in US for domestic transactions involving Push Payments Gateway Service.

        :param sharing_group_code: The sharing_group_code of this MultipullfundspostPayload.
        :type: str
        """

        self._sharing_group_code = sharing_group_code

    @property
    def acquirer_country_code(self):
        """
        Gets the acquirer_country_code of this MultipullfundspostPayload.
        Use a 3-digit numeric country code for the country of the BIN under which your Visa Direct solution is registered. This must match the information provided during program enrollment.<br><br>Refer to <a href=\"/request_response_codes#iso_country_and_currency_codes\">ISO Codes</a>

        :return: The acquirer_country_code of this MultipullfundspostPayload.
        :rtype: int
        """
        return self._acquirer_country_code

    @acquirer_country_code.setter
    def acquirer_country_code(self, acquirer_country_code):
        """
        Sets the acquirer_country_code of this MultipullfundspostPayload.
        Use a 3-digit numeric country code for the country of the BIN under which your Visa Direct solution is registered. This must match the information provided during program enrollment.<br><br>Refer to <a href=\"/request_response_codes#iso_country_and_currency_codes\">ISO Codes</a>

        :param acquirer_country_code: The acquirer_country_code of this MultipullfundspostPayload.
        :type: int
        """
        if acquirer_country_code is None:
            raise ValueError("Invalid value for `acquirer_country_code`, must not be `None`")

        self._acquirer_country_code = acquirer_country_code

    @property
    def amount(self):
        """
        Gets the amount of this MultipullfundspostPayload.
        The amount of the transaction, inclusive of all fees you assess for the transaction, including currency conversion fees. If the originator is populating the surcharge or foreignExchangeFeeTransaction field, they must be included in the amount field.

        :return: The amount of this MultipullfundspostPayload.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this MultipullfundspostPayload.
        The amount of the transaction, inclusive of all fees you assess for the transaction, including currency conversion fees. If the originator is populating the surcharge or foreignExchangeFeeTransaction field, they must be included in the amount field.

        :param amount: The amount of this MultipullfundspostPayload.
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def member_comments(self):
        """
        Gets the member_comments of this MultipullfundspostPayload.
        This field can be optionally used to send and receive comments by service providers. Issuers can optionally include new text in this field in the response. If the issuer does not include this field, Visa will inject the value from the request in the response and send it back to the service provider.

        :return: The member_comments of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._member_comments

    @member_comments.setter
    def member_comments(self, member_comments):
        """
        Sets the member_comments of this MultipullfundspostPayload.
        This field can be optionally used to send and receive comments by service providers. Issuers can optionally include new text in this field in the response. If the issuer does not include this field, Visa will inject the value from the request in the response and send it back to the service provider.

        :param member_comments: The member_comments of this MultipullfundspostPayload.
        :type: str
        """

        self._member_comments = member_comments

    @property
    def recipient_last_name(self):
        """
        Gets the recipient_last_name of this MultipullfundspostPayload.
        When present, this field contains recipient's last name

        :return: The recipient_last_name of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._recipient_last_name

    @recipient_last_name.setter
    def recipient_last_name(self, recipient_last_name):
        """
        Sets the recipient_last_name of this MultipullfundspostPayload.
        When present, this field contains recipient's last name

        :param recipient_last_name: The recipient_last_name of this MultipullfundspostPayload.
        :type: str
        """

        self._recipient_last_name = recipient_last_name

    @property
    def national_reimbursement_fee(self):
        """
        Gets the national_reimbursement_fee of this MultipullfundspostPayload.
        When present, this field contains the IRF fees.

        :return: The national_reimbursement_fee of this MultipullfundspostPayload.
        :rtype: float
        """
        return self._national_reimbursement_fee

    @national_reimbursement_fee.setter
    def national_reimbursement_fee(self, national_reimbursement_fee):
        """
        Sets the national_reimbursement_fee of this MultipullfundspostPayload.
        When present, this field contains the IRF fees.

        :param national_reimbursement_fee: The national_reimbursement_fee of this MultipullfundspostPayload.
        :type: float
        """

        self._national_reimbursement_fee = national_reimbursement_fee

    @property
    def card_cvv2_value(self):
        """
        Gets the card_cvv2_value of this MultipullfundspostPayload.
        The cardCvv2Value provided by the account holder for the senderPrimaryAccountNumber in the request.

        :return: The card_cvv2_value of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._card_cvv2_value

    @card_cvv2_value.setter
    def card_cvv2_value(self, card_cvv2_value):
        """
        Sets the card_cvv2_value of this MultipullfundspostPayload.
        The cardCvv2Value provided by the account holder for the senderPrimaryAccountNumber in the request.

        :param card_cvv2_value: The card_cvv2_value of this MultipullfundspostPayload.
        :type: str
        """

        self._card_cvv2_value = card_cvv2_value

    @property
    def cavv(self):
        """
        Gets the cavv of this MultipullfundspostPayload.
        The Cardholder Authentication Verification Value (CAVV) is a value generated by an Access Control Server (ACS) and signed by the Issuer using account and password information of cardholders registered for the Verified by Visa program.  This field should be in hexabinary format.

        :return: The cavv of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._cavv

    @cavv.setter
    def cavv(self, cavv):
        """
        Sets the cavv of this MultipullfundspostPayload.
        The Cardholder Authentication Verification Value (CAVV) is a value generated by an Access Control Server (ACS) and signed by the Issuer using account and password information of cardholders registered for the Verified by Visa program.  This field should be in hexabinary format.

        :param cavv: The cavv of this MultipullfundspostPayload.
        :type: str
        """

        self._cavv = cavv

    @property
    def sender_postal_code(self):
        """
        Gets the sender_postal_code of this MultipullfundspostPayload.
        When present, this field contains the sender's postal code

        :return: The sender_postal_code of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._sender_postal_code

    @sender_postal_code.setter
    def sender_postal_code(self, sender_postal_code):
        """
        Sets the sender_postal_code of this MultipullfundspostPayload.
        When present, this field contains the sender's postal code

        :param sender_postal_code: The sender_postal_code of this MultipullfundspostPayload.
        :type: str
        """

        self._sender_postal_code = sender_postal_code

    @property
    def pin_data(self):
        """
        Gets the pin_data of this MultipullfundspostPayload.

        :return: The pin_data of this MultipullfundspostPayload.
        :rtype: PinData
        """
        return self._pin_data

    @pin_data.setter
    def pin_data(self, pin_data):
        """
        Sets the pin_data of this MultipullfundspostPayload.

        :param pin_data: The pin_data of this MultipullfundspostPayload.
        :type: PinData
        """

        self._pin_data = pin_data

    @property
    def sender_first_name(self):
        """
        Gets the sender_first_name of this MultipullfundspostPayload.
        This field contains sender's first name

        :return: The sender_first_name of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._sender_first_name

    @sender_first_name.setter
    def sender_first_name(self, sender_first_name):
        """
        Sets the sender_first_name of this MultipullfundspostPayload.
        This field contains sender's first name

        :param sender_first_name: The sender_first_name of this MultipullfundspostPayload.
        :type: str
        """

        self._sender_first_name = sender_first_name

    @property
    def sender_city(self):
        """
        Gets the sender_city of this MultipullfundspostPayload.
        When present, this field contains sender's city

        :return: The sender_city of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._sender_city

    @sender_city.setter
    def sender_city(self, sender_city):
        """
        Sets the sender_city of this MultipullfundspostPayload.
        When present, this field contains sender's city

        :param sender_city: The sender_city of this MultipullfundspostPayload.
        :type: str
        """

        self._sender_city = sender_city

    @property
    def fee_program_indicator(self):
        """
        Gets the fee_program_indicator of this MultipullfundspostPayload.
        If present, a valid value is required. Spaces or special characters are not allowed.

        :return: The fee_program_indicator of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._fee_program_indicator

    @fee_program_indicator.setter
    def fee_program_indicator(self, fee_program_indicator):
        """
        Sets the fee_program_indicator of this MultipullfundspostPayload.
        If present, a valid value is required. Spaces or special characters are not allowed.

        :param fee_program_indicator: The fee_program_indicator of this MultipullfundspostPayload.
        :type: str
        """

        self._fee_program_indicator = fee_program_indicator

    @property
    def address_verification_data(self):
        """
        Gets the address_verification_data of this MultipullfundspostPayload.

        :return: The address_verification_data of this MultipullfundspostPayload.
        :rtype: AddressVerificationData
        """
        return self._address_verification_data

    @address_verification_data.setter
    def address_verification_data(self, address_verification_data):
        """
        Sets the address_verification_data of this MultipullfundspostPayload.

        :param address_verification_data: The address_verification_data of this MultipullfundspostPayload.
        :type: AddressVerificationData
        """

        self._address_verification_data = address_verification_data

    @property
    def sender_account_number(self):
        """
        Gets the sender_account_number of this MultipullfundspostPayload.
        When present, this field contains the sender's account number

        :return: The sender_account_number of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._sender_account_number

    @sender_account_number.setter
    def sender_account_number(self, sender_account_number):
        """
        Sets the sender_account_number of this MultipullfundspostPayload.
        When present, this field contains the sender's account number

        :param sender_account_number: The sender_account_number of this MultipullfundspostPayload.
        :type: str
        """

        self._sender_account_number = sender_account_number

    @property
    def magnetic_stripe_data(self):
        """
        Gets the magnetic_stripe_data of this MultipullfundspostPayload.

        :return: The magnetic_stripe_data of this MultipullfundspostPayload.
        :rtype: MagneticStripeData
        """
        return self._magnetic_stripe_data

    @magnetic_stripe_data.setter
    def magnetic_stripe_data(self, magnetic_stripe_data):
        """
        Sets the magnetic_stripe_data of this MultipullfundspostPayload.

        :param magnetic_stripe_data: The magnetic_stripe_data of this MultipullfundspostPayload.
        :type: MagneticStripeData
        """

        self._magnetic_stripe_data = magnetic_stripe_data

    @property
    def acquiring_bin(self):
        """
        Gets the acquiring_bin of this MultipullfundspostPayload.
        The Bank Identification Number (BIN) under which your Visa Direct is registered. This must match the information provided during enrollment.

        :return: The acquiring_bin of this MultipullfundspostPayload.
        :rtype: int
        """
        return self._acquiring_bin

    @acquiring_bin.setter
    def acquiring_bin(self, acquiring_bin):
        """
        Sets the acquiring_bin of this MultipullfundspostPayload.
        The Bank Identification Number (BIN) under which your Visa Direct is registered. This must match the information provided during enrollment.

        :param acquiring_bin: The acquiring_bin of this MultipullfundspostPayload.
        :type: int
        """
        if acquiring_bin is None:
            raise ValueError("Invalid value for `acquiring_bin`, must not be `None`")

        self._acquiring_bin = acquiring_bin

    @property
    def cps_authorization_characteristics_indicator(self):
        """
        Gets the cps_authorization_characteristics_indicator of this MultipullfundspostPayload.
        Request for CPS authorization. If present, a valid value is required. Spaces or special characters are not allowed. Possible values are : Y (Transaction requests participation)

        :return: The cps_authorization_characteristics_indicator of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._cps_authorization_characteristics_indicator

    @cps_authorization_characteristics_indicator.setter
    def cps_authorization_characteristics_indicator(self, cps_authorization_characteristics_indicator):
        """
        Sets the cps_authorization_characteristics_indicator of this MultipullfundspostPayload.
        Request for CPS authorization. If present, a valid value is required. Spaces or special characters are not allowed. Possible values are : Y (Transaction requests participation)

        :param cps_authorization_characteristics_indicator: The cps_authorization_characteristics_indicator of this MultipullfundspostPayload.
        :type: str
        """

        self._cps_authorization_characteristics_indicator = cps_authorization_characteristics_indicator

    @property
    def merchant_pseudo_aba_number(self):
        """
        Gets the merchant_pseudo_aba_number of this MultipullfundspostPayload.
        This is a number that uniquely identifies the originator when they sign up to send Push Payment Gateway transactions. On enrollment, an originator will get a single pseudo-value that is assigned by Visa. The other networks will assign their own unique values for the originator.<br><br><b>Note:</b><br>Supported only in US for domestic transactions involving Push Payments Gateway Service.

        :return: The merchant_pseudo_aba_number of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._merchant_pseudo_aba_number

    @merchant_pseudo_aba_number.setter
    def merchant_pseudo_aba_number(self, merchant_pseudo_aba_number):
        """
        Sets the merchant_pseudo_aba_number of this MultipullfundspostPayload.
        This is a number that uniquely identifies the originator when they sign up to send Push Payment Gateway transactions. On enrollment, an originator will get a single pseudo-value that is assigned by Visa. The other networks will assign their own unique values for the originator.<br><br><b>Note:</b><br>Supported only in US for domestic transactions involving Push Payments Gateway Service.

        :param merchant_pseudo_aba_number: The merchant_pseudo_aba_number of this MultipullfundspostPayload.
        :type: str
        """

        self._merchant_pseudo_aba_number = merchant_pseudo_aba_number

    @property
    def foreign_exchange_fee_transaction(self):
        """
        Gets the foreign_exchange_fee_transaction of this MultipullfundspostPayload.
        When present, this field contains the sender's foreign exchange markup fee (markup above the wholesale or VisaNet exchange rate as assessed by the originator). Values in this field must be in the same currency and format as defined in the amount field.

        :return: The foreign_exchange_fee_transaction of this MultipullfundspostPayload.
        :rtype: float
        """
        return self._foreign_exchange_fee_transaction

    @foreign_exchange_fee_transaction.setter
    def foreign_exchange_fee_transaction(self, foreign_exchange_fee_transaction):
        """
        Sets the foreign_exchange_fee_transaction of this MultipullfundspostPayload.
        When present, this field contains the sender's foreign exchange markup fee (markup above the wholesale or VisaNet exchange rate as assessed by the originator). Values in this field must be in the same currency and format as defined in the amount field.

        :param foreign_exchange_fee_transaction: The foreign_exchange_fee_transaction of this MultipullfundspostPayload.
        :type: float
        """

        self._foreign_exchange_fee_transaction = foreign_exchange_fee_transaction

    @property
    def point_of_service_data(self):
        """
        Gets the point_of_service_data of this MultipullfundspostPayload.

        :return: The point_of_service_data of this MultipullfundspostPayload.
        :rtype: PointOfServiceData
        """
        return self._point_of_service_data

    @point_of_service_data.setter
    def point_of_service_data(self, point_of_service_data):
        """
        Sets the point_of_service_data of this MultipullfundspostPayload.

        :param point_of_service_data: The point_of_service_data of this MultipullfundspostPayload.
        :type: PointOfServiceData
        """

        self._point_of_service_data = point_of_service_data

    @property
    def sender_primary_account_number(self):
        """
        Gets the sender_primary_account_number of this MultipullfundspostPayload.
        The primary account number of the sender's account.

        :return: The sender_primary_account_number of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._sender_primary_account_number

    @sender_primary_account_number.setter
    def sender_primary_account_number(self, sender_primary_account_number):
        """
        Sets the sender_primary_account_number of this MultipullfundspostPayload.
        The primary account number of the sender's account.

        :param sender_primary_account_number: The sender_primary_account_number of this MultipullfundspostPayload.
        :type: str
        """
        if sender_primary_account_number is None:
            raise ValueError("Invalid value for `sender_primary_account_number`, must not be `None`")

        self._sender_primary_account_number = sender_primary_account_number

    @property
    def local_transaction_date_time(self):
        """
        Gets the local_transaction_date_time of this MultipullfundspostPayload.
         

        :return: The local_transaction_date_time of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._local_transaction_date_time

    @local_transaction_date_time.setter
    def local_transaction_date_time(self, local_transaction_date_time):
        """
        Sets the local_transaction_date_time of this MultipullfundspostPayload.
         

        :param local_transaction_date_time: The local_transaction_date_time of this MultipullfundspostPayload.
        :type: str
        """
        if local_transaction_date_time is None:
            raise ValueError("Invalid value for `local_transaction_date_time`, must not be `None`")

        self._local_transaction_date_time = local_transaction_date_time

    @property
    def recipient_first_name(self):
        """
        Gets the recipient_first_name of this MultipullfundspostPayload.
        When present, this field contains recipient's first name

        :return: The recipient_first_name of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._recipient_first_name

    @recipient_first_name.setter
    def recipient_first_name(self, recipient_first_name):
        """
        Sets the recipient_first_name of this MultipullfundspostPayload.
        When present, this field contains recipient's first name

        :param recipient_first_name: The recipient_first_name of this MultipullfundspostPayload.
        :type: str
        """

        self._recipient_first_name = recipient_first_name

    @property
    def sender_card_expiry_date(self):
        """
        Gets the sender_card_expiry_date of this MultipullfundspostPayload.
        The expiration date for the sender's Visa account number in  senderPrimaryAccountNumber

        :return: The sender_card_expiry_date of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._sender_card_expiry_date

    @sender_card_expiry_date.setter
    def sender_card_expiry_date(self, sender_card_expiry_date):
        """
        Sets the sender_card_expiry_date of this MultipullfundspostPayload.
        The expiration date for the sender's Visa account number in  senderPrimaryAccountNumber

        :param sender_card_expiry_date: The sender_card_expiry_date of this MultipullfundspostPayload.
        :type: str
        """
        if sender_card_expiry_date is None:
            raise ValueError("Invalid value for `sender_card_expiry_date`, must not be `None`")

        self._sender_card_expiry_date = sender_card_expiry_date

    @property
    def recipient_middle_initial(self):
        """
        Gets the recipient_middle_initial of this MultipullfundspostPayload.
        When present, this field contains recipient's middle initial

        :return: The recipient_middle_initial of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._recipient_middle_initial

    @recipient_middle_initial.setter
    def recipient_middle_initial(self, recipient_middle_initial):
        """
        Sets the recipient_middle_initial of this MultipullfundspostPayload.
        When present, this field contains recipient's middle initial

        :param recipient_middle_initial: The recipient_middle_initial of this MultipullfundspostPayload.
        :type: str
        """

        self._recipient_middle_initial = recipient_middle_initial

    @property
    def recipient_country_code(self):
        """
        Gets the recipient_country_code of this MultipullfundspostPayload.
        when present, this field contains recipient's country code <br><br>Refer to <a href=\"/request_response_codes#iso_country_codes\">ISO Codes</a>

        :return: The recipient_country_code of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._recipient_country_code

    @recipient_country_code.setter
    def recipient_country_code(self, recipient_country_code):
        """
        Sets the recipient_country_code of this MultipullfundspostPayload.
        when present, this field contains recipient's country code <br><br>Refer to <a href=\"/request_response_codes#iso_country_codes\">ISO Codes</a>

        :param recipient_country_code: The recipient_country_code of this MultipullfundspostPayload.
        :type: str
        """

        self._recipient_country_code = recipient_country_code

    @property
    def systems_trace_audit_number(self):
        """
        Gets the systems_trace_audit_number of this MultipullfundspostPayload.
        A unique value should be used for each API method. However, when passing the (AFTR) method, this value must match the systemsTraceAuditNumber previously passed with the AFT method for the current transaction.

        :return: The systems_trace_audit_number of this MultipullfundspostPayload.
        :rtype: int
        """
        return self._systems_trace_audit_number

    @systems_trace_audit_number.setter
    def systems_trace_audit_number(self, systems_trace_audit_number):
        """
        Sets the systems_trace_audit_number of this MultipullfundspostPayload.
        A unique value should be used for each API method. However, when passing the (AFTR) method, this value must match the systemsTraceAuditNumber previously passed with the AFT method for the current transaction.

        :param systems_trace_audit_number: The systems_trace_audit_number of this MultipullfundspostPayload.
        :type: int
        """
        if systems_trace_audit_number is None:
            raise ValueError("Invalid value for `systems_trace_audit_number`, must not be `None`")

        self._systems_trace_audit_number = systems_trace_audit_number

    @property
    def sender_country_code(self):
        """
        Gets the sender_country_code of this MultipullfundspostPayload.
        when present, this field contains sender's country code <br><br>Refer to <a href=\"/request_response_codes#iso_country_codes\">ISO Codes</a>

        :return: The sender_country_code of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._sender_country_code

    @sender_country_code.setter
    def sender_country_code(self, sender_country_code):
        """
        Sets the sender_country_code of this MultipullfundspostPayload.
        when present, this field contains sender's country code <br><br>Refer to <a href=\"/request_response_codes#iso_country_codes\">ISO Codes</a>

        :param sender_country_code: The sender_country_code of this MultipullfundspostPayload.
        :type: str
        """

        self._sender_country_code = sender_country_code

    @property
    def sender_currency_code(self):
        """
        Gets the sender_currency_code of this MultipullfundspostPayload.
        Use a 3-character alpha or numeric currency code for currency of the sender.<br><br>Refer to <a href=\"/request_response_codes#iso_country_and_currency_codes\">ISO Codes</a>

        :return: The sender_currency_code of this MultipullfundspostPayload.
        :rtype: str
        """
        return self._sender_currency_code

    @sender_currency_code.setter
    def sender_currency_code(self, sender_currency_code):
        """
        Sets the sender_currency_code of this MultipullfundspostPayload.
        Use a 3-character alpha or numeric currency code for currency of the sender.<br><br>Refer to <a href=\"/request_response_codes#iso_country_and_currency_codes\">ISO Codes</a>

        :param sender_currency_code: The sender_currency_code of this MultipullfundspostPayload.
        :type: str
        """
        if sender_currency_code is None:
            raise ValueError("Invalid value for `sender_currency_code`, must not be `None`")

        self._sender_currency_code = sender_currency_code

    @property
    def point_of_service_capability(self):
        """
        Gets the point_of_service_capability of this MultipullfundspostPayload.

        :return: The point_of_service_capability of this MultipullfundspostPayload.
        :rtype: PointOfServiceCapability
        """
        return self._point_of_service_capability

    @point_of_service_capability.setter
    def point_of_service_capability(self, point_of_service_capability):
        """
        Sets the point_of_service_capability of this MultipullfundspostPayload.

        :param point_of_service_capability: The point_of_service_capability of this MultipullfundspostPayload.
        :type: PointOfServiceCapability
        """

        self._point_of_service_capability = point_of_service_capability

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MultipullfundspostPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------