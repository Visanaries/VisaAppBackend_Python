# coding: utf-8

"""
    Funds Transfer API

    The Funds Transfer API can pull funds from the sender&apos;s Visa account (in preparation for pushing funds to a recipient&apos;s account) in an Account Funding Transaction (AFT).  Additionally, the Funds Transfer API also provides functionality to push funds to the recipient&apos;s Visa account in an Original Credit Transaction (OCT).  If a transaction is declined, the Funds Transfer API can also return the funds to the sender&apos;s funding source in an Account Funding Transaction Reversal (AFTR). The API has been enhanced to allow originators to send their PushFundsTransactions(OCTs) and PullFundsTransactions(AFTs) to Visa for routing to multiple U.S. debit networks.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MultipullfundspostResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, network_id=None, merchant_verification_value=None, member_comments=None, status_identifier=None):
        """
        MultipullfundspostResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'network_id': 'int',
            'merchant_verification_value': 'str',
            'member_comments': 'str',
            'status_identifier': 'str'
        }

        self.attribute_map = {
            'network_id': 'networkId',
            'merchant_verification_value': 'merchantVerificationValue',
            'member_comments': 'memberComments',
            'status_identifier': 'statusIdentifier'
        }

        self._network_id = network_id
        self._merchant_verification_value = merchant_verification_value
        self._member_comments = member_comments
        self._status_identifier = status_identifier

    @property
    def network_id(self):
        """
        Gets the network_id of this MultipullfundspostResponse.
        This contains a code that identifies the network on which the transaction was processed.<br><br>Refer to <a href=\"/request_response_codes#network_id_and_sharing_group_code\">Network ID</a><br><br><b>Note:</b><br>This field is returned only if it is anything other than networkId value 2.<br><br>Supported only in US for domestic transactions.

        :return: The network_id of this MultipullfundspostResponse.
        :rtype: int
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """
        Sets the network_id of this MultipullfundspostResponse.
        This contains a code that identifies the network on which the transaction was processed.<br><br>Refer to <a href=\"/request_response_codes#network_id_and_sharing_group_code\">Network ID</a><br><br><b>Note:</b><br>This field is returned only if it is anything other than networkId value 2.<br><br>Supported only in US for domestic transactions.

        :param network_id: The network_id of this MultipullfundspostResponse.
        :type: int
        """

        self._network_id = network_id

    @property
    def merchant_verification_value(self):
        """
        Gets the merchant_verification_value of this MultipullfundspostResponse.
        The concatenated Merchant Verification Value of Visa assigned and Acquirer assigned value is returned.

        :return: The merchant_verification_value of this MultipullfundspostResponse.
        :rtype: str
        """
        return self._merchant_verification_value

    @merchant_verification_value.setter
    def merchant_verification_value(self, merchant_verification_value):
        """
        Sets the merchant_verification_value of this MultipullfundspostResponse.
        The concatenated Merchant Verification Value of Visa assigned and Acquirer assigned value is returned.

        :param merchant_verification_value: The merchant_verification_value of this MultipullfundspostResponse.
        :type: str
        """

        self._merchant_verification_value = merchant_verification_value

    @property
    def member_comments(self):
        """
        Gets the member_comments of this MultipullfundspostResponse.
        This field can be optionally used to send and receive comments by service providers. Issuers can optionally include new text in this field in the response. If the issuer does not include this field, Visa will inject the value from the request in the response and send it back to the service provider.

        :return: The member_comments of this MultipullfundspostResponse.
        :rtype: str
        """
        return self._member_comments

    @member_comments.setter
    def member_comments(self, member_comments):
        """
        Sets the member_comments of this MultipullfundspostResponse.
        This field can be optionally used to send and receive comments by service providers. Issuers can optionally include new text in this field in the response. If the issuer does not include this field, Visa will inject the value from the request in the response and send it back to the service provider.

        :param member_comments: The member_comments of this MultipullfundspostResponse.
        :type: str
        """

        self._member_comments = member_comments

    @property
    def status_identifier(self):
        """
        Gets the status_identifier of this MultipullfundspostResponse.
        

        :return: The status_identifier of this MultipullfundspostResponse.
        :rtype: str
        """
        return self._status_identifier

    @status_identifier.setter
    def status_identifier(self, status_identifier):
        """
        Sets the status_identifier of this MultipullfundspostResponse.
        

        :param status_identifier: The status_identifier of this MultipullfundspostResponse.
        :type: str
        """
        if status_identifier is None:
            raise ValueError("Invalid value for `status_identifier`, must not be `None`")

        self._status_identifier = status_identifier

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MultipullfundspostResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------