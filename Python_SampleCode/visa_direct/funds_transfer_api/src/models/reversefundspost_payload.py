# coding: utf-8

"""
    Funds Transfer API

    The Funds Transfer API can pull funds from the sender&apos;s Visa account (in preparation for pushing funds to a recipient&apos;s account) in an Account Funding Transaction (AFT).  Additionally, the Funds Transfer API also provides functionality to push funds to the recipient&apos;s Visa account in an Original Credit Transaction (OCT).  If a transaction is declined, the Funds Transfer API can also return the funds to the sender&apos;s funding source in an Account Funding Transaction Reversal (AFTR). The API has been enhanced to allow originators to send their PushFundsTransactions(OCTs) and PullFundsTransactions(AFTs) to Visa for routing to multiple U.S. debit networks.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ReversefundspostPayload(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, business_application_id=None, transaction_identifier=None, card_acceptor=None, surcharge=None, network_id=None, merchant_category_code=None, merchant_verification_value=None, sharing_group_code=None, acquirer_country_code=None, systems_trace_audit_number=None, original_data_elements=None, member_comments=None, national_reimbursement_fee=None, fee_program_indicator=None, retrieval_reference_number=None, acquiring_bin=None, account_type=None, merchant_pseudo_aba_number=None, foreign_exchange_fee_transaction=None, point_of_service_data=None, sender_primary_account_number=None, local_transaction_date_time=None, sender_card_expiry_date=None, amount=None, sender_currency_code=None, point_of_service_capability=None):
        """
        ReversefundspostPayload - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'business_application_id': 'str',
            'transaction_identifier': 'int',
            'card_acceptor': 'CardAcceptor',
            'surcharge': 'str',
            'network_id': 'int',
            'merchant_category_code': 'int',
            'merchant_verification_value': 'MerchantVerificationValue',
            'sharing_group_code': 'str',
            'acquirer_country_code': 'int',
            'systems_trace_audit_number': 'int',
            'original_data_elements': 'OriginalDataElements',
            'member_comments': 'str',
            'national_reimbursement_fee': 'float',
            'fee_program_indicator': 'str',
            'retrieval_reference_number': 'str',
            'acquiring_bin': 'int',
            'account_type': 'str',
            'merchant_pseudo_aba_number': 'str',
            'foreign_exchange_fee_transaction': 'float',
            'point_of_service_data': 'PointOfServiceData',
            'sender_primary_account_number': 'str',
            'local_transaction_date_time': 'str',
            'sender_card_expiry_date': 'str',
            'amount': 'float',
            'sender_currency_code': 'str',
            'point_of_service_capability': 'PointOfServiceCapability'
        }

        self.attribute_map = {
            'business_application_id': 'businessApplicationId',
            'transaction_identifier': 'transactionIdentifier',
            'card_acceptor': 'cardAcceptor',
            'surcharge': 'surcharge',
            'network_id': 'networkId',
            'merchant_category_code': 'merchantCategoryCode',
            'merchant_verification_value': 'merchantVerificationValue',
            'sharing_group_code': 'sharingGroupCode',
            'acquirer_country_code': 'acquirerCountryCode',
            'systems_trace_audit_number': 'systemsTraceAuditNumber',
            'original_data_elements': 'originalDataElements',
            'member_comments': 'memberComments',
            'national_reimbursement_fee': 'nationalReimbursementFee',
            'fee_program_indicator': 'feeProgramIndicator',
            'retrieval_reference_number': 'retrievalReferenceNumber',
            'acquiring_bin': 'acquiringBin',
            'account_type': 'accountType',
            'merchant_pseudo_aba_number': 'merchantPseudoAbaNumber',
            'foreign_exchange_fee_transaction': 'foreignExchangeFeeTransaction',
            'point_of_service_data': 'pointOfServiceData',
            'sender_primary_account_number': 'senderPrimaryAccountNumber',
            'local_transaction_date_time': 'localTransactionDateTime',
            'sender_card_expiry_date': 'senderCardExpiryDate',
            'amount': 'amount',
            'sender_currency_code': 'senderCurrencyCode',
            'point_of_service_capability': 'pointOfServiceCapability'
        }

        self._business_application_id = business_application_id
        self._transaction_identifier = transaction_identifier
        self._card_acceptor = card_acceptor
        self._surcharge = surcharge
        self._network_id = network_id
        self._merchant_category_code = merchant_category_code
        self._merchant_verification_value = merchant_verification_value
        self._sharing_group_code = sharing_group_code
        self._acquirer_country_code = acquirer_country_code
        self._systems_trace_audit_number = systems_trace_audit_number
        self._original_data_elements = original_data_elements
        self._member_comments = member_comments
        self._national_reimbursement_fee = national_reimbursement_fee
        self._fee_program_indicator = fee_program_indicator
        self._retrieval_reference_number = retrieval_reference_number
        self._acquiring_bin = acquiring_bin
        self._account_type = account_type
        self._merchant_pseudo_aba_number = merchant_pseudo_aba_number
        self._foreign_exchange_fee_transaction = foreign_exchange_fee_transaction
        self._point_of_service_data = point_of_service_data
        self._sender_primary_account_number = sender_primary_account_number
        self._local_transaction_date_time = local_transaction_date_time
        self._sender_card_expiry_date = sender_card_expiry_date
        self._amount = amount
        self._sender_currency_code = sender_currency_code
        self._point_of_service_capability = point_of_service_capability

    @property
    def business_application_id(self):
        """
        Gets the business_application_id of this ReversefundspostPayload.
        Identifies the programs' business application type for VisaNet transaction processing<br><br>For Money Transfer, AA applies to transactions where the sender and recipient are the same person and PP applies to transactions where the sender and recipient are not the same person.<br><br>Refer to <a href=\"/request_response_codes#business_application_identifier\">businessApplicationId</a> codes

        :return: The business_application_id of this ReversefundspostPayload.
        :rtype: str
        """
        return self._business_application_id

    @business_application_id.setter
    def business_application_id(self, business_application_id):
        """
        Sets the business_application_id of this ReversefundspostPayload.
        Identifies the programs' business application type for VisaNet transaction processing<br><br>For Money Transfer, AA applies to transactions where the sender and recipient are the same person and PP applies to transactions where the sender and recipient are not the same person.<br><br>Refer to <a href=\"/request_response_codes#business_application_identifier\">businessApplicationId</a> codes

        :param business_application_id: The business_application_id of this ReversefundspostPayload.
        :type: str
        """
        if business_application_id is None:
            raise ValueError("Invalid value for `business_application_id`, must not be `None`")

        self._business_application_id = business_application_id

    @property
    def transaction_identifier(self):
        """
        Gets the transaction_identifier of this ReversefundspostPayload.
        The VisaNet reference number for the transaction. You must use the transactionIdentifier from the initial AFT in this field.

        :return: The transaction_identifier of this ReversefundspostPayload.
        :rtype: int
        """
        return self._transaction_identifier

    @transaction_identifier.setter
    def transaction_identifier(self, transaction_identifier):
        """
        Sets the transaction_identifier of this ReversefundspostPayload.
        The VisaNet reference number for the transaction. You must use the transactionIdentifier from the initial AFT in this field.

        :param transaction_identifier: The transaction_identifier of this ReversefundspostPayload.
        :type: int
        """
        if transaction_identifier is None:
            raise ValueError("Invalid value for `transaction_identifier`, must not be `None`")

        self._transaction_identifier = transaction_identifier

    @property
    def card_acceptor(self):
        """
        Gets the card_acceptor of this ReversefundspostPayload.

        :return: The card_acceptor of this ReversefundspostPayload.
        :rtype: CardAcceptor
        """
        return self._card_acceptor

    @card_acceptor.setter
    def card_acceptor(self, card_acceptor):
        """
        Sets the card_acceptor of this ReversefundspostPayload.

        :param card_acceptor: The card_acceptor of this ReversefundspostPayload.
        :type: CardAcceptor
        """
        if card_acceptor is None:
            raise ValueError("Invalid value for `card_acceptor`, must not be `None`")

        self._card_acceptor = card_acceptor

    @property
    def surcharge(self):
        """
        Gets the surcharge of this ReversefundspostPayload.
        When present, this field contains the sender's surcharge as assessed by the originator. Values in this field must be in the same currency and format as defined in the amount field.

        :return: The surcharge of this ReversefundspostPayload.
        :rtype: str
        """
        return self._surcharge

    @surcharge.setter
    def surcharge(self, surcharge):
        """
        Sets the surcharge of this ReversefundspostPayload.
        When present, this field contains the sender's surcharge as assessed by the originator. Values in this field must be in the same currency and format as defined in the amount field.

        :param surcharge: The surcharge of this ReversefundspostPayload.
        :type: str
        """

        self._surcharge = surcharge

    @property
    def network_id(self):
        """
        Gets the network_id of this ReversefundspostPayload.
        This contains a code that specifies the network to be used for transmission of the message and determines the program rules that apply to the transaction.<br><br>Refer to <a href=\"/request_response_codes#network_id_and_sharing_group_code\">Network ID</a><br><br><b>Note:</b><br>For ReverseFundsTransactions(AFTR) and MultiReverseFundsTransactions (MULTIAFTR) originators must populate the networkId returned in the original PullFundsTransactions(AFT) and  MultiPullFundsTransactions (MULTIAFT) response.<br> Supported only in US for domestic transactions.

        :return: The network_id of this ReversefundspostPayload.
        :rtype: int
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """
        Sets the network_id of this ReversefundspostPayload.
        This contains a code that specifies the network to be used for transmission of the message and determines the program rules that apply to the transaction.<br><br>Refer to <a href=\"/request_response_codes#network_id_and_sharing_group_code\">Network ID</a><br><br><b>Note:</b><br>For ReverseFundsTransactions(AFTR) and MultiReverseFundsTransactions (MULTIAFTR) originators must populate the networkId returned in the original PullFundsTransactions(AFT) and  MultiPullFundsTransactions (MULTIAFT) response.<br> Supported only in US for domestic transactions.

        :param network_id: The network_id of this ReversefundspostPayload.
        :type: int
        """

        self._network_id = network_id

    @property
    def merchant_category_code(self):
        """
        Gets the merchant_category_code of this ReversefundspostPayload.
        If provided, then the value overrides the one present in onboarding data. If the merchantCategoryCode value is not populated in onboarding data then this field is mandatory.<br><br>If not provided, then the value will default to the values provided during onboarding (when the services are provisioned)<b>Note:</b> required if not provided during onboarding

        :return: The merchant_category_code of this ReversefundspostPayload.
        :rtype: int
        """
        return self._merchant_category_code

    @merchant_category_code.setter
    def merchant_category_code(self, merchant_category_code):
        """
        Sets the merchant_category_code of this ReversefundspostPayload.
        If provided, then the value overrides the one present in onboarding data. If the merchantCategoryCode value is not populated in onboarding data then this field is mandatory.<br><br>If not provided, then the value will default to the values provided during onboarding (when the services are provisioned)<b>Note:</b> required if not provided during onboarding

        :param merchant_category_code: The merchant_category_code of this ReversefundspostPayload.
        :type: int
        """
        if merchant_category_code is None:
            raise ValueError("Invalid value for `merchant_category_code`, must not be `None`")

        self._merchant_category_code = merchant_category_code

    @property
    def merchant_verification_value(self):
        """
        Gets the merchant_verification_value of this ReversefundspostPayload.

        :return: The merchant_verification_value of this ReversefundspostPayload.
        :rtype: MerchantVerificationValue
        """
        return self._merchant_verification_value

    @merchant_verification_value.setter
    def merchant_verification_value(self, merchant_verification_value):
        """
        Sets the merchant_verification_value of this ReversefundspostPayload.

        :param merchant_verification_value: The merchant_verification_value of this ReversefundspostPayload.
        :type: MerchantVerificationValue
        """

        self._merchant_verification_value = merchant_verification_value

    @property
    def sharing_group_code(self):
        """
        Gets the sharing_group_code of this ReversefundspostPayload.
        This field is optionally used by Push Payments Gateway participants (merchants and acquirers) to specify the network access priority.<br><br>Refer to <a href=\"/request_response_codes#network_id_and_sharing_group_code\">Sharing Group Code</a><br><br><b>Note:</b><br>Supported only in US for domestic transactions involving Push Payments Gateway Service.

        :return: The sharing_group_code of this ReversefundspostPayload.
        :rtype: str
        """
        return self._sharing_group_code

    @sharing_group_code.setter
    def sharing_group_code(self, sharing_group_code):
        """
        Sets the sharing_group_code of this ReversefundspostPayload.
        This field is optionally used by Push Payments Gateway participants (merchants and acquirers) to specify the network access priority.<br><br>Refer to <a href=\"/request_response_codes#network_id_and_sharing_group_code\">Sharing Group Code</a><br><br><b>Note:</b><br>Supported only in US for domestic transactions involving Push Payments Gateway Service.

        :param sharing_group_code: The sharing_group_code of this ReversefundspostPayload.
        :type: str
        """

        self._sharing_group_code = sharing_group_code

    @property
    def acquirer_country_code(self):
        """
        Gets the acquirer_country_code of this ReversefundspostPayload.
        Use a 3-digit numeric country code for the country of the BIN under which your Visa Direct solution is registered. This must match the information provided during program enrollment.

        :return: The acquirer_country_code of this ReversefundspostPayload.
        :rtype: int
        """
        return self._acquirer_country_code

    @acquirer_country_code.setter
    def acquirer_country_code(self, acquirer_country_code):
        """
        Sets the acquirer_country_code of this ReversefundspostPayload.
        Use a 3-digit numeric country code for the country of the BIN under which your Visa Direct solution is registered. This must match the information provided during program enrollment.

        :param acquirer_country_code: The acquirer_country_code of this ReversefundspostPayload.
        :type: int
        """
        if acquirer_country_code is None:
            raise ValueError("Invalid value for `acquirer_country_code`, must not be `None`")

        self._acquirer_country_code = acquirer_country_code

    @property
    def systems_trace_audit_number(self):
        """
        Gets the systems_trace_audit_number of this ReversefundspostPayload.
        A unique value should be used for each API method. however, when passing the Account Funding Transaction Reversal (AFTR) method, this value must match the systemsTraceAuditNumber previously passed with the AFT method for the current transaction.

        :return: The systems_trace_audit_number of this ReversefundspostPayload.
        :rtype: int
        """
        return self._systems_trace_audit_number

    @systems_trace_audit_number.setter
    def systems_trace_audit_number(self, systems_trace_audit_number):
        """
        Sets the systems_trace_audit_number of this ReversefundspostPayload.
        A unique value should be used for each API method. however, when passing the Account Funding Transaction Reversal (AFTR) method, this value must match the systemsTraceAuditNumber previously passed with the AFT method for the current transaction.

        :param systems_trace_audit_number: The systems_trace_audit_number of this ReversefundspostPayload.
        :type: int
        """
        if systems_trace_audit_number is None:
            raise ValueError("Invalid value for `systems_trace_audit_number`, must not be `None`")

        self._systems_trace_audit_number = systems_trace_audit_number

    @property
    def original_data_elements(self):
        """
        Gets the original_data_elements of this ReversefundspostPayload.

        :return: The original_data_elements of this ReversefundspostPayload.
        :rtype: OriginalDataElements
        """
        return self._original_data_elements

    @original_data_elements.setter
    def original_data_elements(self, original_data_elements):
        """
        Sets the original_data_elements of this ReversefundspostPayload.

        :param original_data_elements: The original_data_elements of this ReversefundspostPayload.
        :type: OriginalDataElements
        """
        if original_data_elements is None:
            raise ValueError("Invalid value for `original_data_elements`, must not be `None`")

        self._original_data_elements = original_data_elements

    @property
    def member_comments(self):
        """
        Gets the member_comments of this ReversefundspostPayload.
        This field can be optionally used to send and receive comments by service providers. Issuers can optionally include new text in this field in the response. If the issuer does not include this field, Visa will inject the value from the request in the response and send it back to the service provider.

        :return: The member_comments of this ReversefundspostPayload.
        :rtype: str
        """
        return self._member_comments

    @member_comments.setter
    def member_comments(self, member_comments):
        """
        Sets the member_comments of this ReversefundspostPayload.
        This field can be optionally used to send and receive comments by service providers. Issuers can optionally include new text in this field in the response. If the issuer does not include this field, Visa will inject the value from the request in the response and send it back to the service provider.

        :param member_comments: The member_comments of this ReversefundspostPayload.
        :type: str
        """

        self._member_comments = member_comments

    @property
    def national_reimbursement_fee(self):
        """
        Gets the national_reimbursement_fee of this ReversefundspostPayload.
        When present, this field contains the IRF fees.

        :return: The national_reimbursement_fee of this ReversefundspostPayload.
        :rtype: float
        """
        return self._national_reimbursement_fee

    @national_reimbursement_fee.setter
    def national_reimbursement_fee(self, national_reimbursement_fee):
        """
        Sets the national_reimbursement_fee of this ReversefundspostPayload.
        When present, this field contains the IRF fees.

        :param national_reimbursement_fee: The national_reimbursement_fee of this ReversefundspostPayload.
        :type: float
        """

        self._national_reimbursement_fee = national_reimbursement_fee

    @property
    def fee_program_indicator(self):
        """
        Gets the fee_program_indicator of this ReversefundspostPayload.
        If present, a valid value is required. Spaces or special characters are not allowed.

        :return: The fee_program_indicator of this ReversefundspostPayload.
        :rtype: str
        """
        return self._fee_program_indicator

    @fee_program_indicator.setter
    def fee_program_indicator(self, fee_program_indicator):
        """
        Sets the fee_program_indicator of this ReversefundspostPayload.
        If present, a valid value is required. Spaces or special characters are not allowed.

        :param fee_program_indicator: The fee_program_indicator of this ReversefundspostPayload.
        :type: str
        """

        self._fee_program_indicator = fee_program_indicator

    @property
    def retrieval_reference_number(self):
        """
        Gets the retrieval_reference_number of this ReversefundspostPayload.
        A value used to tie together service calls related to a single financial transaction. When passing Account Funding Transaction (AFT) and Original Credit Transaction (OCT) methods, this value must differ between the two methods. When passing the Account Funding Transaction Reversal (AFTR) method, this value must match the retrievalReferenceNumber previously passed with the AFT method for this transaction.<br><br>Recommended Format: ydddhhnnnnnn<br><br>The first fours digits must be a valid yddd date in the Julian date format, where the first digit = 0-9 (last digit of current year) and the next three digits = 001-366 (number of the day in the year).<br><br>hh can be the two digit hour in a 24 hour clock (00-23) during which the transaction is performed.<br><br>nnnnnn can be the systemsTraceAuditNumber or any 6 digit number.

        :return: The retrieval_reference_number of this ReversefundspostPayload.
        :rtype: str
        """
        return self._retrieval_reference_number

    @retrieval_reference_number.setter
    def retrieval_reference_number(self, retrieval_reference_number):
        """
        Sets the retrieval_reference_number of this ReversefundspostPayload.
        A value used to tie together service calls related to a single financial transaction. When passing Account Funding Transaction (AFT) and Original Credit Transaction (OCT) methods, this value must differ between the two methods. When passing the Account Funding Transaction Reversal (AFTR) method, this value must match the retrievalReferenceNumber previously passed with the AFT method for this transaction.<br><br>Recommended Format: ydddhhnnnnnn<br><br>The first fours digits must be a valid yddd date in the Julian date format, where the first digit = 0-9 (last digit of current year) and the next three digits = 001-366 (number of the day in the year).<br><br>hh can be the two digit hour in a 24 hour clock (00-23) during which the transaction is performed.<br><br>nnnnnn can be the systemsTraceAuditNumber or any 6 digit number.

        :param retrieval_reference_number: The retrieval_reference_number of this ReversefundspostPayload.
        :type: str
        """
        if retrieval_reference_number is None:
            raise ValueError("Invalid value for `retrieval_reference_number`, must not be `None`")

        self._retrieval_reference_number = retrieval_reference_number

    @property
    def acquiring_bin(self):
        """
        Gets the acquiring_bin of this ReversefundspostPayload.
        The Bank Identification Number (BIN) under which your Visa Direct is registered. This must match the information provided during enrollment.

        :return: The acquiring_bin of this ReversefundspostPayload.
        :rtype: int
        """
        return self._acquiring_bin

    @acquiring_bin.setter
    def acquiring_bin(self, acquiring_bin):
        """
        Sets the acquiring_bin of this ReversefundspostPayload.
        The Bank Identification Number (BIN) under which your Visa Direct is registered. This must match the information provided during enrollment.

        :param acquiring_bin: The acquiring_bin of this ReversefundspostPayload.
        :type: int
        """
        if acquiring_bin is None:
            raise ValueError("Invalid value for `acquiring_bin`, must not be `None`")

        self._acquiring_bin = acquiring_bin

    @property
    def account_type(self):
        """
        Gets the account_type of this ReversefundspostPayload.
        This is used to identify the account type of the senderPrimaryAccountNumber in the request. Below are the possible values.<br><br> 00-Not applicable<br> 10-Saving account<br> 20-Checking account<br> 30-Credit card account<br> 40-Universal account<br><br>Default is set to \"00\" if not provided.

        :return: The account_type of this ReversefundspostPayload.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """
        Sets the account_type of this ReversefundspostPayload.
        This is used to identify the account type of the senderPrimaryAccountNumber in the request. Below are the possible values.<br><br> 00-Not applicable<br> 10-Saving account<br> 20-Checking account<br> 30-Credit card account<br> 40-Universal account<br><br>Default is set to \"00\" if not provided.

        :param account_type: The account_type of this ReversefundspostPayload.
        :type: str
        """

        self._account_type = account_type

    @property
    def merchant_pseudo_aba_number(self):
        """
        Gets the merchant_pseudo_aba_number of this ReversefundspostPayload.
        This is a number that uniquely identifies the originator when they sign up to send Push Payment Gateway transactions. On enrollment, an originator will get a single pseudo-value that is assigned by Visa. The other networks will assign their own unique values for the originator.<br><br><b>Note:</b><br>Supported only in US for domestic transactions involving Push Payments Gateway Service.

        :return: The merchant_pseudo_aba_number of this ReversefundspostPayload.
        :rtype: str
        """
        return self._merchant_pseudo_aba_number

    @merchant_pseudo_aba_number.setter
    def merchant_pseudo_aba_number(self, merchant_pseudo_aba_number):
        """
        Sets the merchant_pseudo_aba_number of this ReversefundspostPayload.
        This is a number that uniquely identifies the originator when they sign up to send Push Payment Gateway transactions. On enrollment, an originator will get a single pseudo-value that is assigned by Visa. The other networks will assign their own unique values for the originator.<br><br><b>Note:</b><br>Supported only in US for domestic transactions involving Push Payments Gateway Service.

        :param merchant_pseudo_aba_number: The merchant_pseudo_aba_number of this ReversefundspostPayload.
        :type: str
        """

        self._merchant_pseudo_aba_number = merchant_pseudo_aba_number

    @property
    def foreign_exchange_fee_transaction(self):
        """
        Gets the foreign_exchange_fee_transaction of this ReversefundspostPayload.
        When present, this field contains the sender's foreign exchange markup fee (markup above the wholesale or VisaNet exchange rate as assessed by the originator.Values in this field must be in the same currency and format as defined in the amount field(minimum value is 0).

        :return: The foreign_exchange_fee_transaction of this ReversefundspostPayload.
        :rtype: float
        """
        return self._foreign_exchange_fee_transaction

    @foreign_exchange_fee_transaction.setter
    def foreign_exchange_fee_transaction(self, foreign_exchange_fee_transaction):
        """
        Sets the foreign_exchange_fee_transaction of this ReversefundspostPayload.
        When present, this field contains the sender's foreign exchange markup fee (markup above the wholesale or VisaNet exchange rate as assessed by the originator.Values in this field must be in the same currency and format as defined in the amount field(minimum value is 0).

        :param foreign_exchange_fee_transaction: The foreign_exchange_fee_transaction of this ReversefundspostPayload.
        :type: float
        """

        self._foreign_exchange_fee_transaction = foreign_exchange_fee_transaction

    @property
    def point_of_service_data(self):
        """
        Gets the point_of_service_data of this ReversefundspostPayload.

        :return: The point_of_service_data of this ReversefundspostPayload.
        :rtype: PointOfServiceData
        """
        return self._point_of_service_data

    @point_of_service_data.setter
    def point_of_service_data(self, point_of_service_data):
        """
        Sets the point_of_service_data of this ReversefundspostPayload.

        :param point_of_service_data: The point_of_service_data of this ReversefundspostPayload.
        :type: PointOfServiceData
        """

        self._point_of_service_data = point_of_service_data

    @property
    def sender_primary_account_number(self):
        """
        Gets the sender_primary_account_number of this ReversefundspostPayload.
        The primary account number of the sender's account.

        :return: The sender_primary_account_number of this ReversefundspostPayload.
        :rtype: str
        """
        return self._sender_primary_account_number

    @sender_primary_account_number.setter
    def sender_primary_account_number(self, sender_primary_account_number):
        """
        Sets the sender_primary_account_number of this ReversefundspostPayload.
        The primary account number of the sender's account.

        :param sender_primary_account_number: The sender_primary_account_number of this ReversefundspostPayload.
        :type: str
        """
        if sender_primary_account_number is None:
            raise ValueError("Invalid value for `sender_primary_account_number`, must not be `None`")

        self._sender_primary_account_number = sender_primary_account_number

    @property
    def local_transaction_date_time(self):
        """
        Gets the local_transaction_date_time of this ReversefundspostPayload.
        

        :return: The local_transaction_date_time of this ReversefundspostPayload.
        :rtype: str
        """
        return self._local_transaction_date_time

    @local_transaction_date_time.setter
    def local_transaction_date_time(self, local_transaction_date_time):
        """
        Sets the local_transaction_date_time of this ReversefundspostPayload.
        

        :param local_transaction_date_time: The local_transaction_date_time of this ReversefundspostPayload.
        :type: str
        """
        if local_transaction_date_time is None:
            raise ValueError("Invalid value for `local_transaction_date_time`, must not be `None`")

        self._local_transaction_date_time = local_transaction_date_time

    @property
    def sender_card_expiry_date(self):
        """
        Gets the sender_card_expiry_date of this ReversefundspostPayload.
        The expiration date for the sender's Visa account number in senderPrimaryAccountNumber.

        :return: The sender_card_expiry_date of this ReversefundspostPayload.
        :rtype: str
        """
        return self._sender_card_expiry_date

    @sender_card_expiry_date.setter
    def sender_card_expiry_date(self, sender_card_expiry_date):
        """
        Sets the sender_card_expiry_date of this ReversefundspostPayload.
        The expiration date for the sender's Visa account number in senderPrimaryAccountNumber.

        :param sender_card_expiry_date: The sender_card_expiry_date of this ReversefundspostPayload.
        :type: str
        """

        self._sender_card_expiry_date = sender_card_expiry_date

    @property
    def amount(self):
        """
        Gets the amount of this ReversefundspostPayload.
        The total amount to be sent to the recipient.

        :return: The amount of this ReversefundspostPayload.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this ReversefundspostPayload.
        The total amount to be sent to the recipient.

        :param amount: The amount of this ReversefundspostPayload.
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def sender_currency_code(self):
        """
        Gets the sender_currency_code of this ReversefundspostPayload.
        Use a 3-character alpha or numeric currency code for currency of the sender.<br><br>Refer to <a href=\"/request_response_codes#iso_country_and_currency_codes\">ISO Codes</a>

        :return: The sender_currency_code of this ReversefundspostPayload.
        :rtype: str
        """
        return self._sender_currency_code

    @sender_currency_code.setter
    def sender_currency_code(self, sender_currency_code):
        """
        Sets the sender_currency_code of this ReversefundspostPayload.
        Use a 3-character alpha or numeric currency code for currency of the sender.<br><br>Refer to <a href=\"/request_response_codes#iso_country_and_currency_codes\">ISO Codes</a>

        :param sender_currency_code: The sender_currency_code of this ReversefundspostPayload.
        :type: str
        """
        if sender_currency_code is None:
            raise ValueError("Invalid value for `sender_currency_code`, must not be `None`")

        self._sender_currency_code = sender_currency_code

    @property
    def point_of_service_capability(self):
        """
        Gets the point_of_service_capability of this ReversefundspostPayload.

        :return: The point_of_service_capability of this ReversefundspostPayload.
        :rtype: PointOfServiceCapability
        """
        return self._point_of_service_capability

    @point_of_service_capability.setter
    def point_of_service_capability(self, point_of_service_capability):
        """
        Sets the point_of_service_capability of this ReversefundspostPayload.

        :param point_of_service_capability: The point_of_service_capability of this ReversefundspostPayload.
        :type: PointOfServiceCapability
        """

        self._point_of_service_capability = point_of_service_capability

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReversefundspostPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------