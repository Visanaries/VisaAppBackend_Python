# coding: utf-8

"""
    Query API

    The Transaction Query API can be used to determine the processing status of a transaction or to retreive the lifecycle of a transaction. This API can be used to check whether a PullFunds, PushFunds or ReverseFunds transaction processed successfully if received by Visa. This API could also be used to retrieve the detailed lifecycle or history of a transaction (e.g. original transaction, chargeback, chargeback reversal etc).

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TransactionQuerygetResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, business_application_id=None, settlement_date=None, transaction_date=None, retrieval_reference_number=None, currency_conversion_rate=None, processing_date=None, transaction_time=None, reason_code=None, transaction_identifier=None, network_id=None, amount=None, account_number_masked=None, amount_in_transaction_currency=None, product_identifier_platform_code=None, settlement_time=None, fee_program_indicator=None, transaction_currency_code=None, reason_code_value=None, card_acceptor=None, transaction_state_code=None, card_type=None, action_code=None, acquiring_bin=None, approval_code=None, reject_reason_code=None, reject_reason_text=None, fee_program_desc=None, systems_trace_audit_number=None, response_code=None, transaction_type=None, status_code=None):
        """
        TransactionQuerygetResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'business_application_id': 'str',
            'settlement_date': 'str',
            'transaction_date': 'str',
            'retrieval_reference_number': 'str',
            'currency_conversion_rate': 'str',
            'processing_date': 'str',
            'transaction_time': 'str',
            'reason_code': 'str',
            'transaction_identifier': 'str',
            'network_id': 'str',
            'amount': 'str',
            'account_number_masked': 'str',
            'amount_in_transaction_currency': 'str',
            'product_identifier_platform_code': 'str',
            'settlement_time': 'str',
            'fee_program_indicator': 'str',
            'transaction_currency_code': 'str',
            'reason_code_value': 'str',
            'card_acceptor': 'CardAcceptor',
            'transaction_state_code': 'str',
            'card_type': 'str',
            'action_code': 'str',
            'acquiring_bin': 'int',
            'approval_code': 'str',
            'reject_reason_code': 'int',
            'reject_reason_text': 'str',
            'fee_program_desc': 'str',
            'systems_trace_audit_number': 'str',
            'response_code': 'str',
            'transaction_type': 'str',
            'status_code': 'str'
        }

        self.attribute_map = {
            'business_application_id': 'businessApplicationId',
            'settlement_date': 'settlementDate',
            'transaction_date': 'transactionDate',
            'retrieval_reference_number': 'retrievalReferenceNumber',
            'currency_conversion_rate': 'currencyConversionRate',
            'processing_date': 'processingDate',
            'transaction_time': 'transactionTime',
            'reason_code': 'reasonCode',
            'transaction_identifier': 'transactionIdentifier',
            'network_id': 'networkId',
            'amount': 'amount',
            'account_number_masked': 'accountNumberMasked',
            'amount_in_transaction_currency': 'amountInTransactionCurrency',
            'product_identifier_platform_code': 'productIdentifierPlatformCode',
            'settlement_time': 'settlementTime',
            'fee_program_indicator': 'feeProgramIndicator',
            'transaction_currency_code': 'transactionCurrencyCode',
            'reason_code_value': 'reasonCodeValue',
            'card_acceptor': 'cardAcceptor',
            'transaction_state_code': 'transactionStateCode',
            'card_type': 'cardType',
            'action_code': 'actionCode',
            'acquiring_bin': 'acquiringBin',
            'approval_code': 'approvalCode',
            'reject_reason_code': 'rejectReasonCode',
            'reject_reason_text': 'rejectReasonText',
            'fee_program_desc': 'feeProgramDesc',
            'systems_trace_audit_number': 'systemsTraceAuditNumber',
            'response_code': 'responseCode',
            'transaction_type': 'transactionType',
            'status_code': 'statusCode'
        }

        self._business_application_id = business_application_id
        self._settlement_date = settlement_date
        self._transaction_date = transaction_date
        self._retrieval_reference_number = retrieval_reference_number
        self._currency_conversion_rate = currency_conversion_rate
        self._processing_date = processing_date
        self._transaction_time = transaction_time
        self._reason_code = reason_code
        self._transaction_identifier = transaction_identifier
        self._network_id = network_id
        self._amount = amount
        self._account_number_masked = account_number_masked
        self._amount_in_transaction_currency = amount_in_transaction_currency
        self._product_identifier_platform_code = product_identifier_platform_code
        self._settlement_time = settlement_time
        self._fee_program_indicator = fee_program_indicator
        self._transaction_currency_code = transaction_currency_code
        self._reason_code_value = reason_code_value
        self._card_acceptor = card_acceptor
        self._transaction_state_code = transaction_state_code
        self._card_type = card_type
        self._action_code = action_code
        self._acquiring_bin = acquiring_bin
        self._approval_code = approval_code
        self._reject_reason_code = reject_reason_code
        self._reject_reason_text = reject_reason_text
        self._fee_program_desc = fee_program_desc
        self._systems_trace_audit_number = systems_trace_audit_number
        self._response_code = response_code
        self._transaction_type = transaction_type
        self._status_code = status_code

    @property
    def business_application_id(self):
        """
        Gets the business_application_id of this TransactionQuerygetResponse.
        Business Application ID indicates to the type of Transaction that has taken place. <br/> Valid Values include* <br/> <ul> <li> AA - Account to Account </li> <li> BB - Business to Business </li> <li> BI - Money Transfer (bank-initiated) </li> <li> CP - Card Bill Payment </li> </ul> <br/> For more information visit <a href=\"/request_response_codes#businessApplicationId\">Visa Developer Platform Documentation </a>

        :return: The business_application_id of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._business_application_id

    @business_application_id.setter
    def business_application_id(self, business_application_id):
        """
        Sets the business_application_id of this TransactionQuerygetResponse.
        Business Application ID indicates to the type of Transaction that has taken place. <br/> Valid Values include* <br/> <ul> <li> AA - Account to Account </li> <li> BB - Business to Business </li> <li> BI - Money Transfer (bank-initiated) </li> <li> CP - Card Bill Payment </li> </ul> <br/> For more information visit <a href=\"/request_response_codes#businessApplicationId\">Visa Developer Platform Documentation </a>

        :param business_application_id: The business_application_id of this TransactionQuerygetResponse.
        :type: str
        """

        self._business_application_id = business_application_id

    @property
    def settlement_date(self):
        """
        Gets the settlement_date of this TransactionQuerygetResponse.
        This field contains the settlement date for the transaction processed by VisaNet.

        :return: The settlement_date of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._settlement_date

    @settlement_date.setter
    def settlement_date(self, settlement_date):
        """
        Sets the settlement_date of this TransactionQuerygetResponse.
        This field contains the settlement date for the transaction processed by VisaNet.

        :param settlement_date: The settlement_date of this TransactionQuerygetResponse.
        :type: str
        """

        self._settlement_date = settlement_date

    @property
    def transaction_date(self):
        """
        Gets the transaction_date of this TransactionQuerygetResponse.
        The date the transaction was submitted to VisaNet.

        :return: The transaction_date of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """
        Sets the transaction_date of this TransactionQuerygetResponse.
        The date the transaction was submitted to VisaNet.

        :param transaction_date: The transaction_date of this TransactionQuerygetResponse.
        :type: str
        """
        if transaction_date is None:
            raise ValueError("Invalid value for `transaction_date`, must not be `None`")

        self._transaction_date = transaction_date

    @property
    def retrieval_reference_number(self):
        """
        Gets the retrieval_reference_number of this TransactionQuerygetResponse.
        A value used to tie together service calls related to a single financial transaction. This is the same as retrievalReferenceNumber previously sent in the request for PullFunds, PushFunds or ReverseFunds transaction API calls.

        :return: The retrieval_reference_number of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._retrieval_reference_number

    @retrieval_reference_number.setter
    def retrieval_reference_number(self, retrieval_reference_number):
        """
        Sets the retrieval_reference_number of this TransactionQuerygetResponse.
        A value used to tie together service calls related to a single financial transaction. This is the same as retrievalReferenceNumber previously sent in the request for PullFunds, PushFunds or ReverseFunds transaction API calls.

        :param retrieval_reference_number: The retrieval_reference_number of this TransactionQuerygetResponse.
        :type: str
        """
        if retrieval_reference_number is None:
            raise ValueError("Invalid value for `retrieval_reference_number`, must not be `None`")

        self._retrieval_reference_number = retrieval_reference_number

    @property
    def currency_conversion_rate(self):
        """
        Gets the currency_conversion_rate of this TransactionQuerygetResponse.
        Currency conversion rate taken place at Acquirer's end.

        :return: The currency_conversion_rate of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._currency_conversion_rate

    @currency_conversion_rate.setter
    def currency_conversion_rate(self, currency_conversion_rate):
        """
        Sets the currency_conversion_rate of this TransactionQuerygetResponse.
        Currency conversion rate taken place at Acquirer's end.

        :param currency_conversion_rate: The currency_conversion_rate of this TransactionQuerygetResponse.
        :type: str
        """

        self._currency_conversion_rate = currency_conversion_rate

    @property
    def processing_date(self):
        """
        Gets the processing_date of this TransactionQuerygetResponse.
        The date on which VisaNet created the log (record).

        :return: The processing_date of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._processing_date

    @processing_date.setter
    def processing_date(self, processing_date):
        """
        Sets the processing_date of this TransactionQuerygetResponse.
        The date on which VisaNet created the log (record).

        :param processing_date: The processing_date of this TransactionQuerygetResponse.
        :type: str
        """

        self._processing_date = processing_date

    @property
    def transaction_time(self):
        """
        Gets the transaction_time of this TransactionQuerygetResponse.
        The time the transaction was submitted to VisaNet.

        :return: The transaction_time of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._transaction_time

    @transaction_time.setter
    def transaction_time(self, transaction_time):
        """
        Sets the transaction_time of this TransactionQuerygetResponse.
        The time the transaction was submitted to VisaNet.

        :param transaction_time: The transaction_time of this TransactionQuerygetResponse.
        :type: str
        """
        if transaction_time is None:
            raise ValueError("Invalid value for `transaction_time`, must not be `None`")

        self._transaction_time = transaction_time

    @property
    def reason_code(self):
        """
        Gets the reason_code of this TransactionQuerygetResponse.
        The reason code description contains the reason explaining:<ul><li> An acquirer-generated advice, reversal, cancellation, adjustment, chargeback (validation request or advice).</li><li> A chargeback reversal, representment (validation request or advice). </li> etc.

        :return: The reason_code of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """
        Sets the reason_code of this TransactionQuerygetResponse.
        The reason code description contains the reason explaining:<ul><li> An acquirer-generated advice, reversal, cancellation, adjustment, chargeback (validation request or advice).</li><li> A chargeback reversal, representment (validation request or advice). </li> etc.

        :param reason_code: The reason_code of this TransactionQuerygetResponse.
        :type: str
        """

        self._reason_code = reason_code

    @property
    def transaction_identifier(self):
        """
        Gets the transaction_identifier of this TransactionQuerygetResponse.
        The VisaNet reference number for the transaction. This is the same transactionIdentifier previously received in the response for PullFunds, PushFunds or ReverseFunds transaction API calls.

        :return: The transaction_identifier of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._transaction_identifier

    @transaction_identifier.setter
    def transaction_identifier(self, transaction_identifier):
        """
        Sets the transaction_identifier of this TransactionQuerygetResponse.
        The VisaNet reference number for the transaction. This is the same transactionIdentifier previously received in the response for PullFunds, PushFunds or ReverseFunds transaction API calls.

        :param transaction_identifier: The transaction_identifier of this TransactionQuerygetResponse.
        :type: str
        """
        if transaction_identifier is None:
            raise ValueError("Invalid value for `transaction_identifier`, must not be `None`")

        self._transaction_identifier = transaction_identifier

    @property
    def network_id(self):
        """
        Gets the network_id of this TransactionQuerygetResponse.
        Network ID on which the transaction was performed. <br/> Takes the format of 000x where x is a number. <br/> Valid Values include* <br/> 0002 - Visa/PLUS <br/> 0016 - Maestro <br/> 0003 - Interlink <br/> 0008,0010,0011,0012,0015 - Star

        :return: The network_id of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """
        Sets the network_id of this TransactionQuerygetResponse.
        Network ID on which the transaction was performed. <br/> Takes the format of 000x where x is a number. <br/> Valid Values include* <br/> 0002 - Visa/PLUS <br/> 0016 - Maestro <br/> 0003 - Interlink <br/> 0008,0010,0011,0012,0015 - Star

        :param network_id: The network_id of this TransactionQuerygetResponse.
        :type: str
        """

        self._network_id = network_id

    @property
    def amount(self):
        """
        Gets the amount of this TransactionQuerygetResponse.
        This is the transaction amount expressed in U.S. Dollars. Derived internally.

        :return: The amount of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this TransactionQuerygetResponse.
        This is the transaction amount expressed in U.S. Dollars. Derived internally.

        :param amount: The amount of this TransactionQuerygetResponse.
        :type: str
        """

        self._amount = amount

    @property
    def account_number_masked(self):
        """
        Gets the account_number_masked of this TransactionQuerygetResponse.
        Contains the masked PAN number. Populated from the primary account number (PAN) contained in the original authorization request.

        :return: The account_number_masked of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._account_number_masked

    @account_number_masked.setter
    def account_number_masked(self, account_number_masked):
        """
        Sets the account_number_masked of this TransactionQuerygetResponse.
        Contains the masked PAN number. Populated from the primary account number (PAN) contained in the original authorization request.

        :param account_number_masked: The account_number_masked of this TransactionQuerygetResponse.
        :type: str
        """

        self._account_number_masked = account_number_masked

    @property
    def amount_in_transaction_currency(self):
        """
        Gets the amount_in_transaction_currency of this TransactionQuerygetResponse.
        This is the transaction amount in original transaction currency.

        :return: The amount_in_transaction_currency of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._amount_in_transaction_currency

    @amount_in_transaction_currency.setter
    def amount_in_transaction_currency(self, amount_in_transaction_currency):
        """
        Sets the amount_in_transaction_currency of this TransactionQuerygetResponse.
        This is the transaction amount in original transaction currency.

        :param amount_in_transaction_currency: The amount_in_transaction_currency of this TransactionQuerygetResponse.
        :type: str
        """

        self._amount_in_transaction_currency = amount_in_transaction_currency

    @property
    def product_identifier_platform_code(self):
        """
        Gets the product_identifier_platform_code of this TransactionQuerygetResponse.
        Product Identifier Platform Code. <br/> Valid Values include* <br/> BZ - Business <br/> CN - Consumer <br/> CO - Commercial <br/> GV - Government

        :return: The product_identifier_platform_code of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._product_identifier_platform_code

    @product_identifier_platform_code.setter
    def product_identifier_platform_code(self, product_identifier_platform_code):
        """
        Sets the product_identifier_platform_code of this TransactionQuerygetResponse.
        Product Identifier Platform Code. <br/> Valid Values include* <br/> BZ - Business <br/> CN - Consumer <br/> CO - Commercial <br/> GV - Government

        :param product_identifier_platform_code: The product_identifier_platform_code of this TransactionQuerygetResponse.
        :type: str
        """

        self._product_identifier_platform_code = product_identifier_platform_code

    @property
    def settlement_time(self):
        """
        Gets the settlement_time of this TransactionQuerygetResponse.
        This field contains the settlement time for the transaction processed by VisaNet. <br/> Note: The exact time of settlement may vary and is indicative only.

        :return: The settlement_time of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._settlement_time

    @settlement_time.setter
    def settlement_time(self, settlement_time):
        """
        Sets the settlement_time of this TransactionQuerygetResponse.
        This field contains the settlement time for the transaction processed by VisaNet. <br/> Note: The exact time of settlement may vary and is indicative only.

        :param settlement_time: The settlement_time of this TransactionQuerygetResponse.
        :type: str
        """

        self._settlement_time = settlement_time

    @property
    def fee_program_indicator(self):
        """
        Gets the fee_program_indicator of this TransactionQuerygetResponse.
        This field contains an interchange reimbursement fee program indicator (FPI), which is used in assessing the fee amount applied to financial transactions that were originally sent.

        :return: The fee_program_indicator of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._fee_program_indicator

    @fee_program_indicator.setter
    def fee_program_indicator(self, fee_program_indicator):
        """
        Sets the fee_program_indicator of this TransactionQuerygetResponse.
        This field contains an interchange reimbursement fee program indicator (FPI), which is used in assessing the fee amount applied to financial transactions that were originally sent.

        :param fee_program_indicator: The fee_program_indicator of this TransactionQuerygetResponse.
        :type: str
        """

        self._fee_program_indicator = fee_program_indicator

    @property
    def transaction_currency_code(self):
        """
        Gets the transaction_currency_code of this TransactionQuerygetResponse.
        3-character numeric currency code of the transaction.

        :return: The transaction_currency_code of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._transaction_currency_code

    @transaction_currency_code.setter
    def transaction_currency_code(self, transaction_currency_code):
        """
        Sets the transaction_currency_code of this TransactionQuerygetResponse.
        3-character numeric currency code of the transaction.

        :param transaction_currency_code: The transaction_currency_code of this TransactionQuerygetResponse.
        :type: str
        """

        self._transaction_currency_code = transaction_currency_code

    @property
    def reason_code_value(self):
        """
        Gets the reason_code_value of this TransactionQuerygetResponse.
        While reasonCode property explains the reason in details, reasonCodeValue property is a four digit number that corelates to reasonCode. <br/> Valid Values include* <br/> 0000 - NOT APPLICABLE <br/> 0083 - FRAUD; CARD ABSENT ENVIRONMENT

        :return: The reason_code_value of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._reason_code_value

    @reason_code_value.setter
    def reason_code_value(self, reason_code_value):
        """
        Sets the reason_code_value of this TransactionQuerygetResponse.
        While reasonCode property explains the reason in details, reasonCodeValue property is a four digit number that corelates to reasonCode. <br/> Valid Values include* <br/> 0000 - NOT APPLICABLE <br/> 0083 - FRAUD; CARD ABSENT ENVIRONMENT

        :param reason_code_value: The reason_code_value of this TransactionQuerygetResponse.
        :type: str
        """

        self._reason_code_value = reason_code_value

    @property
    def card_acceptor(self):
        """
        Gets the card_acceptor of this TransactionQuerygetResponse.

        :return: The card_acceptor of this TransactionQuerygetResponse.
        :rtype: CardAcceptor
        """
        return self._card_acceptor

    @card_acceptor.setter
    def card_acceptor(self, card_acceptor):
        """
        Sets the card_acceptor of this TransactionQuerygetResponse.

        :param card_acceptor: The card_acceptor of this TransactionQuerygetResponse.
        :type: CardAcceptor
        """

        self._card_acceptor = card_acceptor

    @property
    def transaction_state_code(self):
        """
        Gets the transaction_state_code of this TransactionQuerygetResponse.
        Code explaining the state of the transaction.

        :return: The transaction_state_code of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._transaction_state_code

    @transaction_state_code.setter
    def transaction_state_code(self, transaction_state_code):
        """
        Sets the transaction_state_code of this TransactionQuerygetResponse.
        Code explaining the state of the transaction.

        :param transaction_state_code: The transaction_state_code of this TransactionQuerygetResponse.
        :type: str
        """

        self._transaction_state_code = transaction_state_code

    @property
    def card_type(self):
        """
        Gets the card_type of this TransactionQuerygetResponse.
        Product type of the card on which the transaction is performed. <br/> Valid Values include* <br/> Credit  <br/> Debit <br/> Prepaid

        :return: The card_type of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """
        Sets the card_type of this TransactionQuerygetResponse.
        Product type of the card on which the transaction is performed. <br/> Valid Values include* <br/> Credit  <br/> Debit <br/> Prepaid

        :param card_type: The card_type of this TransactionQuerygetResponse.
        :type: str
        """

        self._card_type = card_type

    @property
    def action_code(self):
        """
        Gets the action_code of this TransactionQuerygetResponse.
        The results of the transaction request <br/> Refer to <a href='/request_response_codes#action_code'>actionCode</a><br/> Note: The VisaNet Response Code for the transaction

        :return: The action_code of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._action_code

    @action_code.setter
    def action_code(self, action_code):
        """
        Sets the action_code of this TransactionQuerygetResponse.
        The results of the transaction request <br/> Refer to <a href='/request_response_codes#action_code'>actionCode</a><br/> Note: The VisaNet Response Code for the transaction

        :param action_code: The action_code of this TransactionQuerygetResponse.
        :type: str
        """
        if action_code is None:
            raise ValueError("Invalid value for `action_code`, must not be `None`")

        self._action_code = action_code

    @property
    def acquiring_bin(self):
        """
        Gets the acquiring_bin of this TransactionQuerygetResponse.
        The Bank Identification Number (BIN) under which the Visa Direct solution is registered. This must match the information provided during enrollment.

        :return: The acquiring_bin of this TransactionQuerygetResponse.
        :rtype: int
        """
        return self._acquiring_bin

    @acquiring_bin.setter
    def acquiring_bin(self, acquiring_bin):
        """
        Sets the acquiring_bin of this TransactionQuerygetResponse.
        The Bank Identification Number (BIN) under which the Visa Direct solution is registered. This must match the information provided during enrollment.

        :param acquiring_bin: The acquiring_bin of this TransactionQuerygetResponse.
        :type: int
        """
        if acquiring_bin is None:
            raise ValueError("Invalid value for `acquiring_bin`, must not be `None`")

        self._acquiring_bin = acquiring_bin

    @property
    def approval_code(self):
        """
        Gets the approval_code of this TransactionQuerygetResponse.
        The authorization code from the issuer. A code provided by the issuer (or VIP STIP) when a transaction is approved, or a no reason to decline code is provided.

        :return: The approval_code of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._approval_code

    @approval_code.setter
    def approval_code(self, approval_code):
        """
        Sets the approval_code of this TransactionQuerygetResponse.
        The authorization code from the issuer. A code provided by the issuer (or VIP STIP) when a transaction is approved, or a no reason to decline code is provided.

        :param approval_code: The approval_code of this TransactionQuerygetResponse.
        :type: str
        """
        if approval_code is None:
            raise ValueError("Invalid value for `approval_code`, must not be `None`")

        self._approval_code = approval_code

    @property
    def reject_reason_code(self):
        """
        Gets the reject_reason_code of this TransactionQuerygetResponse.
        This field contains reject reason code if the the transaction was rejected by VisaNet. <br/> A positive number not greater than 9999.

        :return: The reject_reason_code of this TransactionQuerygetResponse.
        :rtype: int
        """
        return self._reject_reason_code

    @reject_reason_code.setter
    def reject_reason_code(self, reject_reason_code):
        """
        Sets the reject_reason_code of this TransactionQuerygetResponse.
        This field contains reject reason code if the the transaction was rejected by VisaNet. <br/> A positive number not greater than 9999.

        :param reject_reason_code: The reject_reason_code of this TransactionQuerygetResponse.
        :type: int
        """

        self._reject_reason_code = reject_reason_code

    @property
    def reject_reason_text(self):
        """
        Gets the reject_reason_text of this TransactionQuerygetResponse.
        This field contains reject reason text if the transaction was rejected by VisaNet.

        :return: The reject_reason_text of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._reject_reason_text

    @reject_reason_text.setter
    def reject_reason_text(self, reject_reason_text):
        """
        Sets the reject_reason_text of this TransactionQuerygetResponse.
        This field contains reject reason text if the transaction was rejected by VisaNet.

        :param reject_reason_text: The reject_reason_text of this TransactionQuerygetResponse.
        :type: str
        """

        self._reject_reason_text = reject_reason_text

    @property
    def fee_program_desc(self):
        """
        Gets the fee_program_desc of this TransactionQuerygetResponse.
        Short text description of the Acquirer IRF (Interchange Reimbursement Fee) indicator. (Interchange fees are paid by issuers and acquirers to each other for transactions entered into interchange and their reversals).

        :return: The fee_program_desc of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._fee_program_desc

    @fee_program_desc.setter
    def fee_program_desc(self, fee_program_desc):
        """
        Sets the fee_program_desc of this TransactionQuerygetResponse.
        Short text description of the Acquirer IRF (Interchange Reimbursement Fee) indicator. (Interchange fees are paid by issuers and acquirers to each other for transactions entered into interchange and their reversals).

        :param fee_program_desc: The fee_program_desc of this TransactionQuerygetResponse.
        :type: str
        """

        self._fee_program_desc = fee_program_desc

    @property
    def systems_trace_audit_number(self):
        """
        Gets the systems_trace_audit_number of this TransactionQuerygetResponse.
        A number assigned by the message initiator that uniquely identifies a transaction. This is the same as systemsTraceAuditNumber previously sent in the request for the PullFunds, PushFunds or ReverseFunds transaction API calls.

        :return: The systems_trace_audit_number of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._systems_trace_audit_number

    @systems_trace_audit_number.setter
    def systems_trace_audit_number(self, systems_trace_audit_number):
        """
        Sets the systems_trace_audit_number of this TransactionQuerygetResponse.
        A number assigned by the message initiator that uniquely identifies a transaction. This is the same as systemsTraceAuditNumber previously sent in the request for the PullFunds, PushFunds or ReverseFunds transaction API calls.

        :param systems_trace_audit_number: The systems_trace_audit_number of this TransactionQuerygetResponse.
        :type: str
        """
        if systems_trace_audit_number is None:
            raise ValueError("Invalid value for `systems_trace_audit_number`, must not be `None`")

        self._systems_trace_audit_number = systems_trace_audit_number

    @property
    def response_code(self):
        """
        Gets the response_code of this TransactionQuerygetResponse.
        The source for the response; typically, either the recipient issuer or a Visa system. <br/> Refer to <a href='/request_response_codes#response_code'>responseCode</a><br/> Note: The VisaNet Response Source for the transaction

        :return: The response_code of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """
        Sets the response_code of this TransactionQuerygetResponse.
        The source for the response; typically, either the recipient issuer or a Visa system. <br/> Refer to <a href='/request_response_codes#response_code'>responseCode</a><br/> Note: The VisaNet Response Source for the transaction

        :param response_code: The response_code of this TransactionQuerygetResponse.
        :type: str
        """
        if response_code is None:
            raise ValueError("Invalid value for `response_code`, must not be `None`")

        self._response_code = response_code

    @property
    def transaction_type(self):
        """
        Gets the transaction_type of this TransactionQuerygetResponse.
        Identifies the type of transaction originally sent <br/> Valid Values include*: <br/>  CRED VOUCHER <br/> CRED REVERSAL <br/> CRED CHGBK <br/> CRED CHGBK REVERSAL <br/> SALES DRAFT <br/> SALES CHGBK <br/> SALES REVERSAL <br/> CASH DISBURSEMT <br/> CASH CHGBK

        :return: The transaction_type of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """
        Sets the transaction_type of this TransactionQuerygetResponse.
        Identifies the type of transaction originally sent <br/> Valid Values include*: <br/>  CRED VOUCHER <br/> CRED REVERSAL <br/> CRED CHGBK <br/> CRED CHGBK REVERSAL <br/> SALES DRAFT <br/> SALES CHGBK <br/> SALES REVERSAL <br/> CASH DISBURSEMT <br/> CASH CHGBK

        :param transaction_type: The transaction_type of this TransactionQuerygetResponse.
        :type: str
        """
        if transaction_type is None:
            raise ValueError("Invalid value for `transaction_type`, must not be `None`")

        self._transaction_type = transaction_type

    @property
    def status_code(self):
        """
        Gets the status_code of this TransactionQuerygetResponse.
        Specifies status of the transaction processing. <br/> Valid values are <ul> <li>COMPLETED - Transaction was processed by Visa </li> <li> IN_PROGRESS - Transaction is in progress, being processed by Visa </li> <li> FAILED - Transaction was received & rejected by Visa</li></ul>

        :return: The status_code of this TransactionQuerygetResponse.
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """
        Sets the status_code of this TransactionQuerygetResponse.
        Specifies status of the transaction processing. <br/> Valid values are <ul> <li>COMPLETED - Transaction was processed by Visa </li> <li> IN_PROGRESS - Transaction is in progress, being processed by Visa </li> <li> FAILED - Transaction was received & rejected by Visa</li></ul>

        :param status_code: The status_code of this TransactionQuerygetResponse.
        :type: str
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")

        self._status_code = status_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TransactionQuerygetResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------