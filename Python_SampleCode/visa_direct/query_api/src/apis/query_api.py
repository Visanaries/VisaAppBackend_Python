# coding: utf-8

"""
    Query API

    The Transaction Query API can be used to determine the processing status of a transaction or to retreive the lifecycle of a transaction. This API can be used to check whether a PullFunds, PushFunds or ReverseFunds transaction processed successfully if received by Visa. This API could also be used to retrieve the detailed lifecycle or history of a transaction (e.g. original transaction, chargeback, chargeback reversal etc).

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re
import json

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class QueryApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()

        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def gettransaction_query(self, acquiring_bin, **kwargs):
        """
        The Transaction Query API can be used to determine the processing status of a transaction or to retreive the lifecycle of a transaction. This API can be used to check whether a PullFunds, PushFunds or ReverseFunds transaction processed successfully if received by Visa. This API could also be used to retrieve the detailed lifecycle or history of a transaction (e.g. original transaction, chargeback, chargeback reversal etc).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gettransaction_query(acquiring_bin, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str acquiring_bin: The Bank Identification Number (BIN) under which the Visa Direct solution is registered. This must match the information provided during enrollment. (required)
        :param str stan: A number assigned by the message initiator that uniquely identifies a transaction. This is the same as systemsTraceAuditNumber previously sent in the request for the PullFunds, PushFunds or ReverseFunds transaction API calls. <br/> <b>Note: When <i>transactionIdentifier</i> is  not used as a query parameter, this parameter must be included along with <i>rrn</i> as query parameters.</b><br/>e.g.:/transactionquery?acquiringBIN=408999&stan=351480&rrn=221917871070
        :param str rrn: A value used to tie together service calls related to a single financial transaction. This is the same as retrievalReferenceNumber previously sent in the request for PullFunds, PushFunds or ReverseFunds transaction API calls. <br/> <b>Note: When <i>transactionIdentifier</i> is  not used as a query parameter, this parameter must be included along with <i>stan</i> as query parameters.</b><br/>e.g.:/transactionquery?acquiringBIN=408999&stan=351480&rrn=221917871070
        :param str transaction_identifier: The VisaNet reference number for the transaction. This is the same transactionIdentifier previously received in the response for PullFunds, PushFunds or ReverseFunds transaction API calls. <br/> <b>Note: When <i>stan</i> and <i>rrn</i> parameters combination is not used as query parameters, this parameter must be included as a query parameter.</b><br/>e.g.:/transactionquery?acquiringBIN=408999&transactionIdentifier=234234322342343
        :param str caid: An identifier for the card acceptor. This is the same as cardAcceptor.idCode previously sent in the request for PullFunds, PushFunds or ReverseFunds transaction API calls.
        :param str transaction_start_date: The start date for querying the transaction. Can be in previous 120 day range including today's date. Start date cannot be later than End date.
        :param str transaction_end_date: The end date for querying the transacton. Can be in previous 120 day range including today's date.
        :param str fields: Comma separated list of additional fields requestor would like in response e.g. amount, responseCode <br/> Note: <br/> If no fields parameter is specified, then following fields are returned by default in the response <br/> 1) statusCode <br/> 2) acquiringBin <br/> 3) actionCode <br/> 4) approvalCode <br/> 5) responseCode <br/> 6) transactionIdentifier <br/> 7) transactionType <br/> 8) retrievalReferenceNumber <br/> 9) systemsTraceAuditNumber <br/> 10) transactionDate <br/> 11) transactionTime
        :param str limit: Number of records to return, if there are multiple records. Useful for pagination. e.g. if there are 29 records, limit=10 returns 10 records at a time <br/> Note: <br/> 1) If no limit parameter is specified, then max of 10 records will be returned by default. <br/> 2) A header value x-pagination=true will be returned if there are more than 10 records, so that you can query with offset and limit parameters to get the next set of records.
        :param str offset: Starting record number, from where to return records. Useful for pagination. e.g. if offset =11 and limit =10, then records 11 thru 20 will be returned.
        :return: TransactionQuerygetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.gettransaction_query_with_http_info(acquiring_bin, **kwargs)
        else:
            (data) = self.gettransaction_query_with_http_info(acquiring_bin, **kwargs)
            return data

    def gettransaction_query_with_http_info(self, acquiring_bin, **kwargs):
        """
        The Transaction Query API can be used to determine the processing status of a transaction or to retreive the lifecycle of a transaction. This API can be used to check whether a PullFunds, PushFunds or ReverseFunds transaction processed successfully if received by Visa. This API could also be used to retrieve the detailed lifecycle or history of a transaction (e.g. original transaction, chargeback, chargeback reversal etc).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gettransaction_query_with_http_info(acquiring_bin, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str acquiring_bin: The Bank Identification Number (BIN) under which the Visa Direct solution is registered. This must match the information provided during enrollment. (required)
        :param str stan: A number assigned by the message initiator that uniquely identifies a transaction. This is the same as systemsTraceAuditNumber previously sent in the request for the PullFunds, PushFunds or ReverseFunds transaction API calls. <br/> <b>Note: When <i>transactionIdentifier</i> is  not used as a query parameter, this parameter must be included along with <i>rrn</i> as query parameters.</b><br/>e.g.:/transactionquery?acquiringBIN=408999&stan=351480&rrn=221917871070
        :param str rrn: A value used to tie together service calls related to a single financial transaction. This is the same as retrievalReferenceNumber previously sent in the request for PullFunds, PushFunds or ReverseFunds transaction API calls. <br/> <b>Note: When <i>transactionIdentifier</i> is  not used as a query parameter, this parameter must be included along with <i>stan</i> as query parameters.</b><br/>e.g.:/transactionquery?acquiringBIN=408999&stan=351480&rrn=221917871070
        :param str transaction_identifier: The VisaNet reference number for the transaction. This is the same transactionIdentifier previously received in the response for PullFunds, PushFunds or ReverseFunds transaction API calls. <br/> <b>Note: When <i>stan</i> and <i>rrn</i> parameters combination is not used as query parameters, this parameter must be included as a query parameter.</b><br/>e.g.:/transactionquery?acquiringBIN=408999&transactionIdentifier=234234322342343
        :param str caid: An identifier for the card acceptor. This is the same as cardAcceptor.idCode previously sent in the request for PullFunds, PushFunds or ReverseFunds transaction API calls.
        :param str transaction_start_date: The start date for querying the transaction. Can be in previous 120 day range including today's date. Start date cannot be later than End date.
        :param str transaction_end_date: The end date for querying the transacton. Can be in previous 120 day range including today's date.
        :param str fields: Comma separated list of additional fields requestor would like in response e.g. amount, responseCode <br/> Note: <br/> If no fields parameter is specified, then following fields are returned by default in the response <br/> 1) statusCode <br/> 2) acquiringBin <br/> 3) actionCode <br/> 4) approvalCode <br/> 5) responseCode <br/> 6) transactionIdentifier <br/> 7) transactionType <br/> 8) retrievalReferenceNumber <br/> 9) systemsTraceAuditNumber <br/> 10) transactionDate <br/> 11) transactionTime
        :param str limit: Number of records to return, if there are multiple records. Useful for pagination. e.g. if there are 29 records, limit=10 returns 10 records at a time <br/> Note: <br/> 1) If no limit parameter is specified, then max of 10 records will be returned by default. <br/> 2) A header value x-pagination=true will be returned if there are more than 10 records, so that you can query with offset and limit parameters to get the next set of records.
        :param str offset: Starting record number, from where to return records. Useful for pagination. e.g. if offset =11 and limit =10, then records 11 thru 20 will be returned.
        :return: TransactionQuerygetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['acquiring_bin', 'stan', 'rrn', 'transaction_identifier', 'caid', 'transaction_start_date', 'transaction_end_date', 'fields', 'limit', 'offset']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gettransaction_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'acquiring_bin' is set
        if ('acquiring_bin' not in params) or (params['acquiring_bin'] is None):
            raise ValueError("Missing the required parameter `acquiring_bin` when calling `gettransaction_query`")


        collection_formats = {}

        path = '/visadirect/v1/transactionquery'.replace('{format}', 'json')
        resource_path = 'transactionquery'
        path_params = {}

        query_params = {}
        if 'acquiring_bin' in params:
            query_params['acquiringBIN'] = params['acquiring_bin']
        if 'stan' in params:
            query_params['stan'] = params['stan']
        if 'rrn' in params:
            query_params['rrn'] = params['rrn']
        if 'transaction_identifier' in params:
            query_params['transactionIdentifier'] = params['transaction_identifier']
        if 'caid' in params:
            query_params['caid'] = params['caid']
        if 'transaction_start_date' in params:
            query_params['transactionStartDate'] = params['transaction_start_date']
        if 'transaction_end_date' in params:
            query_params['transactionEndDate'] = params['transaction_end_date']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TransactionQuerygetResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------