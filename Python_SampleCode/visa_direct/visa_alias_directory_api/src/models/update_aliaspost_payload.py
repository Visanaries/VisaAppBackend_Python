# coding: utf-8

"""
    Visa Alias Directory API

    Visa Alias Directory Services provide an ability to resolve an identifier (i.e. an alias) such as mobile phone number, email address, short name, or nickname, to a Visa card account (non-Visa soon) through APIs.  A Visa client can use these APIs to allow consumers provide an alias instead of inputting a card number (PAN) to use Visa Direct push payment services such as person-to-person (P2P) money transfers, mVisa merchant payments and mVisa agent deposits and withdrawals.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UpdateAliaspostPayload(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, recipient_middle_name=None, city=None, recipient_first_name=None, contact_phone_number=None, address1=None, new_guid=None, recipient_primary_account_number=None, consent_date_time=None, contact_email=None, alias=None, card_type=None, recipient_last_name=None, country=None, postal_code=None, issuer_name=None, guid=None, address2=None, alias_type=None):
        """
        UpdateAliaspostPayload - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'recipient_middle_name': 'str',
            'city': 'str',
            'recipient_first_name': 'str',
            'contact_phone_number': 'str',
            'address1': 'str',
            'new_guid': 'str',
            'recipient_primary_account_number': 'str',
            'consent_date_time': 'str',
            'contact_email': 'str',
            'alias': 'str',
            'card_type': 'str',
            'recipient_last_name': 'str',
            'country': 'str',
            'postal_code': 'str',
            'issuer_name': 'str',
            'guid': 'str',
            'address2': 'str',
            'alias_type': 'str'
        }

        self.attribute_map = {
            'recipient_middle_name': 'recipientMiddleName',
            'city': 'city',
            'recipient_first_name': 'recipientFirstName',
            'contact_phone_number': 'contactPhoneNumber',
            'address1': 'address1',
            'new_guid': 'newGuid',
            'recipient_primary_account_number': 'recipientPrimaryAccountNumber',
            'consent_date_time': 'consentDateTime',
            'contact_email': 'contactEmail',
            'alias': 'alias',
            'card_type': 'cardType',
            'recipient_last_name': 'recipientLastName',
            'country': 'country',
            'postal_code': 'postalCode',
            'issuer_name': 'issuerName',
            'guid': 'guid',
            'address2': 'address2',
            'alias_type': 'aliasType'
        }

        self._recipient_middle_name = recipient_middle_name
        self._city = city
        self._recipient_first_name = recipient_first_name
        self._contact_phone_number = contact_phone_number
        self._address1 = address1
        self._new_guid = new_guid
        self._recipient_primary_account_number = recipient_primary_account_number
        self._consent_date_time = consent_date_time
        self._contact_email = contact_email
        self._alias = alias
        self._card_type = card_type
        self._recipient_last_name = recipient_last_name
        self._country = country
        self._postal_code = postal_code
        self._issuer_name = issuer_name
        self._guid = guid
        self._address2 = address2
        self._alias_type = alias_type

    @property
    def recipient_middle_name(self):
        """
        Gets the recipient_middle_name of this UpdateAliaspostPayload.
        Consumer’s middle name.

        :return: The recipient_middle_name of this UpdateAliaspostPayload.
        :rtype: str
        """
        return self._recipient_middle_name

    @recipient_middle_name.setter
    def recipient_middle_name(self, recipient_middle_name):
        """
        Sets the recipient_middle_name of this UpdateAliaspostPayload.
        Consumer’s middle name.

        :param recipient_middle_name: The recipient_middle_name of this UpdateAliaspostPayload.
        :type: str
        """

        self._recipient_middle_name = recipient_middle_name

    @property
    def city(self):
        """
        Gets the city of this UpdateAliaspostPayload.
        Consumer's City

        :return: The city of this UpdateAliaspostPayload.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this UpdateAliaspostPayload.
        Consumer's City

        :param city: The city of this UpdateAliaspostPayload.
        :type: str
        """

        self._city = city

    @property
    def recipient_first_name(self):
        """
        Gets the recipient_first_name of this UpdateAliaspostPayload.
        Consumer’s first name.

        :return: The recipient_first_name of this UpdateAliaspostPayload.
        :rtype: str
        """
        return self._recipient_first_name

    @recipient_first_name.setter
    def recipient_first_name(self, recipient_first_name):
        """
        Sets the recipient_first_name of this UpdateAliaspostPayload.
        Consumer’s first name.

        :param recipient_first_name: The recipient_first_name of this UpdateAliaspostPayload.
        :type: str
        """

        self._recipient_first_name = recipient_first_name

    @property
    def contact_phone_number(self):
        """
        Gets the contact_phone_number of this UpdateAliaspostPayload.
        Consumer’s contact phone number for all communications.

        :return: The contact_phone_number of this UpdateAliaspostPayload.
        :rtype: str
        """
        return self._contact_phone_number

    @contact_phone_number.setter
    def contact_phone_number(self, contact_phone_number):
        """
        Sets the contact_phone_number of this UpdateAliaspostPayload.
        Consumer’s contact phone number for all communications.

        :param contact_phone_number: The contact_phone_number of this UpdateAliaspostPayload.
        :type: str
        """

        self._contact_phone_number = contact_phone_number

    @property
    def address1(self):
        """
        Gets the address1 of this UpdateAliaspostPayload.
        Address line 1.

        :return: The address1 of this UpdateAliaspostPayload.
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """
        Sets the address1 of this UpdateAliaspostPayload.
        Address line 1.

        :param address1: The address1 of this UpdateAliaspostPayload.
        :type: str
        """

        self._address1 = address1

    @property
    def new_guid(self):
        """
        Gets the new_guid of this UpdateAliaspostPayload.
        New unique identifier generated by issuer for a consumer if issuer would like to change the existing guid to a new value.

        :return: The new_guid of this UpdateAliaspostPayload.
        :rtype: str
        """
        return self._new_guid

    @new_guid.setter
    def new_guid(self, new_guid):
        """
        Sets the new_guid of this UpdateAliaspostPayload.
        New unique identifier generated by issuer for a consumer if issuer would like to change the existing guid to a new value.

        :param new_guid: The new_guid of this UpdateAliaspostPayload.
        :type: str
        """

        self._new_guid = new_guid

    @property
    def recipient_primary_account_number(self):
        """
        Gets the recipient_primary_account_number of this UpdateAliaspostPayload.
        Consumer's card number.

        :return: The recipient_primary_account_number of this UpdateAliaspostPayload.
        :rtype: str
        """
        return self._recipient_primary_account_number

    @recipient_primary_account_number.setter
    def recipient_primary_account_number(self, recipient_primary_account_number):
        """
        Sets the recipient_primary_account_number of this UpdateAliaspostPayload.
        Consumer's card number.

        :param recipient_primary_account_number: The recipient_primary_account_number of this UpdateAliaspostPayload.
        :type: str
        """

        self._recipient_primary_account_number = recipient_primary_account_number

    @property
    def consent_date_time(self):
        """
        Gets the consent_date_time of this UpdateAliaspostPayload.
        Date & time when consumer has provided their consent to issuer about the use of their personal personal data for VAD service. Format: YYYY-MM-DD hh:nn:ss.  Local date and time should be converted to Coordinated Universal Time (UTC) before submitting this value in API request.

        :return: The consent_date_time of this UpdateAliaspostPayload.
        :rtype: str
        """
        return self._consent_date_time

    @consent_date_time.setter
    def consent_date_time(self, consent_date_time):
        """
        Sets the consent_date_time of this UpdateAliaspostPayload.
        Date & time when consumer has provided their consent to issuer about the use of their personal personal data for VAD service. Format: YYYY-MM-DD hh:nn:ss.  Local date and time should be converted to Coordinated Universal Time (UTC) before submitting this value in API request.

        :param consent_date_time: The consent_date_time of this UpdateAliaspostPayload.
        :type: str
        """

        self._consent_date_time = consent_date_time

    @property
    def contact_email(self):
        """
        Gets the contact_email of this UpdateAliaspostPayload.
        Consumer’s contact email for all communications.

        :return: The contact_email of this UpdateAliaspostPayload.
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """
        Sets the contact_email of this UpdateAliaspostPayload.
        Consumer’s contact email for all communications.

        :param contact_email: The contact_email of this UpdateAliaspostPayload.
        :type: str
        """

        self._contact_email = contact_email

    @property
    def alias(self):
        """
        Gets the alias of this UpdateAliaspostPayload.
        This attribute contains the alias data, e.g. phone number, email address, etc. <br>If phone number is used for alias, this should be provided in accordance with ITU-T E.164 (2010) number structure.<br>Below are some examples of phone numbers with different country codes:<br><table><tr><td>Country</td><td>Country Code</td><td>Examples</td><tr><td>United States</td><td>1</td><td><b>1</b>650xxxxxxx</td></tr><tr><td>Russia</td><td>7</td><td><b>7</b>495xxxxxxx</td></tr><tr><td>United Kingdom</td><td>44</td><td><b>44</b>78xxxxxxxx</td></tr><tr><td>Singapore</td><td>65</td><td><b>65</b>9xxxxxxx</td></tr><tr><td>Hong Kong</td><td>852</td><td>8529xxxxxxx</td></tr><tr><td>Kenya</td><td>254</td><td><b>254</b>701xxxxxx</td></tr></table>

        :return: The alias of this UpdateAliaspostPayload.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """
        Sets the alias of this UpdateAliaspostPayload.
        This attribute contains the alias data, e.g. phone number, email address, etc. <br>If phone number is used for alias, this should be provided in accordance with ITU-T E.164 (2010) number structure.<br>Below are some examples of phone numbers with different country codes:<br><table><tr><td>Country</td><td>Country Code</td><td>Examples</td><tr><td>United States</td><td>1</td><td><b>1</b>650xxxxxxx</td></tr><tr><td>Russia</td><td>7</td><td><b>7</b>495xxxxxxx</td></tr><tr><td>United Kingdom</td><td>44</td><td><b>44</b>78xxxxxxxx</td></tr><tr><td>Singapore</td><td>65</td><td><b>65</b>9xxxxxxx</td></tr><tr><td>Hong Kong</td><td>852</td><td>8529xxxxxxx</td></tr><tr><td>Kenya</td><td>254</td><td><b>254</b>701xxxxxx</td></tr></table>

        :param alias: The alias of this UpdateAliaspostPayload.
        :type: str
        """

        self._alias = alias

    @property
    def card_type(self):
        """
        Gets the card_type of this UpdateAliaspostPayload.
        <b>Conditional</b>. Card type description. Reference to Field 62.23—Product ID of available card products. e.g. Visa Classic, Visa Platinum. <br>This field is required if recipientPrimaryAccountNumber is present in request

        :return: The card_type of this UpdateAliaspostPayload.
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """
        Sets the card_type of this UpdateAliaspostPayload.
        <b>Conditional</b>. Card type description. Reference to Field 62.23—Product ID of available card products. e.g. Visa Classic, Visa Platinum. <br>This field is required if recipientPrimaryAccountNumber is present in request

        :param card_type: The card_type of this UpdateAliaspostPayload.
        :type: str
        """

        self._card_type = card_type

    @property
    def recipient_last_name(self):
        """
        Gets the recipient_last_name of this UpdateAliaspostPayload.
        Last name of the consumer.

        :return: The recipient_last_name of this UpdateAliaspostPayload.
        :rtype: str
        """
        return self._recipient_last_name

    @recipient_last_name.setter
    def recipient_last_name(self, recipient_last_name):
        """
        Sets the recipient_last_name of this UpdateAliaspostPayload.
        Last name of the consumer.

        :param recipient_last_name: The recipient_last_name of this UpdateAliaspostPayload.
        :type: str
        """

        self._recipient_last_name = recipient_last_name

    @property
    def country(self):
        """
        Gets the country of this UpdateAliaspostPayload.
        Country code of the consumer as defined by ISO 3166.  ISO 3166 alpha-2 is recommended to be used if alias may be used for QR.

        :return: The country of this UpdateAliaspostPayload.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this UpdateAliaspostPayload.
        Country code of the consumer as defined by ISO 3166.  ISO 3166 alpha-2 is recommended to be used if alias may be used for QR.

        :param country: The country of this UpdateAliaspostPayload.
        :type: str
        """

        self._country = country

    @property
    def postal_code(self):
        """
        Gets the postal_code of this UpdateAliaspostPayload.
        Consumer’s postal code

        :return: The postal_code of this UpdateAliaspostPayload.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """
        Sets the postal_code of this UpdateAliaspostPayload.
        Consumer’s postal code

        :param postal_code: The postal_code of this UpdateAliaspostPayload.
        :type: str
        """

        self._postal_code = postal_code

    @property
    def issuer_name(self):
        """
        Gets the issuer_name of this UpdateAliaspostPayload.
        <b>Conditional</b>. This is the issuer name of recipient’s card.<br> This field is required if recipientPrimaryAccountNumber is present in request

        :return: The issuer_name of this UpdateAliaspostPayload.
        :rtype: str
        """
        return self._issuer_name

    @issuer_name.setter
    def issuer_name(self, issuer_name):
        """
        Sets the issuer_name of this UpdateAliaspostPayload.
        <b>Conditional</b>. This is the issuer name of recipient’s card.<br> This field is required if recipientPrimaryAccountNumber is present in request

        :param issuer_name: The issuer_name of this UpdateAliaspostPayload.
        :type: str
        """

        self._issuer_name = issuer_name

    @property
    def guid(self):
        """
        Gets the guid of this UpdateAliaspostPayload.
        This attribute is uniquely used by issuer to identify their customer (i.e. consumer cardholder).<br>Issuer may pass their existing unique identifier of a cardholder of their system to VAD as a guid.

        :return: The guid of this UpdateAliaspostPayload.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """
        Sets the guid of this UpdateAliaspostPayload.
        This attribute is uniquely used by issuer to identify their customer (i.e. consumer cardholder).<br>Issuer may pass their existing unique identifier of a cardholder of their system to VAD as a guid.

        :param guid: The guid of this UpdateAliaspostPayload.
        :type: str
        """
        if guid is None:
            raise ValueError("Invalid value for `guid`, must not be `None`")

        self._guid = guid

    @property
    def address2(self):
        """
        Gets the address2 of this UpdateAliaspostPayload.
        Address line 2.

        :return: The address2 of this UpdateAliaspostPayload.
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """
        Sets the address2 of this UpdateAliaspostPayload.
        Address line 2.

        :param address2: The address2 of this UpdateAliaspostPayload.
        :type: str
        """

        self._address2 = address2

    @property
    def alias_type(self):
        """
        Gets the alias_type of this UpdateAliaspostPayload.
        <b>Conditional</b>. <br>“01” – Phone number <br>“02” – email address

        :return: The alias_type of this UpdateAliaspostPayload.
        :rtype: str
        """
        return self._alias_type

    @alias_type.setter
    def alias_type(self, alias_type):
        """
        Sets the alias_type of this UpdateAliaspostPayload.
        <b>Conditional</b>. <br>“01” – Phone number <br>“02” – email address

        :param alias_type: The alias_type of this UpdateAliaspostPayload.
        :type: str
        """

        self._alias_type = alias_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UpdateAliaspostPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------