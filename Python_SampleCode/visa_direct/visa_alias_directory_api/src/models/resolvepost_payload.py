# coding: utf-8

"""
    Visa Alias Directory API

    Visa Alias Directory Services provide an ability to resolve an identifier (i.e. an alias) such as mobile phone number, email address, short name, or nickname, to a Visa card account (non-Visa soon) through APIs.  A Visa client can use these APIs to allow consumers provide an alias instead of inputting a card number (PAN) to use Visa Direct push payment services such as person-to-person (P2P) money transfers, mVisa merchant payments and mVisa agent deposits and withdrawals.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ResolvepostPayload(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, alias=None, business_application_id=None, account_look_up=None):
        """
        ResolvepostPayload - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'alias': 'str',
            'business_application_id': 'str',
            'account_look_up': 'str'
        }

        self.attribute_map = {
            'alias': 'alias',
            'business_application_id': 'businessApplicationId',
            'account_look_up': 'accountLookUp'
        }

        self._alias = alias
        self._business_application_id = business_application_id
        self._account_look_up = account_look_up

    @property
    def alias(self):
        """
        Gets the alias of this ResolvepostPayload.
        This attribute is used to retrieve recipient's Primary Account Number (PAN) of the card holder which can then be used in subsequent services such as Visa Direct. <br>This attribute can contain information of a mobile phone number, email address, merchant ID, agent ID, etc. <br>If phone number is used for alias, this should be provided in accordance with ITU-T E.164 (2010) number structure.  Below are some examples of phone numbers with different country codes:<br><table><tr><td>Country</td><td>Country Code</td><td>Examples</td><tr><td>United States</td><td>1</td><td><b>1</b>650xxxxxxx</td></tr><tr><td>Russia</td><td>7</td><td><b>7</b>495xxxxxxx</td></tr><tr><td>United Kingdom</td><td>44</td><td><b>44</b>78xxxxxxxx</td></tr><tr><td>Singapore</td><td>65</td><td><b>65</b>9xxxxxxx</td></tr><tr><td>Hong Kong</td><td>852</td><td>8529xxxxxxx</td></tr><tr><td>Kenya</td><td>254</td><td><b>254</b>701xxxxxx</td></tr></table>

        :return: The alias of this ResolvepostPayload.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """
        Sets the alias of this ResolvepostPayload.
        This attribute is used to retrieve recipient's Primary Account Number (PAN) of the card holder which can then be used in subsequent services such as Visa Direct. <br>This attribute can contain information of a mobile phone number, email address, merchant ID, agent ID, etc. <br>If phone number is used for alias, this should be provided in accordance with ITU-T E.164 (2010) number structure.  Below are some examples of phone numbers with different country codes:<br><table><tr><td>Country</td><td>Country Code</td><td>Examples</td><tr><td>United States</td><td>1</td><td><b>1</b>650xxxxxxx</td></tr><tr><td>Russia</td><td>7</td><td><b>7</b>495xxxxxxx</td></tr><tr><td>United Kingdom</td><td>44</td><td><b>44</b>78xxxxxxxx</td></tr><tr><td>Singapore</td><td>65</td><td><b>65</b>9xxxxxxx</td></tr><tr><td>Hong Kong</td><td>852</td><td>8529xxxxxxx</td></tr><tr><td>Kenya</td><td>254</td><td><b>254</b>701xxxxxx</td></tr></table>

        :param alias: The alias of this ResolvepostPayload.
        :type: str
        """
        if alias is None:
            raise ValueError("Invalid value for `alias`, must not be `None`")

        self._alias = alias

    @property
    def business_application_id(self):
        """
        Gets the business_application_id of this ResolvepostPayload.
        Used to identify program’s business application type for VisaNet transaction processing. It can be PP for Personal payment, MP for Merchant Payment, CO for Cash Out, CI for Cash In

        :return: The business_application_id of this ResolvepostPayload.
        :rtype: str
        """
        return self._business_application_id

    @business_application_id.setter
    def business_application_id(self, business_application_id):
        """
        Sets the business_application_id of this ResolvepostPayload.
        Used to identify program’s business application type for VisaNet transaction processing. It can be PP for Personal payment, MP for Merchant Payment, CO for Cash Out, CI for Cash In

        :param business_application_id: The business_application_id of this ResolvepostPayload.
        :type: str
        """
        if business_application_id is None:
            raise ValueError("Invalid value for `business_application_id`, must not be `None`")

        self._business_application_id = business_application_id

    @property
    def account_look_up(self):
        """
        Gets the account_look_up of this ResolvepostPayload.
        Retrieve the attributes that determine the key characteristics of a recipient payment account before initiating a funds transfer by providing the Primary Account Number (PAN).<br>If such attributes are required, set the value as 'Y'. Default is set as 'N'

        :return: The account_look_up of this ResolvepostPayload.
        :rtype: str
        """
        return self._account_look_up

    @account_look_up.setter
    def account_look_up(self, account_look_up):
        """
        Sets the account_look_up of this ResolvepostPayload.
        Retrieve the attributes that determine the key characteristics of a recipient payment account before initiating a funds transfer by providing the Primary Account Number (PAN).<br>If such attributes are required, set the value as 'Y'. Default is set as 'N'

        :param account_look_up: The account_look_up of this ResolvepostPayload.
        :type: str
        """

        self._account_look_up = account_look_up

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ResolvepostPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------