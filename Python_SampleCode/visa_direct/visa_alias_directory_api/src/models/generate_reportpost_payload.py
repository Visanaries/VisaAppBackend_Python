# coding: utf-8

"""
    Visa Alias Directory API

    Visa Alias Directory Services provide an ability to resolve an identifier (i.e. an alias) such as mobile phone number, email address, short name, or nickname, to a Visa card account (non-Visa soon) through APIs.  A Visa client can use these APIs to allow consumers provide an alias instead of inputting a card number (PAN) to use Visa Direct push payment services such as person-to-person (P2P) money transfers, mVisa merchant payments and mVisa agent deposits and withdrawals.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GenerateReportpostPayload(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, status=None, limit=None, type=None, report_start_date=None):
        """
        GenerateReportpostPayload - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'status': 'str',
            'limit': 'str',
            'type': 'str',
            'report_start_date': 'str'
        }

        self.attribute_map = {
            'status': 'status',
            'limit': 'limit',
            'type': 'type',
            'report_start_date': 'reportStartDate'
        }

        self._status = status
        self._limit = limit
        self._type = type
        self._report_start_date = report_start_date

    @property
    def status(self):
        """
        Gets the status of this GenerateReportpostPayload.
        If not provided, default report contains alias records with all valid status, i.e. <br>Consumer alias report will contain 'ACTIVE','INACTIVE' and 'DISABLED' records<br>Merchant alias report will contain 'ACTIVE' and 'DISABLED' records<br>Agent alias report will contain 'ACTIVE' and 'DISABLED' records. <br>Valid values for status are 'ACTIVE', 'INACTIVE' and 'DISABLED'.

        :return: The status of this GenerateReportpostPayload.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this GenerateReportpostPayload.
        If not provided, default report contains alias records with all valid status, i.e. <br>Consumer alias report will contain 'ACTIVE','INACTIVE' and 'DISABLED' records<br>Merchant alias report will contain 'ACTIVE' and 'DISABLED' records<br>Agent alias report will contain 'ACTIVE' and 'DISABLED' records. <br>Valid values for status are 'ACTIVE', 'INACTIVE' and 'DISABLED'.

        :param status: The status of this GenerateReportpostPayload.
        :type: str
        """

        self._status = status

    @property
    def limit(self):
        """
        Gets the limit of this GenerateReportpostPayload.
        Maximum number of records to be contained in each page of the report. <br>Default is set to a maximum of 20,000 records per page of a report. <br>Minimum value is 1, Maximum value is 20,000.

        :return: The limit of this GenerateReportpostPayload.
        :rtype: str
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """
        Sets the limit of this GenerateReportpostPayload.
        Maximum number of records to be contained in each page of the report. <br>Default is set to a maximum of 20,000 records per page of a report. <br>Minimum value is 1, Maximum value is 20,000.

        :param limit: The limit of this GenerateReportpostPayload.
        :type: str
        """

        self._limit = limit

    @property
    def type(self):
        """
        Gets the type of this GenerateReportpostPayload.
        Specify the type of alias records to be contained in the report. <br>Valid values are <b>CONSUMER</b>, <b>MERCHANT</b> and <b>AGENT</b>.

        :return: The type of this GenerateReportpostPayload.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this GenerateReportpostPayload.
        Specify the type of alias records to be contained in the report. <br>Valid values are <b>CONSUMER</b>, <b>MERCHANT</b> and <b>AGENT</b>.

        :param type: The type of this GenerateReportpostPayload.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def report_start_date(self):
        """
        Gets the report_start_date of this GenerateReportpostPayload.
        The start date of a report. Follows ISO 8601, date format YYYY-MM-DD. Example: 2019-01-01. <br>If not set, it will be default to the previous date (T-1).

        :return: The report_start_date of this GenerateReportpostPayload.
        :rtype: str
        """
        return self._report_start_date

    @report_start_date.setter
    def report_start_date(self, report_start_date):
        """
        Sets the report_start_date of this GenerateReportpostPayload.
        The start date of a report. Follows ISO 8601, date format YYYY-MM-DD. Example: 2019-01-01. <br>If not set, it will be default to the previous date (T-1).

        :param report_start_date: The report_start_date of this GenerateReportpostPayload.
        :type: str
        """

        self._report_start_date = report_start_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GenerateReportpostPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------