# coding: utf-8

"""
    Visa Alias Directory API

    Visa Alias Directory Services provide an ability to resolve an identifier (i.e. an alias) such as mobile phone number, email address, short name, or nickname, to a Visa card account (non-Visa soon) through APIs.  A Visa client can use these APIs to allow consumers provide an alias instead of inputting a card number (PAN) to use Visa Direct push payment services such as person-to-person (P2P) money transfers, mVisa merchant payments and mVisa agent deposits and withdrawals.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetMerchantAliasgetResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, city=None, merchant_category_code=None, payload_format_indicator=None, transaction_currency_code=None, recipient_name=None, email=None, country=None, phone=None, convenience_fee_amount=None, point_of_initiation_method=None, postal_code=None, tip_convenience_fee_indicator=None, convenience_fee_percentage=None, alias_id=None, merchant_id=None):
        """
        GetMerchantAliasgetResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'city': 'str',
            'merchant_category_code': 'str',
            'payload_format_indicator': 'str',
            'transaction_currency_code': 'str',
            'recipient_name': 'str',
            'email': 'str',
            'country': 'str',
            'phone': 'str',
            'convenience_fee_amount': 'str',
            'point_of_initiation_method': 'str',
            'postal_code': 'str',
            'tip_convenience_fee_indicator': 'str',
            'convenience_fee_percentage': 'str',
            'alias_id': 'str',
            'merchant_id': 'str'
        }

        self.attribute_map = {
            'city': 'city',
            'merchant_category_code': 'merchantCategoryCode',
            'payload_format_indicator': 'payloadFormatIndicator',
            'transaction_currency_code': 'transactionCurrencyCode',
            'recipient_name': 'recipientName',
            'email': 'email',
            'country': 'country',
            'phone': 'phone',
            'convenience_fee_amount': 'convenienceFeeAmount',
            'point_of_initiation_method': 'pointOfInitiationMethod',
            'postal_code': 'postalCode',
            'tip_convenience_fee_indicator': 'tipConvenienceFeeIndicator',
            'convenience_fee_percentage': 'convenienceFeePercentage',
            'alias_id': 'aliasId',
            'merchant_id': 'merchantId'
        }

        self._city = city
        self._merchant_category_code = merchant_category_code
        self._payload_format_indicator = payload_format_indicator
        self._transaction_currency_code = transaction_currency_code
        self._recipient_name = recipient_name
        self._email = email
        self._country = country
        self._phone = phone
        self._convenience_fee_amount = convenience_fee_amount
        self._point_of_initiation_method = point_of_initiation_method
        self._postal_code = postal_code
        self._tip_convenience_fee_indicator = tip_convenience_fee_indicator
        self._convenience_fee_percentage = convenience_fee_percentage
        self._alias_id = alias_id
        self._merchant_id = merchant_id

    @property
    def city(self):
        """
        Gets the city of this GetMerchantAliasgetResponse.
        Merchant or agent city.

        :return: The city of this GetMerchantAliasgetResponse.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this GetMerchantAliasgetResponse.
        Merchant or agent city.

        :param city: The city of this GetMerchantAliasgetResponse.
        :type: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def merchant_category_code(self):
        """
        Gets the merchant_category_code of this GetMerchantAliasgetResponse.
        Merchant Category Code. Numeric only.

        :return: The merchant_category_code of this GetMerchantAliasgetResponse.
        :rtype: str
        """
        return self._merchant_category_code

    @merchant_category_code.setter
    def merchant_category_code(self, merchant_category_code):
        """
        Sets the merchant_category_code of this GetMerchantAliasgetResponse.
        Merchant Category Code. Numeric only.

        :param merchant_category_code: The merchant_category_code of this GetMerchantAliasgetResponse.
        :type: str
        """
        if merchant_category_code is None:
            raise ValueError("Invalid value for `merchant_category_code`, must not be `None`")

        self._merchant_category_code = merchant_category_code

    @property
    def payload_format_indicator(self):
        """
        Gets the payload_format_indicator of this GetMerchantAliasgetResponse.
        Defines the format of the merchant data payload. Payload Format Indicator must be set to '01' as per EMVCo Merchant Presented QR specifications.

        :return: The payload_format_indicator of this GetMerchantAliasgetResponse.
        :rtype: str
        """
        return self._payload_format_indicator

    @payload_format_indicator.setter
    def payload_format_indicator(self, payload_format_indicator):
        """
        Sets the payload_format_indicator of this GetMerchantAliasgetResponse.
        Defines the format of the merchant data payload. Payload Format Indicator must be set to '01' as per EMVCo Merchant Presented QR specifications.

        :param payload_format_indicator: The payload_format_indicator of this GetMerchantAliasgetResponse.
        :type: str
        """
        if payload_format_indicator is None:
            raise ValueError("Invalid value for `payload_format_indicator`, must not be `None`")

        self._payload_format_indicator = payload_format_indicator

    @property
    def transaction_currency_code(self):
        """
        Gets the transaction_currency_code of this GetMerchantAliasgetResponse.
        As defined by ISO 4217. This is the transaction currency code that a merchant can accept for payment. 3-digit numeric presentation of the currency is recommended to be used if alias may be used for QR.

        :return: The transaction_currency_code of this GetMerchantAliasgetResponse.
        :rtype: str
        """
        return self._transaction_currency_code

    @transaction_currency_code.setter
    def transaction_currency_code(self, transaction_currency_code):
        """
        Sets the transaction_currency_code of this GetMerchantAliasgetResponse.
        As defined by ISO 4217. This is the transaction currency code that a merchant can accept for payment. 3-digit numeric presentation of the currency is recommended to be used if alias may be used for QR.

        :param transaction_currency_code: The transaction_currency_code of this GetMerchantAliasgetResponse.
        :type: str
        """
        if transaction_currency_code is None:
            raise ValueError("Invalid value for `transaction_currency_code`, must not be `None`")

        self._transaction_currency_code = transaction_currency_code

    @property
    def recipient_name(self):
        """
        Gets the recipient_name of this GetMerchantAliasgetResponse.
        Merchant or agent name.

        :return: The recipient_name of this GetMerchantAliasgetResponse.
        :rtype: str
        """
        return self._recipient_name

    @recipient_name.setter
    def recipient_name(self, recipient_name):
        """
        Sets the recipient_name of this GetMerchantAliasgetResponse.
        Merchant or agent name.

        :param recipient_name: The recipient_name of this GetMerchantAliasgetResponse.
        :type: str
        """
        if recipient_name is None:
            raise ValueError("Invalid value for `recipient_name`, must not be `None`")

        self._recipient_name = recipient_name

    @property
    def email(self):
        """
        Gets the email of this GetMerchantAliasgetResponse.
        Merchant or agent email address.

        :return: The email of this GetMerchantAliasgetResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this GetMerchantAliasgetResponse.
        Merchant or agent email address.

        :param email: The email of this GetMerchantAliasgetResponse.
        :type: str
        """

        self._email = email

    @property
    def country(self):
        """
        Gets the country of this GetMerchantAliasgetResponse.
        Merchant or agent country code as defined by ISO 3166. ISO 3166 alpha-2 is recommended to be used if alias may be used for QR.

        :return: The country of this GetMerchantAliasgetResponse.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this GetMerchantAliasgetResponse.
        Merchant or agent country code as defined by ISO 3166. ISO 3166 alpha-2 is recommended to be used if alias may be used for QR.

        :param country: The country of this GetMerchantAliasgetResponse.
        :type: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def phone(self):
        """
        Gets the phone of this GetMerchantAliasgetResponse.
        Merchant or agent phone number.

        :return: The phone of this GetMerchantAliasgetResponse.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this GetMerchantAliasgetResponse.
        Merchant or agent phone number.

        :param phone: The phone of this GetMerchantAliasgetResponse.
        :type: str
        """

        self._phone = phone

    @property
    def convenience_fee_amount(self):
        """
        Gets the convenience_fee_amount of this GetMerchantAliasgetResponse.
        The convenience fee of a fixed amount. Applicable only for merchant alias.

        :return: The convenience_fee_amount of this GetMerchantAliasgetResponse.
        :rtype: str
        """
        return self._convenience_fee_amount

    @convenience_fee_amount.setter
    def convenience_fee_amount(self, convenience_fee_amount):
        """
        Sets the convenience_fee_amount of this GetMerchantAliasgetResponse.
        The convenience fee of a fixed amount. Applicable only for merchant alias.

        :param convenience_fee_amount: The convenience_fee_amount of this GetMerchantAliasgetResponse.
        :type: str
        """

        self._convenience_fee_amount = convenience_fee_amount

    @property
    def point_of_initiation_method(self):
        """
        Gets the point_of_initiation_method of this GetMerchantAliasgetResponse.
        In this two-digit field, the first character indicates the method by which the data is presented by the merchant. The second character indicates whether the data is static or dynamic. Static data refers to a situation wherein same data is presented for every transaction unlike a dynamic data wherein the information is specific to a transaction.<br><b>1st character</b><br>'1' = QR<br>'2' = BLE<br>'3' = NFC<br>'4' - '9' = Reserved for Future Use<br><b>2nd character</b><br>'1' = Static<br>'2' = Dynamic<br>'3' - '9' = Reserved for Future Use.<br>Example: '11' indicates QR static code, '12' indicates QR dynamic code.

        :return: The point_of_initiation_method of this GetMerchantAliasgetResponse.
        :rtype: str
        """
        return self._point_of_initiation_method

    @point_of_initiation_method.setter
    def point_of_initiation_method(self, point_of_initiation_method):
        """
        Sets the point_of_initiation_method of this GetMerchantAliasgetResponse.
        In this two-digit field, the first character indicates the method by which the data is presented by the merchant. The second character indicates whether the data is static or dynamic. Static data refers to a situation wherein same data is presented for every transaction unlike a dynamic data wherein the information is specific to a transaction.<br><b>1st character</b><br>'1' = QR<br>'2' = BLE<br>'3' = NFC<br>'4' - '9' = Reserved for Future Use<br><b>2nd character</b><br>'1' = Static<br>'2' = Dynamic<br>'3' - '9' = Reserved for Future Use.<br>Example: '11' indicates QR static code, '12' indicates QR dynamic code.

        :param point_of_initiation_method: The point_of_initiation_method of this GetMerchantAliasgetResponse.
        :type: str
        """

        self._point_of_initiation_method = point_of_initiation_method

    @property
    def postal_code(self):
        """
        Gets the postal_code of this GetMerchantAliasgetResponse.
        Merchant or agent postal code.

        :return: The postal_code of this GetMerchantAliasgetResponse.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """
        Sets the postal_code of this GetMerchantAliasgetResponse.
        Merchant or agent postal code.

        :param postal_code: The postal_code of this GetMerchantAliasgetResponse.
        :type: str
        """

        self._postal_code = postal_code

    @property
    def tip_convenience_fee_indicator(self):
        """
        Gets the tip_convenience_fee_indicator of this GetMerchantAliasgetResponse.
        Tip or Convenience Fee Indicator. This shall contains a value of '01', '02' or '03' as per EMVCo Merchant Presented QR specifications. Applicable only for merchant alias.

        :return: The tip_convenience_fee_indicator of this GetMerchantAliasgetResponse.
        :rtype: str
        """
        return self._tip_convenience_fee_indicator

    @tip_convenience_fee_indicator.setter
    def tip_convenience_fee_indicator(self, tip_convenience_fee_indicator):
        """
        Sets the tip_convenience_fee_indicator of this GetMerchantAliasgetResponse.
        Tip or Convenience Fee Indicator. This shall contains a value of '01', '02' or '03' as per EMVCo Merchant Presented QR specifications. Applicable only for merchant alias.

        :param tip_convenience_fee_indicator: The tip_convenience_fee_indicator of this GetMerchantAliasgetResponse.
        :type: str
        """

        self._tip_convenience_fee_indicator = tip_convenience_fee_indicator

    @property
    def convenience_fee_percentage(self):
        """
        Gets the convenience_fee_percentage of this GetMerchantAliasgetResponse.
        Applicable only for merchant alias. The percentage convenience fee, specified as numeric value from “00.01” (for 00.01%) to “99.99” (for 99.99%).

        :return: The convenience_fee_percentage of this GetMerchantAliasgetResponse.
        :rtype: str
        """
        return self._convenience_fee_percentage

    @convenience_fee_percentage.setter
    def convenience_fee_percentage(self, convenience_fee_percentage):
        """
        Sets the convenience_fee_percentage of this GetMerchantAliasgetResponse.
        Applicable only for merchant alias. The percentage convenience fee, specified as numeric value from “00.01” (for 00.01%) to “99.99” (for 99.99%).

        :param convenience_fee_percentage: The convenience_fee_percentage of this GetMerchantAliasgetResponse.
        :type: str
        """

        self._convenience_fee_percentage = convenience_fee_percentage

    @property
    def alias_id(self):
        """
        Gets the alias_id of this GetMerchantAliasgetResponse.
        This attribute is uniquely used by Acquirer to identify their merchant or agent .

        :return: The alias_id of this GetMerchantAliasgetResponse.
        :rtype: str
        """
        return self._alias_id

    @alias_id.setter
    def alias_id(self, alias_id):
        """
        Sets the alias_id of this GetMerchantAliasgetResponse.
        This attribute is uniquely used by Acquirer to identify their merchant or agent .

        :param alias_id: The alias_id of this GetMerchantAliasgetResponse.
        :type: str
        """
        if alias_id is None:
            raise ValueError("Invalid value for `alias_id`, must not be `None`")

        self._alias_id = alias_id

    @property
    def merchant_id(self):
        """
        Gets the merchant_id of this GetMerchantAliasgetResponse.
        A 16 digit-number as per Mobile Push Payment Program Implementation Guide to receive payment by merchant or agent.

        :return: The merchant_id of this GetMerchantAliasgetResponse.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """
        Sets the merchant_id of this GetMerchantAliasgetResponse.
        A 16 digit-number as per Mobile Push Payment Program Implementation Guide to receive payment by merchant or agent.

        :param merchant_id: The merchant_id of this GetMerchantAliasgetResponse.
        :type: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")

        self._merchant_id = merchant_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetMerchantAliasgetResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------