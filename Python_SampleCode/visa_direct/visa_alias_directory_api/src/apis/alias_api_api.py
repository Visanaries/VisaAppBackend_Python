# coding: utf-8

"""
    Visa Alias Directory API

    Visa Alias Directory Services provide an ability to resolve an identifier (i.e. an alias) such as mobile phone number, email address, short name, or nickname, to a Visa card account (non-Visa soon) through APIs.  A Visa client can use these APIs to allow consumers provide an alias instead of inputting a card number (PAN) to use Visa Direct push payment services such as person-to-person (P2P) money transfers, mVisa merchant payments and mVisa agent deposits and withdrawals.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re
import json

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AliasApiApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()

        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_get_alias(self, guid, **kwargs):
        """
        Get alias and recipient's related data.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_get_alias(guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str guid: This attribute is uniquely used by Issuer to identify their customer (i.e. consumer cardholder). (required)
        :return: GetAliasgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_get_alias_with_http_info(guid, **kwargs)
        else:
            (data) = self.get_get_alias_with_http_info(guid, **kwargs)
            return data

    def get_get_alias_with_http_info(self, guid, **kwargs):
        """
        Get alias and recipient's related data.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_get_alias_with_http_info(guid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str guid: This attribute is uniquely used by Issuer to identify their customer (i.e. consumer cardholder). (required)
        :return: GetAliasgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['guid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_get_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'guid' is set
        if ('guid' not in params) or (params['guid'] is None):
            raise ValueError("Missing the required parameter `guid` when calling `get_get_alias`")


        collection_formats = {}

        path = '/visaaliasdirectory/v1/manage/{guid}'.replace('{format}', 'json')
        resource_path = 'manage/{guid}'
        path_params = {}
        if 'guid' in params:
            path_params['guid'] = params['guid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetAliasgetResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_get_merchant_alias(self, merchantaliasid, **kwargs):
        """
        Get alias and merchant or agent related data.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_get_merchant_alias(merchantaliasid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str merchantaliasid: This attribute is uniquely used by acquirer to identify their merchant or agent. (required)
        :param str type: Valid type value is 'agent'. If type is not provided, default search for merchant alias records only.
        :return: GetMerchantAliasgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_get_merchant_alias_with_http_info(merchantaliasid, **kwargs)
        else:
            (data) = self.get_get_merchant_alias_with_http_info(merchantaliasid, **kwargs)
            return data

    def get_get_merchant_alias_with_http_info(self, merchantaliasid, **kwargs):
        """
        Get alias and merchant or agent related data.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_get_merchant_alias_with_http_info(merchantaliasid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str merchantaliasid: This attribute is uniquely used by acquirer to identify their merchant or agent. (required)
        :param str type: Valid type value is 'agent'. If type is not provided, default search for merchant alias records only.
        :return: GetMerchantAliasgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['merchantaliasid', 'type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_get_merchant_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'merchantaliasid' is set
        if ('merchantaliasid' not in params) or (params['merchantaliasid'] is None):
            raise ValueError("Missing the required parameter `merchantaliasid` when calling `get_get_merchant_alias`")


        collection_formats = {}

        path = '/visaaliasdirectory/v1/managemerchant'.replace('{format}', 'json')
        resource_path = 'managemerchant'
        path_params = {}

        query_params = {}
        if 'merchantaliasid' in params:
            query_params['merchantaliasid'] = params['merchantaliasid']
        if 'type' in params:
            query_params['type'] = params['type']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetMerchantAliasgetResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_get_report(self, reportid, pageid, **kwargs):
        """
        Get Report data.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_get_report(reportid, pageid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str reportid: This attribute is uniquely generated by Visa Alias directory to identify the report generation request.  This is used to retrieve the alias report together with the page ID.<br>The format is {BID}-{TYPE}-{NUMERIC STRING}, where <b>BID</b> is the Business Identifier of the client used by Visa, <b>TYPE</b> can be 'CONSUMER', 'MERCHANT' or 'AGENT' alias report.  (required)
        :param str pageid: Numeric only. This attribute is used to specify the page number of the report. (required)
        :return: GetReportgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_get_report_with_http_info(reportid, pageid, **kwargs)
        else:
            (data) = self.get_get_report_with_http_info(reportid, pageid, **kwargs)
            return data

    def get_get_report_with_http_info(self, reportid, pageid, **kwargs):
        """
        Get Report data.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_get_report_with_http_info(reportid, pageid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str reportid: This attribute is uniquely generated by Visa Alias directory to identify the report generation request.  This is used to retrieve the alias report together with the page ID.<br>The format is {BID}-{TYPE}-{NUMERIC STRING}, where <b>BID</b> is the Business Identifier of the client used by Visa, <b>TYPE</b> can be 'CONSUMER', 'MERCHANT' or 'AGENT' alias report.  (required)
        :param str pageid: Numeric only. This attribute is used to specify the page number of the report. (required)
        :return: GetReportgetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reportid', 'pageid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_get_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reportid' is set
        if ('reportid' not in params) or (params['reportid'] is None):
            raise ValueError("Missing the required parameter `reportid` when calling `get_get_report`")
        # verify the required parameter 'pageid' is set
        if ('pageid' not in params) or (params['pageid'] is None):
            raise ValueError("Missing the required parameter `pageid` when calling `get_get_report`")


        collection_formats = {}

        path = '/visaaliasdirectory/v1/managereport'.replace('{format}', 'json')
        resource_path = 'managereport'
        path_params = {}

        query_params = {}
        if 'reportid' in params:
            query_params['reportid'] = params['reportid']
        if 'pageid' in params:
            query_params['pageid'] = params['pageid']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetReportgetResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_create_alias(self, create_aliaspost_payload, **kwargs):
        """
        Create an alias in the Alias Directory.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_create_alias(create_aliaspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateAliaspostPayload create_aliaspost_payload: Request body for creating alias API (required)
        :return: CreateAliaspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_create_alias_with_http_info(create_aliaspost_payload, **kwargs)
        else:
            (data) = self.post_create_alias_with_http_info(create_aliaspost_payload, **kwargs)
            return data

    def post_create_alias_with_http_info(self, create_aliaspost_payload, **kwargs):
        """
        Create an alias in the Alias Directory.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_create_alias_with_http_info(create_aliaspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateAliaspostPayload create_aliaspost_payload: Request body for creating alias API (required)
        :return: CreateAliaspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_aliaspost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_create_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_aliaspost_payload' is set
        if ('create_aliaspost_payload' not in params) or (params['create_aliaspost_payload'] is None):
            raise ValueError("Missing the required parameter `create_aliaspost_payload` when calling `post_create_alias`")


        collection_formats = {}

        path = '/visaaliasdirectory/v1/manage/createalias'.replace('{format}', 'json')
        resource_path = 'manage/createalias'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_aliaspost_payload' in params:
            body_params = params['create_aliaspost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CreateAliaspostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_create_merchant_alias(self, create_merchant_aliaspost_payload, **kwargs):
        """
        Creates a merchant or agent alias in the Alias Directory.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_create_merchant_alias(create_merchant_aliaspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateMerchantAliaspostPayload create_merchant_aliaspost_payload: Request body for creating merchant or agent alias (required)
        :return: CreateMerchantAliaspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_create_merchant_alias_with_http_info(create_merchant_aliaspost_payload, **kwargs)
        else:
            (data) = self.post_create_merchant_alias_with_http_info(create_merchant_aliaspost_payload, **kwargs)
            return data

    def post_create_merchant_alias_with_http_info(self, create_merchant_aliaspost_payload, **kwargs):
        """
        Creates a merchant or agent alias in the Alias Directory.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_create_merchant_alias_with_http_info(create_merchant_aliaspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateMerchantAliaspostPayload create_merchant_aliaspost_payload: Request body for creating merchant or agent alias (required)
        :return: CreateMerchantAliaspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_merchant_aliaspost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_create_merchant_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_merchant_aliaspost_payload' is set
        if ('create_merchant_aliaspost_payload' not in params) or (params['create_merchant_aliaspost_payload'] is None):
            raise ValueError("Missing the required parameter `create_merchant_aliaspost_payload` when calling `post_create_merchant_alias`")


        collection_formats = {}

        path = '/visaaliasdirectory/v1/managemerchant/createalias'.replace('{format}', 'json')
        resource_path = 'managemerchant/createalias'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_merchant_aliaspost_payload' in params:
            body_params = params['create_merchant_aliaspost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CreateMerchantAliaspostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_delete_alias(self, delete_aliaspost_payload, **kwargs):
        """
        Delete alias of a recipient from the Alias Directory.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_delete_alias(delete_aliaspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DeleteAliaspostPayload delete_aliaspost_payload: Request body for deleting an alias (required)
        :return: DeleteAliaspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_delete_alias_with_http_info(delete_aliaspost_payload, **kwargs)
        else:
            (data) = self.post_delete_alias_with_http_info(delete_aliaspost_payload, **kwargs)
            return data

    def post_delete_alias_with_http_info(self, delete_aliaspost_payload, **kwargs):
        """
        Delete alias of a recipient from the Alias Directory.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_delete_alias_with_http_info(delete_aliaspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DeleteAliaspostPayload delete_aliaspost_payload: Request body for deleting an alias (required)
        :return: DeleteAliaspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_aliaspost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_delete_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_aliaspost_payload' is set
        if ('delete_aliaspost_payload' not in params) or (params['delete_aliaspost_payload'] is None):
            raise ValueError("Missing the required parameter `delete_aliaspost_payload` when calling `post_delete_alias`")


        collection_formats = {}

        path = '/visaaliasdirectory/v1/manage/deletealias'.replace('{format}', 'json')
        resource_path = 'manage/deletealias'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_aliaspost_payload' in params:
            body_params = params['delete_aliaspost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeleteAliaspostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_delete_merchant_alias(self, delete_merchant_aliaspost_payload, **kwargs):
        """
        Delete alias of a merchant or agent from the Alias Directory.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_delete_merchant_alias(delete_merchant_aliaspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DeleteMerchantAliaspostPayload delete_merchant_aliaspost_payload: Request body for deleting a merchant or agent alias (required)
        :return: DeleteMerchantAliaspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_delete_merchant_alias_with_http_info(delete_merchant_aliaspost_payload, **kwargs)
        else:
            (data) = self.post_delete_merchant_alias_with_http_info(delete_merchant_aliaspost_payload, **kwargs)
            return data

    def post_delete_merchant_alias_with_http_info(self, delete_merchant_aliaspost_payload, **kwargs):
        """
        Delete alias of a merchant or agent from the Alias Directory.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_delete_merchant_alias_with_http_info(delete_merchant_aliaspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DeleteMerchantAliaspostPayload delete_merchant_aliaspost_payload: Request body for deleting a merchant or agent alias (required)
        :return: DeleteMerchantAliaspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['delete_merchant_aliaspost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_delete_merchant_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'delete_merchant_aliaspost_payload' is set
        if ('delete_merchant_aliaspost_payload' not in params) or (params['delete_merchant_aliaspost_payload'] is None):
            raise ValueError("Missing the required parameter `delete_merchant_aliaspost_payload` when calling `post_delete_merchant_alias`")


        collection_formats = {}

        path = '/visaaliasdirectory/v1/managemerchant/deletealias'.replace('{format}', 'json')
        resource_path = 'managemerchant/deletealias'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_merchant_aliaspost_payload' in params:
            body_params = params['delete_merchant_aliaspost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeleteMerchantAliaspostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_generate_report(self, generate_reportpost_payload, **kwargs):
        """
        To submit a request to generate report and return a URL as response for retrieving report.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_generate_report(generate_reportpost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GenerateReportpostPayload generate_reportpost_payload: Request body for generating a report (required)
        :return: GenerateReportpostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_generate_report_with_http_info(generate_reportpost_payload, **kwargs)
        else:
            (data) = self.post_generate_report_with_http_info(generate_reportpost_payload, **kwargs)
            return data

    def post_generate_report_with_http_info(self, generate_reportpost_payload, **kwargs):
        """
        To submit a request to generate report and return a URL as response for retrieving report.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_generate_report_with_http_info(generate_reportpost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GenerateReportpostPayload generate_reportpost_payload: Request body for generating a report (required)
        :return: GenerateReportpostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['generate_reportpost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_generate_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'generate_reportpost_payload' is set
        if ('generate_reportpost_payload' not in params) or (params['generate_reportpost_payload'] is None):
            raise ValueError("Missing the required parameter `generate_reportpost_payload` when calling `post_generate_report`")


        collection_formats = {}

        path = '/visaaliasdirectory/v1/managereport/generate'.replace('{format}', 'json')
        resource_path = 'managereport/generate'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'generate_reportpost_payload' in params:
            body_params = params['generate_reportpost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GenerateReportpostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_resolve(self, resolvepost_payload, **kwargs):
        """
        Resolve an alias for recipient's primary account number (PAN) and related data.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_resolve(resolvepost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ResolvepostPayload resolvepost_payload: Request body for resolve alias API (required)
        :return: ResolvepostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_resolve_with_http_info(resolvepost_payload, **kwargs)
        else:
            (data) = self.post_resolve_with_http_info(resolvepost_payload, **kwargs)
            return data

    def post_resolve_with_http_info(self, resolvepost_payload, **kwargs):
        """
        Resolve an alias for recipient's primary account number (PAN) and related data.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_resolve_with_http_info(resolvepost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ResolvepostPayload resolvepost_payload: Request body for resolve alias API (required)
        :return: ResolvepostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resolvepost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_resolve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resolvepost_payload' is set
        if ('resolvepost_payload' not in params) or (params['resolvepost_payload'] is None):
            raise ValueError("Missing the required parameter `resolvepost_payload` when calling `post_resolve`")


        collection_formats = {}

        path = '/visaaliasdirectory/v1/resolve'.replace('{format}', 'json')
        resource_path = 'resolve'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'resolvepost_payload' in params:
            body_params = params['resolvepost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ResolvepostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_update_alias(self, update_aliaspost_payload, **kwargs):
        """
        Update alias and recipient data in the Alias Directory
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_update_alias(update_aliaspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UpdateAliaspostPayload update_aliaspost_payload: Request body for updating alias API (required)
        :return: UpdateAliaspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_update_alias_with_http_info(update_aliaspost_payload, **kwargs)
        else:
            (data) = self.post_update_alias_with_http_info(update_aliaspost_payload, **kwargs)
            return data

    def post_update_alias_with_http_info(self, update_aliaspost_payload, **kwargs):
        """
        Update alias and recipient data in the Alias Directory
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_update_alias_with_http_info(update_aliaspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UpdateAliaspostPayload update_aliaspost_payload: Request body for updating alias API (required)
        :return: UpdateAliaspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['update_aliaspost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_update_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'update_aliaspost_payload' is set
        if ('update_aliaspost_payload' not in params) or (params['update_aliaspost_payload'] is None):
            raise ValueError("Missing the required parameter `update_aliaspost_payload` when calling `post_update_alias`")


        collection_formats = {}

        path = '/visaaliasdirectory/v1/manage/updatealias'.replace('{format}', 'json')
        resource_path = 'manage/updatealias'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_aliaspost_payload' in params:
            body_params = params['update_aliaspost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UpdateAliaspostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_update_merchant_alias(self, update_merchant_aliaspost_payload, **kwargs):
        """
        Update merchant alias or agent alias info in the Alias Directory
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_update_merchant_alias(update_merchant_aliaspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UpdateMerchantAliaspostPayload update_merchant_aliaspost_payload: Request body for updating merchant or agent alias API (required)
        :return: UpdateMerchantAliaspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_update_merchant_alias_with_http_info(update_merchant_aliaspost_payload, **kwargs)
        else:
            (data) = self.post_update_merchant_alias_with_http_info(update_merchant_aliaspost_payload, **kwargs)
            return data

    def post_update_merchant_alias_with_http_info(self, update_merchant_aliaspost_payload, **kwargs):
        """
        Update merchant alias or agent alias info in the Alias Directory
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_update_merchant_alias_with_http_info(update_merchant_aliaspost_payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UpdateMerchantAliaspostPayload update_merchant_aliaspost_payload: Request body for updating merchant or agent alias API (required)
        :return: UpdateMerchantAliaspostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['update_merchant_aliaspost_payload']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_update_merchant_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'update_merchant_aliaspost_payload' is set
        if ('update_merchant_aliaspost_payload' not in params) or (params['update_merchant_aliaspost_payload'] is None):
            raise ValueError("Missing the required parameter `update_merchant_aliaspost_payload` when calling `post_update_merchant_alias`")


        collection_formats = {}

        path = '/visaaliasdirectory/v1/managemerchant/updatealias'.replace('{format}', 'json')
        resource_path = 'managemerchant/updatealias'
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_merchant_aliaspost_payload' in params:
            body_params = params['update_merchant_aliaspost_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UpdateMerchantAliaspostResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------