# coding: utf-8

"""
    Visa Alias Directory API

    Visa Alias Directory Services provide an ability to resolve an identifier (i.e. an alias) such as mobile phone number, email address, short name, or nickname, to a Visa card account (non-Visa soon) through APIs.  A Visa client can use these APIs to allow consumers provide an alias instead of inputting a card number (PAN) to use Visa Direct push payment services such as person-to-person (P2P) money transfers, mVisa merchant payments and mVisa agent deposits and withdrawals.

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import os
import sys
import unittest
import datetime
import pytz
import random
import string
import re
import json

from src.apis.alias_api_api import AliasApiApi
from src.configuration import Configuration
from globalConfig import GlobalConfig


class TestAliasApiApi(unittest.TestCase):
    """ AliasApiApi unit test stubs """

    @classmethod
    def setUpClass(self):
        print("---------------------------------------Tests---------------------------------------\nProduct Name: Visa Direct\nApi Name: Visa Alias Directory API")
        globalConfig = GlobalConfig()
        config = Configuration()
        config.username = globalConfig.userName
        config.password = globalConfig.password
        config.cert_file = globalConfig.certificatePath
        config.key_file = globalConfig.privateKeyPath
        config.shared_secret = globalConfig.sharedSecret
        config.api_key['apikey'] = globalConfig.apiKey
        config.ssl_ca_cert = globalConfig.caCertPath
        config.proxy_url = globalConfig.proxyUrl
        self.api = AliasApiApi(None)

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def transformPayload(self, payload):
        payload = self.editLocalTime(payload)
        payload = self.addRandom(payload)
        payload = json.loads(payload)
        return payload

    def editLocalTime(self, payload):
        timezone = pytz.timezone("America/Los_Angeles")
        timestamp = timezone.localize(datetime.datetime.now()).strftime('%Y-%m-%dT%H:%M:%S')
        pattern = re.compile('"localTransactionDateTime":".{19}"', re.IGNORECASE)
        replacement = '"localTransactionDateTime": "'+timestamp+'"'
        payload = re.sub(pattern, replacement, payload)

        timestamp = timezone.localize(datetime.datetime.now()).strftime('%m%d%H%M%S')
        pattern = re.compile('"dateTimeLocal":".{10}"', re.IGNORECASE)
        replacement = '"dateTimeLocal": "'+timestamp+'"'
        payload = re.sub(pattern, replacement, payload)
        return payload

    def addRandom(self, payload):
        if payload == 'mle_keyId':
            return self.mleKeyId
        payload = re.sub(r'random_string', ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(8)), payload)
        payload = re.sub(r'random_integer', ''.join(random.choice(string.digits) for _ in range(8)), payload)
        payload= re.sub(r'random', ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(8)), payload)
        return payload

    """
    Test case for get_get_alias

    .
    """
    def testget_get_alias(self):
        print("\nget_get_alias")
        result = self.api.get_get_alias(self.addRandom('random'))
        pass

    """
    Test case for get_get_merchant_alias

    .
    """
    def testget_get_merchant_alias(self):
        print("\nget_get_merchant_alias")
        result = self.api.get_get_merchant_alias(self.addRandom('random'), )
        pass

    """
    Test case for get_get_report

    .
    """
    def testget_get_report(self):
        print("\nget_get_report")
        result = self.api.get_get_report(self.addRandom('random'), self.addRandom('random'))
        pass

    """
    Test case for post_create_alias

    .
    """
    def testpost_create_alias(self):
        print("\npost_create_alias")
        result = self.api.post_create_alias(self.transformPayload('{"recipientMiddleName":"M","city":"Nairobi","recipientFirstName":"Jamie","address1":"Street 1","address2":"Region 1","consentDateTime":"2018-03-01 01:02:03","recipientPrimaryAccountNumber":"4895140000066666","alias":"254711333888","cardType":"Visa Classic","recipientLastName":"Bakari","country":"KE","postalCode":"00111","issuerName":"Test Bank 1","guid":"574f4b6a4c2b70472f306f300099515a789092348832455975343637a4d3170","aliasType":"01"}'))
        pass

    """
    Test case for post_create_merchant_alias

    .
    """
    def testpost_create_merchant_alias(self):
        print("\npost_create_merchant_alias")
        result = self.api.post_create_merchant_alias(self.transformPayload('{"city":"Nairobi","merchantCategoryCode":"6012","payloadFormatIndicator":"01","transactionCurrencyCode":"404","pointOfInitiationMethod":"11","recipientName":"Bob's Ice Cream","country":"KE","aliasId":"888000","merchantId":"4761100090708271"}'))
        pass

    """
    Test case for post_delete_alias

    .
    """
    def testpost_delete_alias(self):
        print("\npost_delete_alias")
        result = self.api.post_delete_alias(self.transformPayload('{"alias":"254711333888","guid":"574f4b6a4c2b70472f306f300099515a789092348832455975343637a4d3170"}'))
        pass

    """
    Test case for post_delete_merchant_alias

    .
    """
    def testpost_delete_merchant_alias(self):
        print("\npost_delete_merchant_alias")
        result = self.api.post_delete_merchant_alias(self.transformPayload('{"aliasId":"888000","merchantId":"4761100090708271"}'))
        pass

    """
    Test case for post_generate_report

    .
    """
    def testpost_generate_report(self):
        print("\npost_generate_report")
        result = self.api.post_generate_report(self.transformPayload('{"status":"ACTIVE,DISABLED","type":"CONSUMER","limit":"100","reportStartDate":"2018-09-01"}'))
        pass

    """
    Test case for post_resolve

    .
    """
    def testpost_resolve(self):
        print("\npost_resolve")
        result = self.api.post_resolve(self.transformPayload('{"alias":"254711001987","businessApplicationId":"PP"}'))
        pass

    """
    Test case for post_update_alias

    .
    """
    def testpost_update_alias(self):
        print("\npost_update_alias")
        result = self.api.post_update_alias(self.transformPayload('{"consentDateTime":"2018-02-01 12:20:22","guid":"574f4b6a4c2b70472f306f300099515a789092348832455975343637a4d3170"}'))
        pass

    """
    Test case for post_update_merchant_alias

    .
    """
    def testpost_update_merchant_alias(self):
        print("\npost_update_merchant_alias")
        result = self.api.post_update_merchant_alias(self.transformPayload('{"city":"Nairobi","merchantCategoryCode":"6012","payloadFormatIndicator":"01","transactionCurrencyCode":"404","recipientName":"Bob's Ice Cream","email":"bob@example.com","pointOfInitiationMethod":"11","tipConvenienceFeeIndicator":"01","country":"KE","aliasId":"888000","merchantId":"4761100090708271"}'))
        pass


if __name__ == '__main__':
    unittest.main()


# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------