# coding: utf-8

"""
    Reports API

    The Reports API provides reporting capabilities such as transaction reconciliation data API. The data needed for reconciliation includes both push(OCT) and pull(AFT) transaction details and any exceptions such as chargebacks & reversals. This data allows you to reconcile the transactions sent by your systems with what was processed through VisaNet.<br> <br> <b>Note: This functionality is currently available for US transactions ONLY.</b>

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re
import json

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ReportsApiApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()

        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def getreporting_api(self, from_date, to_date, **kwargs):
        """
        Transaction Data
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getreporting_api(from_date, to_date, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str from_date: The beginning date. Example: 31032016 for 31st March 2016. (required)
        :param str to_date: The end date. Example: 03042016 for 3rd April 2016. Currently, only upto 5 days worth of data can be retrieved.  Also, only the last 120 days of data can be searched from the current date. (required)
        :param str fields: Required additional fields. Example: Add fields like amountInTransactionCurrency, currencyConversionRate,   reasonCodeValue, cardType, networkId, transactionStateCode, businessApplicationId, separated by comma.
        :param str offset: This determines the page number for the pagination. Defalut is set to 1.
        :param str limit: Total number of records that should be present in each page. Defalut is set to 100.
        :return: ReportingApigetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.getreporting_api_with_http_info(from_date, to_date, **kwargs)
        else:
            (data) = self.getreporting_api_with_http_info(from_date, to_date, **kwargs)
            return data

    def getreporting_api_with_http_info(self, from_date, to_date, **kwargs):
        """
        Transaction Data
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.getreporting_api_with_http_info(from_date, to_date, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str from_date: The beginning date. Example: 31032016 for 31st March 2016. (required)
        :param str to_date: The end date. Example: 03042016 for 3rd April 2016. Currently, only upto 5 days worth of data can be retrieved.  Also, only the last 120 days of data can be searched from the current date. (required)
        :param str fields: Required additional fields. Example: Add fields like amountInTransactionCurrency, currencyConversionRate,   reasonCodeValue, cardType, networkId, transactionStateCode, businessApplicationId, separated by comma.
        :param str offset: This determines the page number for the pagination. Defalut is set to 1.
        :param str limit: Total number of records that should be present in each page. Defalut is set to 100.
        :return: ReportingApigetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_date', 'to_date', 'fields', 'offset', 'limit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getreporting_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'from_date' is set
        if ('from_date' not in params) or (params['from_date'] is None):
            raise ValueError("Missing the required parameter `from_date` when calling `getreporting_api`")
        # verify the required parameter 'to_date' is set
        if ('to_date' not in params) or (params['to_date'] is None):
            raise ValueError("Missing the required parameter `to_date` when calling `getreporting_api`")


        collection_formats = {}

        path = '/visadirect/reports/v1/transactiondata'.replace('{format}', 'json')
        resource_path = 'transactiondata'
        path_params = {}

        query_params = {}
        if 'from_date' in params:
            query_params['fromDate'] = params['from_date']
        if 'to_date' in params:
            query_params['toDate'] = params['to_date']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api(path, resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ReportingApigetResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------