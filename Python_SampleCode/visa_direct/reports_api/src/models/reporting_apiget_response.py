# coding: utf-8

"""
    Reports API

    The Reports API provides reporting capabilities such as transaction reconciliation data API. The data needed for reconciliation includes both push(OCT) and pull(AFT) transaction details and any exceptions such as chargebacks & reversals. This data allows you to reconcile the transactions sent by your systems with what was processed through VisaNet.<br> <br> <b>Note: This functionality is currently available for US transactions ONLY.</b>

    OpenAPI spec version: v1
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ReportingApigetResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, settlement_date_time=None, approval_code=None, card_acceptor_id_code=None, fee_program_indicator=None, fee_program_desc=None, card_acceptor_name=None, transaction_currency_code=None, transaction_identifier=None, amount=None, acquiring_bin=None, retrieval_reference_number=None, systems_trace_audit_number=None, processing_date=None, account_number_masked=None, reason_code=None, transaction_date_time=None, transaction_state=None):
        """
        ReportingApigetResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'settlement_date_time': 'str',
            'approval_code': 'str',
            'card_acceptor_id_code': 'str',
            'fee_program_indicator': 'str',
            'fee_program_desc': 'str',
            'card_acceptor_name': 'str',
            'transaction_currency_code': 'str',
            'transaction_identifier': 'str',
            'amount': 'float',
            'acquiring_bin': 'int',
            'retrieval_reference_number': 'str',
            'systems_trace_audit_number': 'int',
            'processing_date': 'str',
            'account_number_masked': 'str',
            'reason_code': 'str',
            'transaction_date_time': 'str',
            'transaction_state': 'str'
        }

        self.attribute_map = {
            'settlement_date_time': 'settlementDateTime',
            'approval_code': 'approvalCode',
            'card_acceptor_id_code': 'cardAcceptorIdCode',
            'fee_program_indicator': 'feeProgramIndicator',
            'fee_program_desc': 'feeProgramDesc',
            'card_acceptor_name': 'cardAcceptorName',
            'transaction_currency_code': 'transactionCurrencyCode',
            'transaction_identifier': 'transactionIdentifier',
            'amount': 'amount',
            'acquiring_bin': 'acquiringBin',
            'retrieval_reference_number': 'retrievalReferenceNumber',
            'systems_trace_audit_number': 'systemsTraceAuditNumber',
            'processing_date': 'processingDate',
            'account_number_masked': 'accountNumberMasked',
            'reason_code': 'reasonCode',
            'transaction_date_time': 'transactionDateTime',
            'transaction_state': 'transactionState'
        }

        self._settlement_date_time = settlement_date_time
        self._approval_code = approval_code
        self._card_acceptor_id_code = card_acceptor_id_code
        self._fee_program_indicator = fee_program_indicator
        self._fee_program_desc = fee_program_desc
        self._card_acceptor_name = card_acceptor_name
        self._transaction_currency_code = transaction_currency_code
        self._transaction_identifier = transaction_identifier
        self._amount = amount
        self._acquiring_bin = acquiring_bin
        self._retrieval_reference_number = retrieval_reference_number
        self._systems_trace_audit_number = systems_trace_audit_number
        self._processing_date = processing_date
        self._account_number_masked = account_number_masked
        self._reason_code = reason_code
        self._transaction_date_time = transaction_date_time
        self._transaction_state = transaction_state

    @property
    def settlement_date_time(self):
        """
        Gets the settlement_date_time of this ReportingApigetResponse.
        The date & time of a transaction’s SMS settlement between the acquirer and issuer.  Example 2016-05-01:091234

        :return: The settlement_date_time of this ReportingApigetResponse.
        :rtype: str
        """
        return self._settlement_date_time

    @settlement_date_time.setter
    def settlement_date_time(self, settlement_date_time):
        """
        Sets the settlement_date_time of this ReportingApigetResponse.
        The date & time of a transaction’s SMS settlement between the acquirer and issuer.  Example 2016-05-01:091234

        :param settlement_date_time: The settlement_date_time of this ReportingApigetResponse.
        :type: str
        """

        self._settlement_date_time = settlement_date_time

    @property
    def approval_code(self):
        """
        Gets the approval_code of this ReportingApigetResponse.
        The authorization code from the issuer. A code provided by the issuer (or VIP STIP) when a transaction is approved, or a \"no reason to decline\" code is provided. Used to tie subsequent messages to the original transaction.

        :return: The approval_code of this ReportingApigetResponse.
        :rtype: str
        """
        return self._approval_code

    @approval_code.setter
    def approval_code(self, approval_code):
        """
        Sets the approval_code of this ReportingApigetResponse.
        The authorization code from the issuer. A code provided by the issuer (or VIP STIP) when a transaction is approved, or a \"no reason to decline\" code is provided. Used to tie subsequent messages to the original transaction.

        :param approval_code: The approval_code of this ReportingApigetResponse.
        :type: str
        """

        self._approval_code = approval_code

    @property
    def card_acceptor_id_code(self):
        """
        Gets the card_acceptor_id_code of this ReportingApigetResponse.
        An acquirer-assigned (15 byte) code identifying the card acceptor for the transaction. The code can represent a merchant, a specific merchant location, or a specific merchant terminal.

        :return: The card_acceptor_id_code of this ReportingApigetResponse.
        :rtype: str
        """
        return self._card_acceptor_id_code

    @card_acceptor_id_code.setter
    def card_acceptor_id_code(self, card_acceptor_id_code):
        """
        Sets the card_acceptor_id_code of this ReportingApigetResponse.
        An acquirer-assigned (15 byte) code identifying the card acceptor for the transaction. The code can represent a merchant, a specific merchant location, or a specific merchant terminal.

        :param card_acceptor_id_code: The card_acceptor_id_code of this ReportingApigetResponse.
        :type: str
        """

        self._card_acceptor_id_code = card_acceptor_id_code

    @property
    def fee_program_indicator(self):
        """
        Gets the fee_program_indicator of this ReportingApigetResponse.
        This field contains an interchange reimbursement fee program indicator (FPI), which is used in assessing the fee amount applied to financial transactions.

        :return: The fee_program_indicator of this ReportingApigetResponse.
        :rtype: str
        """
        return self._fee_program_indicator

    @fee_program_indicator.setter
    def fee_program_indicator(self, fee_program_indicator):
        """
        Sets the fee_program_indicator of this ReportingApigetResponse.
        This field contains an interchange reimbursement fee program indicator (FPI), which is used in assessing the fee amount applied to financial transactions.

        :param fee_program_indicator: The fee_program_indicator of this ReportingApigetResponse.
        :type: str
        """

        self._fee_program_indicator = fee_program_indicator

    @property
    def fee_program_desc(self):
        """
        Gets the fee_program_desc of this ReportingApigetResponse.
        Short text description of the Acquirer IRF (Interchange Reimbursement Fee) indicator. (Interchange fees are paid by issuers and acquirers to each other for transactions entered into interchange and their reversals).

        :return: The fee_program_desc of this ReportingApigetResponse.
        :rtype: str
        """
        return self._fee_program_desc

    @fee_program_desc.setter
    def fee_program_desc(self, fee_program_desc):
        """
        Sets the fee_program_desc of this ReportingApigetResponse.
        Short text description of the Acquirer IRF (Interchange Reimbursement Fee) indicator. (Interchange fees are paid by issuers and acquirers to each other for transactions entered into interchange and their reversals).

        :param fee_program_desc: The fee_program_desc of this ReportingApigetResponse.
        :type: str
        """

        self._fee_program_desc = fee_program_desc

    @property
    def card_acceptor_name(self):
        """
        Gets the card_acceptor_name of this ReportingApigetResponse.
        The name of the merchant or ATM (id/location) where the transaction occurred. In VIP this is the first 25 bytes of ISO F43 Card Acceptor Name.

        :return: The card_acceptor_name of this ReportingApigetResponse.
        :rtype: str
        """
        return self._card_acceptor_name

    @card_acceptor_name.setter
    def card_acceptor_name(self, card_acceptor_name):
        """
        Sets the card_acceptor_name of this ReportingApigetResponse.
        The name of the merchant or ATM (id/location) where the transaction occurred. In VIP this is the first 25 bytes of ISO F43 Card Acceptor Name.

        :param card_acceptor_name: The card_acceptor_name of this ReportingApigetResponse.
        :type: str
        """

        self._card_acceptor_name = card_acceptor_name

    @property
    def transaction_currency_code(self):
        """
        Gets the transaction_currency_code of this ReportingApigetResponse.
        Set internally during VisaNet processing, the ISO currency code which identifies the transaction currency code.

        :return: The transaction_currency_code of this ReportingApigetResponse.
        :rtype: str
        """
        return self._transaction_currency_code

    @transaction_currency_code.setter
    def transaction_currency_code(self, transaction_currency_code):
        """
        Sets the transaction_currency_code of this ReportingApigetResponse.
        Set internally during VisaNet processing, the ISO currency code which identifies the transaction currency code.

        :param transaction_currency_code: The transaction_currency_code of this ReportingApigetResponse.
        :type: str
        """

        self._transaction_currency_code = transaction_currency_code

    @property
    def transaction_identifier(self):
        """
        Gets the transaction_identifier of this ReportingApigetResponse.
        An identifier assigned by Visa to help uniquely identify a transaction and to link subsequent transactions, such as a reversal, to an original. The transaction identifier is returned to the acquirer in the authorization response and should be provided in subsequent clearing transactions. The components of the identifier include the transaction date, a sequence number for that date, a system identifier, and the time expressed in relative seconds.

        :return: The transaction_identifier of this ReportingApigetResponse.
        :rtype: str
        """
        return self._transaction_identifier

    @transaction_identifier.setter
    def transaction_identifier(self, transaction_identifier):
        """
        Sets the transaction_identifier of this ReportingApigetResponse.
        An identifier assigned by Visa to help uniquely identify a transaction and to link subsequent transactions, such as a reversal, to an original. The transaction identifier is returned to the acquirer in the authorization response and should be provided in subsequent clearing transactions. The components of the identifier include the transaction date, a sequence number for that date, a system identifier, and the time expressed in relative seconds.

        :param transaction_identifier: The transaction_identifier of this ReportingApigetResponse.
        :type: str
        """

        self._transaction_identifier = transaction_identifier

    @property
    def amount(self):
        """
        Gets the amount of this ReportingApigetResponse.
        This is the transaction amount expressed in U.S. Dollars. Derived internally.

        :return: The amount of this ReportingApigetResponse.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this ReportingApigetResponse.
        This is the transaction amount expressed in U.S. Dollars. Derived internally.

        :param amount: The amount of this ReportingApigetResponse.
        :type: float
        """

        self._amount = amount

    @property
    def acquiring_bin(self):
        """
        Gets the acquiring_bin of this ReportingApigetResponse.
        The Bank Identification Number (BIN) under which your Visa Direct is registered. This must match the information provided during enrollment.

        :return: The acquiring_bin of this ReportingApigetResponse.
        :rtype: int
        """
        return self._acquiring_bin

    @acquiring_bin.setter
    def acquiring_bin(self, acquiring_bin):
        """
        Sets the acquiring_bin of this ReportingApigetResponse.
        The Bank Identification Number (BIN) under which your Visa Direct is registered. This must match the information provided during enrollment.

        :param acquiring_bin: The acquiring_bin of this ReportingApigetResponse.
        :type: int
        """

        self._acquiring_bin = acquiring_bin

    @property
    def retrieval_reference_number(self):
        """
        Gets the retrieval_reference_number of this ReportingApigetResponse.
        A value used to tie together service calls related to a single financial transaction. Contains a number used with other key data elements to identify and track all messages related to a given cardholder transaction (referred to as a transaction set).

        :return: The retrieval_reference_number of this ReportingApigetResponse.
        :rtype: str
        """
        return self._retrieval_reference_number

    @retrieval_reference_number.setter
    def retrieval_reference_number(self, retrieval_reference_number):
        """
        Sets the retrieval_reference_number of this ReportingApigetResponse.
        A value used to tie together service calls related to a single financial transaction. Contains a number used with other key data elements to identify and track all messages related to a given cardholder transaction (referred to as a transaction set).

        :param retrieval_reference_number: The retrieval_reference_number of this ReportingApigetResponse.
        :type: str
        """

        self._retrieval_reference_number = retrieval_reference_number

    @property
    def systems_trace_audit_number(self):
        """
        Gets the systems_trace_audit_number of this ReportingApigetResponse.
        An audit number assigned by the message originator - unique to the originator.  Also known as the Interface Trace Number in Base II and the System Trace Audit Number in VIP (ISO F11).  The trace number remains unchanged for all messages throughout the life of the transaction.  It is a key data element used to match a response to its request or to match a message to others for a given cardholder transaction set.

        :return: The systems_trace_audit_number of this ReportingApigetResponse.
        :rtype: int
        """
        return self._systems_trace_audit_number

    @systems_trace_audit_number.setter
    def systems_trace_audit_number(self, systems_trace_audit_number):
        """
        Sets the systems_trace_audit_number of this ReportingApigetResponse.
        An audit number assigned by the message originator - unique to the originator.  Also known as the Interface Trace Number in Base II and the System Trace Audit Number in VIP (ISO F11).  The trace number remains unchanged for all messages throughout the life of the transaction.  It is a key data element used to match a response to its request or to match a message to others for a given cardholder transaction set.

        :param systems_trace_audit_number: The systems_trace_audit_number of this ReportingApigetResponse.
        :type: int
        """

        self._systems_trace_audit_number = systems_trace_audit_number

    @property
    def processing_date(self):
        """
        Gets the processing_date of this ReportingApigetResponse.
        The date on which VisaNet created the log (record).

        :return: The processing_date of this ReportingApigetResponse.
        :rtype: str
        """
        return self._processing_date

    @processing_date.setter
    def processing_date(self, processing_date):
        """
        Sets the processing_date of this ReportingApigetResponse.
        The date on which VisaNet created the log (record).

        :param processing_date: The processing_date of this ReportingApigetResponse.
        :type: str
        """

        self._processing_date = processing_date

    @property
    def account_number_masked(self):
        """
        Gets the account_number_masked of this ReportingApigetResponse.
        Contains a masked number identifying an account or customer relationship at a financial institution. Populated from the primary account number (PAN) contained in the original authorization request.  The account number is typically 16 digits, but can vary depending on the source.  The six digits after the initial 6 digit BIN number of a 16 digit PAN number are replaced by 'xxxxxx' for security reasons.  This field is left justified with trailing blanks.  (Note: Trailing zeros indicate the Account Number Extension was appended, which is zero-filled if not used.  Insignificant trailing zeros are not part of the account number.)

        :return: The account_number_masked of this ReportingApigetResponse.
        :rtype: str
        """
        return self._account_number_masked

    @account_number_masked.setter
    def account_number_masked(self, account_number_masked):
        """
        Sets the account_number_masked of this ReportingApigetResponse.
        Contains a masked number identifying an account or customer relationship at a financial institution. Populated from the primary account number (PAN) contained in the original authorization request.  The account number is typically 16 digits, but can vary depending on the source.  The six digits after the initial 6 digit BIN number of a 16 digit PAN number are replaced by 'xxxxxx' for security reasons.  This field is left justified with trailing blanks.  (Note: Trailing zeros indicate the Account Number Extension was appended, which is zero-filled if not used.  Insignificant trailing zeros are not part of the account number.)

        :param account_number_masked: The account_number_masked of this ReportingApigetResponse.
        :type: str
        """

        self._account_number_masked = account_number_masked

    @property
    def reason_code(self):
        """
        Gets the reason_code of this ReportingApigetResponse.
        The reason code description is derived from, Field 63.3 of VIP/SMS transactions. Several different kinds of codes may appear in this field, including Fee Collection Reason Codes, Advice Reason Codes, Adjustment Reason Codes, Service Confirmation/Change Notification Reason Codes, Chargeback Reason Codes, etc.<br>Valid values include*:<br>(*Not a complete list)<br>0053 - Chargeback - not as described / defective<br>0083 - Fraud - card not present<br>2105 - Acquirer advice - Clearing of an authorized transaction<br>2121 - VSDC transaction - Offline approval<br>2501 - Reversal - Transaction voided by customer

        :return: The reason_code of this ReportingApigetResponse.
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """
        Sets the reason_code of this ReportingApigetResponse.
        The reason code description is derived from, Field 63.3 of VIP/SMS transactions. Several different kinds of codes may appear in this field, including Fee Collection Reason Codes, Advice Reason Codes, Adjustment Reason Codes, Service Confirmation/Change Notification Reason Codes, Chargeback Reason Codes, etc.<br>Valid values include*:<br>(*Not a complete list)<br>0053 - Chargeback - not as described / defective<br>0083 - Fraud - card not present<br>2105 - Acquirer advice - Clearing of an authorized transaction<br>2121 - VSDC transaction - Offline approval<br>2501 - Reversal - Transaction voided by customer

        :param reason_code: The reason_code of this ReportingApigetResponse.
        :type: str
        """

        self._reason_code = reason_code

    @property
    def transaction_date_time(self):
        """
        Gets the transaction_date_time of this ReportingApigetResponse.
        The date & time the transaction was submitted to VisaNet. Example 2016-04-30:162345

        :return: The transaction_date_time of this ReportingApigetResponse.
        :rtype: str
        """
        return self._transaction_date_time

    @transaction_date_time.setter
    def transaction_date_time(self, transaction_date_time):
        """
        Sets the transaction_date_time of this ReportingApigetResponse.
        The date & time the transaction was submitted to VisaNet. Example 2016-04-30:162345

        :param transaction_date_time: The transaction_date_time of this ReportingApigetResponse.
        :type: str
        """

        self._transaction_date_time = transaction_date_time

    @property
    def transaction_state(self):
        """
        Gets the transaction_state of this ReportingApigetResponse.
        The transaction code (TC) description identifies the type of transaction being processed by BASE II. <br>Valid Values include*:<br>04 - Reclassification Advice<br>05 - Original Sales Draft or Representment<br>06 - Original Credit Voucher or Representment<br>07 - Original Cash Disbursement or Representment<br>10 - Clearing Fee Collection<br>15 - Sales Draft Chargeback<br>25 - Sales Draft Reversal<br>40 - Fraud Advice<br>*Examples provided to clarify definition. May not be a complete list.

        :return: The transaction_state of this ReportingApigetResponse.
        :rtype: str
        """
        return self._transaction_state

    @transaction_state.setter
    def transaction_state(self, transaction_state):
        """
        Sets the transaction_state of this ReportingApigetResponse.
        The transaction code (TC) description identifies the type of transaction being processed by BASE II. <br>Valid Values include*:<br>04 - Reclassification Advice<br>05 - Original Sales Draft or Representment<br>06 - Original Credit Voucher or Representment<br>07 - Original Cash Disbursement or Representment<br>10 - Clearing Fee Collection<br>15 - Sales Draft Chargeback<br>25 - Sales Draft Reversal<br>40 - Fraud Advice<br>*Examples provided to clarify definition. May not be a complete list.

        :param transaction_state: The transaction_state of this ReportingApigetResponse.
        :type: str
        """

        self._transaction_state = transaction_state

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReportingApigetResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# ----------------------------------------------------------------------------------------------------------------------
# © Copyright 2018 Visa. All Rights Reserved.
#
# NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
# and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
# rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
#
# By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
# (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
# programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
# THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
# FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
# ----------------------------------------------------------------------------------------------------------------------